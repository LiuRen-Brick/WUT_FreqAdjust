
WUT_FreqAdjust.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbd4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  0800cce8  0800cce8  0000dce8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d160  0800d160  0000f238  2**0
                  CONTENTS
  4 .ARM          00000008  0800d160  0800d160  0000e160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d168  0800d168  0000f238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d168  0800d168  0000e168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d16c  0800d16c  0000e16c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  0800d170  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b0c  20000238  0800d3a8  0000f238  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000d44  0800d3a8  0000fd44  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f238  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e50  00000000  00000000  0000f261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d33  00000000  00000000  000220b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  00025de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dac  00000000  00000000  00026fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ca1d  00000000  00000000  00027d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001afaf  00000000  00000000  00044791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000941d0  00000000  00000000  0005f740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f3910  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005be8  00000000  00000000  000f3954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000f953c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000238 	.word	0x20000238
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cccc 	.word	0x0800cccc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000023c 	.word	0x2000023c
 800014c:	0800cccc 	.word	0x0800cccc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2uiz>:
 8001024:	0042      	lsls	r2, r0, #1
 8001026:	d20e      	bcs.n	8001046 <__aeabi_f2uiz+0x22>
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800102c:	d30b      	bcc.n	8001046 <__aeabi_f2uiz+0x22>
 800102e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d409      	bmi.n	800104c <__aeabi_f2uiz+0x28>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001040:	fa23 f002 	lsr.w	r0, r3, r2
 8001044:	4770      	bx	lr
 8001046:	f04f 0000 	mov.w	r0, #0
 800104a:	4770      	bx	lr
 800104c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001050:	d101      	bne.n	8001056 <__aeabi_f2uiz+0x32>
 8001052:	0242      	lsls	r2, r0, #9
 8001054:	d102      	bne.n	800105c <__aeabi_f2uiz+0x38>
 8001056:	f04f 30ff 	mov.w	r0, #4294967295
 800105a:	4770      	bx	lr
 800105c:	f04f 0000 	mov.w	r0, #0
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <__aeabi_d2lz>:
 8001064:	b538      	push	{r3, r4, r5, lr}
 8001066:	2200      	movs	r2, #0
 8001068:	2300      	movs	r3, #0
 800106a:	4604      	mov	r4, r0
 800106c:	460d      	mov	r5, r1
 800106e:	f7ff fca5 	bl	80009bc <__aeabi_dcmplt>
 8001072:	b928      	cbnz	r0, 8001080 <__aeabi_d2lz+0x1c>
 8001074:	4620      	mov	r0, r4
 8001076:	4629      	mov	r1, r5
 8001078:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800107c:	f000 b80a 	b.w	8001094 <__aeabi_d2ulz>
 8001080:	4620      	mov	r0, r4
 8001082:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001086:	f000 f805 	bl	8001094 <__aeabi_d2ulz>
 800108a:	4240      	negs	r0, r0
 800108c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001090:	bd38      	pop	{r3, r4, r5, pc}
 8001092:	bf00      	nop

08001094 <__aeabi_d2ulz>:
 8001094:	b5d0      	push	{r4, r6, r7, lr}
 8001096:	2200      	movs	r2, #0
 8001098:	4b0b      	ldr	r3, [pc, #44]	@ (80010c8 <__aeabi_d2ulz+0x34>)
 800109a:	4606      	mov	r6, r0
 800109c:	460f      	mov	r7, r1
 800109e:	f7ff fa1b 	bl	80004d8 <__aeabi_dmul>
 80010a2:	f7ff fcf1 	bl	8000a88 <__aeabi_d2uiz>
 80010a6:	4604      	mov	r4, r0
 80010a8:	f7ff f99c 	bl	80003e4 <__aeabi_ui2d>
 80010ac:	2200      	movs	r2, #0
 80010ae:	4b07      	ldr	r3, [pc, #28]	@ (80010cc <__aeabi_d2ulz+0x38>)
 80010b0:	f7ff fa12 	bl	80004d8 <__aeabi_dmul>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4630      	mov	r0, r6
 80010ba:	4639      	mov	r1, r7
 80010bc:	f7ff f854 	bl	8000168 <__aeabi_dsub>
 80010c0:	f7ff fce2 	bl	8000a88 <__aeabi_d2uiz>
 80010c4:	4621      	mov	r1, r4
 80010c6:	bdd0      	pop	{r4, r6, r7, pc}
 80010c8:	3df00000 	.word	0x3df00000
 80010cc:	41f00000 	.word	0x41f00000

080010d0 <AD9833_Delay>:
 * @param   none
 * @retval  none
 * @func	ad9833延迟函数,单片机发送数据时，避免间隔过短出现问题
 */
void AD9833_Delay(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
    uint16_t i;
    for (i = 0; i < 1; i++);
 80010d6:	2300      	movs	r3, #0
 80010d8:	80fb      	strh	r3, [r7, #6]
 80010da:	e002      	b.n	80010e2 <AD9833_Delay+0x12>
 80010dc:	88fb      	ldrh	r3, [r7, #6]
 80010de:	3301      	adds	r3, #1
 80010e0:	80fb      	strh	r3, [r7, #6]
 80010e2:	88fb      	ldrh	r3, [r7, #6]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d0f9      	beq.n	80010dc <AD9833_Delay+0xc>
}
 80010e8:	bf00      	nop
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr

080010f4 <AD9833_FSYNCSet>:
 * 			PinState:电平置位
 * @retval  none
 * @func	写入AD9833FSYNC脚的电平信号
 */
static void AD9833_FSYNCSet(uint8_t ch,GPIO_PinState PinState)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	460a      	mov	r2, r1
 80010fe:	71fb      	strb	r3, [r7, #7]
 8001100:	4613      	mov	r3, r2
 8001102:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(AD9833_FSYNC_PORT[ch], AD9833_FSYNC_GPIO[ch], PinState);
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	4a07      	ldr	r2, [pc, #28]	@ (8001124 <AD9833_FSYNCSet+0x30>)
 8001108:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	4a06      	ldr	r2, [pc, #24]	@ (8001128 <AD9833_FSYNCSet+0x34>)
 8001110:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001114:	79ba      	ldrb	r2, [r7, #6]
 8001116:	4619      	mov	r1, r3
 8001118:	f004 fae3 	bl	80056e2 <HAL_GPIO_WritePin>
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	2000000c 	.word	0x2000000c
 8001128:	20000000 	.word	0x20000000

0800112c <AD9833_SCLKSet>:
 * 			PinState:电平置位
 * @retval  none
 * @func	写入AD9833SCLK脚的电平信号
 */
static void AD9833_SCLKSet(uint8_t ch,GPIO_PinState PinState)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	460a      	mov	r2, r1
 8001136:	71fb      	strb	r3, [r7, #7]
 8001138:	4613      	mov	r3, r2
 800113a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(AD9833_SCLK_PORT[ch], AD9833_SCLK_GPIO[ch], PinState);
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	4a07      	ldr	r2, [pc, #28]	@ (800115c <AD9833_SCLKSet+0x30>)
 8001140:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	4a06      	ldr	r2, [pc, #24]	@ (8001160 <AD9833_SCLKSet+0x34>)
 8001148:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800114c:	79ba      	ldrb	r2, [r7, #6]
 800114e:	4619      	mov	r1, r3
 8001150:	f004 fac7 	bl	80056e2 <HAL_GPIO_WritePin>
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	2000001c 	.word	0x2000001c
 8001160:	20000008 	.word	0x20000008

08001164 <AD9833_SDATASet>:
 * 			PinState:电平置位
 * @retval  none
 * @func	写入AD9833SDATA脚的电平信号
 */
static void AD9833_SDATASet(uint8_t ch,GPIO_PinState PinState)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	460a      	mov	r2, r1
 800116e:	71fb      	strb	r3, [r7, #7]
 8001170:	4613      	mov	r3, r2
 8001172:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(AD9833_SDATA_PORT[ch], AD9833_SDATA_GPIO[ch], PinState);
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	4a07      	ldr	r2, [pc, #28]	@ (8001194 <AD9833_SDATASet+0x30>)
 8001178:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	4a06      	ldr	r2, [pc, #24]	@ (8001198 <AD9833_SDATASet+0x34>)
 8001180:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001184:	79ba      	ldrb	r2, [r7, #6]
 8001186:	4619      	mov	r1, r3
 8001188:	f004 faab 	bl	80056e2 <HAL_GPIO_WritePin>
}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000014 	.word	0x20000014
 8001198:	20000004 	.word	0x20000004

0800119c <AD9833_SendData>:
 * 			txdata:要发送的数据
 * @retval  none
 * @func	向AD9833发送指令
 */
static void AD9833_SendData(uint8_t ch,uint32_t txdata)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	6039      	str	r1, [r7, #0]
 80011a6:	71fb      	strb	r3, [r7, #7]
	uint8_t tag_i = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	73fb      	strb	r3, [r7, #15]

	/*发送指令之前AD9833的SCLK引脚使能，FSYNC引脚复位*/
	AD9833_SCLKSet(ch,SET);
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	2101      	movs	r1, #1
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ffbb 	bl	800112c <AD9833_SCLKSet>
	AD9833_FSYNCSet(ch,SET);
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	2101      	movs	r1, #1
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff ff9a 	bl	80010f4 <AD9833_FSYNCSet>
	AD9833_FSYNCSet(ch,RESET);
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ff95 	bl	80010f4 <AD9833_FSYNCSet>

	for(tag_i=0;tag_i<16;tag_i++){
 80011ca:	2300      	movs	r3, #0
 80011cc:	73fb      	strb	r3, [r7, #15]
 80011ce:	e023      	b.n	8001218 <AD9833_SendData+0x7c>
		if (txdata & 0x8000){
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d005      	beq.n	80011e6 <AD9833_SendData+0x4a>
			AD9833_SDATASet(ch,SET);
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	2101      	movs	r1, #1
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff ffc0 	bl	8001164 <AD9833_SDATASet>
 80011e4:	e004      	b.n	80011f0 <AD9833_SendData+0x54>
		}
		else{
			AD9833_SDATASet(ch,RESET);
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff ffba 	bl	8001164 <AD9833_SDATASet>
		}
		AD9833_Delay();
 80011f0:	f7ff ff6e 	bl	80010d0 <AD9833_Delay>
		AD9833_SCLKSet(ch,RESET);
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	2100      	movs	r1, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff97 	bl	800112c <AD9833_SCLKSet>
		AD9833_Delay();
 80011fe:	f7ff ff67 	bl	80010d0 <AD9833_Delay>
		AD9833_SCLKSet(ch,SET);
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	2101      	movs	r1, #1
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff ff90 	bl	800112c <AD9833_SCLKSet>
		txdata<<=1;
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	603b      	str	r3, [r7, #0]
	for(tag_i=0;tag_i<16;tag_i++){
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	3301      	adds	r3, #1
 8001216:	73fb      	strb	r3, [r7, #15]
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	2b0f      	cmp	r3, #15
 800121c:	d9d8      	bls.n	80011d0 <AD9833_SendData+0x34>
	}
	AD9833_FSYNCSet(ch,SET);
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	2101      	movs	r1, #1
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ff66 	bl	80010f4 <AD9833_FSYNCSet>
}
 8001228:	bf00      	nop
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <AD9833_SendPhase>:
 * 			txdata:要发送的数据
 * @retval  none
 * @func	向AD9833发送指令
 */
static void AD9833_SendPhase(uint8_t ch,uint16_t reg, uint16_t val)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
 800123a:	460b      	mov	r3, r1
 800123c:	80bb      	strh	r3, [r7, #4]
 800123e:	4613      	mov	r3, r2
 8001240:	807b      	strh	r3, [r7, #2]
    uint16_t phase = reg;
 8001242:	88bb      	ldrh	r3, [r7, #4]
 8001244:	81fb      	strh	r3, [r7, #14]
    phase |= val;
 8001246:	89fa      	ldrh	r2, [r7, #14]
 8001248:	887b      	ldrh	r3, [r7, #2]
 800124a:	4313      	orrs	r3, r2
 800124c:	81fb      	strh	r3, [r7, #14]
    AD9833_SendData(ch,phase);
 800124e:	89fa      	ldrh	r2, [r7, #14]
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	4611      	mov	r1, r2
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ffa1 	bl	800119c <AD9833_SendData>
}
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <AD9833_SendWave>:
 * @param	Freq_SFR:设置相位寄存器
 * @retval  none
 * @func	向AD9833发送波形输出指令
 */
static void AD9833_SendWave(uint8_t ch,uint32_t WaveMode,uint32_t Freq_SFR,uint32_t Phase_SFR)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b086      	sub	sp, #24
 8001266:	af00      	add	r7, sp, #0
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
 800126c:	603b      	str	r3, [r7, #0]
 800126e:	4603      	mov	r3, r0
 8001270:	73fb      	strb	r3, [r7, #15]
    uint32_t val = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
    val = (val | WaveMode | Freq_SFR | Phase_SFR);
 8001276:	697a      	ldr	r2, [r7, #20]
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	431a      	orrs	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4313      	orrs	r3, r2
 8001280:	683a      	ldr	r2, [r7, #0]
 8001282:	4313      	orrs	r3, r2
 8001284:	617b      	str	r3, [r7, #20]
    AD9833_SendData(ch,val);
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	6979      	ldr	r1, [r7, #20]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff ff86 	bl	800119c <AD9833_SendData>
}
 8001290:	bf00      	nop
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <AD9833_SendFrequency>:
 * @param	Freq_SFR:设置相位寄存器
 * @retval  none
 * @func	向AD9833发送指令
 */
static void AD9833_SendFrequency(uint8_t ch,unsigned short reg, double fout)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08c      	sub	sp, #48	@ 0x30
 800129c:	af00      	add	r7, sp, #0
 800129e:	e9c7 2300 	strd	r2, r3, [r7]
 80012a2:	4603      	mov	r3, r0
 80012a4:	73fb      	strb	r3, [r7, #15]
 80012a6:	460b      	mov	r3, r1
 80012a8:	81bb      	strh	r3, [r7, #12]
	int frequence_LSB,frequence_MSB;
	double   frequence_mid,frequence_DATA;
	long int frequence_hex;
	//Fout = Fmclk / 2^28 * FREQREG
	frequence_mid=268435456/11.059;
 80012aa:	a327      	add	r3, pc, #156	@ (adr r3, 8001348 <AD9833_SendFrequency+0xb0>)
 80012ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	frequence_DATA=fout;
 80012b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012b8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	frequence_DATA=frequence_DATA/1000000;
 80012bc:	a324      	add	r3, pc, #144	@ (adr r3, 8001350 <AD9833_SendFrequency+0xb8>)
 80012be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80012c6:	f7ff fa31 	bl	800072c <__aeabi_ddiv>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	e9c7 2308 	strd	r2, r3, [r7, #32]
	frequence_DATA=frequence_DATA*frequence_mid;
 80012d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80012d6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80012da:	f7ff f8fd 	bl	80004d8 <__aeabi_dmul>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	frequence_hex=frequence_DATA;
 80012e6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80012ea:	f7ff fba5 	bl	8000a38 <__aeabi_d2iz>
 80012ee:	4603      	mov	r3, r0
 80012f0:	61fb      	str	r3, [r7, #28]
	frequence_LSB=frequence_hex;
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	61bb      	str	r3, [r7, #24]
	frequence_LSB=frequence_LSB&0x3fff;
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80012fc:	61bb      	str	r3, [r7, #24]
	frequence_MSB=frequence_hex>>14;
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	139b      	asrs	r3, r3, #14
 8001302:	617b      	str	r3, [r7, #20]
	frequence_MSB=frequence_MSB&0x3fff;
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800130a:	617b      	str	r3, [r7, #20]
	frequence_LSB=frequence_LSB|reg;
 800130c:	89bb      	ldrh	r3, [r7, #12]
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4313      	orrs	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
	frequence_MSB=frequence_MSB|reg;
 8001314:	89bb      	ldrh	r3, [r7, #12]
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	4313      	orrs	r3, r2
 800131a:	617b      	str	r3, [r7, #20]
	AD9833_SendData(ch,0x2100);
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	f44f 5104 	mov.w	r1, #8448	@ 0x2100
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff3a 	bl	800119c <AD9833_SendData>
	//设置频率是需要连续写入两次寄存器的值
    //第一次写入包含14个LSB
	//第二次写入包含14个MSB
	AD9833_SendData(ch,frequence_LSB);
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	7bfb      	ldrb	r3, [r7, #15]
 800132c:	4611      	mov	r1, r2
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff ff34 	bl	800119c <AD9833_SendData>
	AD9833_SendData(ch,frequence_MSB);
 8001334:	697a      	ldr	r2, [r7, #20]
 8001336:	7bfb      	ldrb	r3, [r7, #15]
 8001338:	4611      	mov	r1, r2
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ff2e 	bl	800119c <AD9833_SendData>
}
 8001340:	bf00      	nop
 8001342:	3730      	adds	r7, #48	@ 0x30
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	78ed98ce 	.word	0x78ed98ce
 800134c:	41772608 	.word	0x41772608
 8001350:	00000000 	.word	0x00000000
 8001354:	412e8480 	.word	0x412e8480

08001358 <AD9833_InitIo>:
 * @param   ch:超声驱动的通道号
 * @retval  none
 * @func	初始化AD9833
 */
void AD9833_InitIo(uint8_t ch)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
	AD9833_FSYNCSet(ch,GPIO_PIN_SET);
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	2101      	movs	r1, #1
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fec4 	bl	80010f4 <AD9833_FSYNCSet>
	AD9833_SCLKSet(ch,GPIO_PIN_SET);
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	2101      	movs	r1, #1
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fedb 	bl	800112c <AD9833_SCLKSet>
	AD9833_SDATASet(ch,GPIO_PIN_SET);
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	2101      	movs	r1, #1
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fef2 	bl	8001164 <AD9833_SDATASet>
}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <AD9833_SetPara>:
 * @param	WaveMode:波形类型
 * @retval  none
 * @func	向AD9833发送参数指令
 */
void AD9833_SetPara(uint8_t ch,uint32_t Freq_SFR,double Freq,uint32_t Phase_SFR,uint32_t Phase,uint32_t WaveMode)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	60b9      	str	r1, [r7, #8]
 8001390:	e9c7 2300 	strd	r2, r3, [r7]
 8001394:	4603      	mov	r3, r0
 8001396:	73fb      	strb	r3, [r7, #15]
	unsigned int Fsel,Psel;
	//第一次设置数据时要先复位
	AD9833_SendData(ch,0x0100);
 8001398:	7bfb      	ldrb	r3, [r7, #15]
 800139a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fefc 	bl	800119c <AD9833_SendData>
	AD9833_SendData(ch,0x2100);
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	f44f 5104 	mov.w	r1, #8448	@ 0x2100
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fef6 	bl	800119c <AD9833_SendData>
	AD9833_SendFrequency(ch,Freq_SFR,Freq);
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	b299      	uxth	r1, r3
 80013b4:	7bf8      	ldrb	r0, [r7, #15]
 80013b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013ba:	f7ff ff6d 	bl	8001298 <AD9833_SendFrequency>
	AD9833_SendPhase(ch,Phase_SFR,Phase);
 80013be:	6a3b      	ldr	r3, [r7, #32]
 80013c0:	b299      	uxth	r1, r3
 80013c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ff31 	bl	8001230 <AD9833_SendPhase>
	if(Freq_SFR == AD9833_REG_FREQ0)
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80013d4:	d102      	bne.n	80013dc <AD9833_SetPara+0x54>
	{
		Fsel = AD9833_FSEL0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
 80013da:	e002      	b.n	80013e2 <AD9833_SetPara+0x5a>
	}
	else
	{
		Fsel = AD9833_FSEL1;
 80013dc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80013e0:	617b      	str	r3, [r7, #20]
	}
	if(Phase_SFR == AD9833_REG_PHASE0)
 80013e2:	6a3b      	ldr	r3, [r7, #32]
 80013e4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80013e8:	d102      	bne.n	80013f0 <AD9833_SetPara+0x68>
	{
		Psel = AD9833_PSEL0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	e002      	b.n	80013f6 <AD9833_SetPara+0x6e>
	}
	else
	{
		Psel = AD9833_PSEL1;
 80013f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013f4:	613b      	str	r3, [r7, #16]
	}
	AD9833_SendWave(ch,WaveMode,Fsel,Psel);
 80013f6:	7bf8      	ldrb	r0, [r7, #15]
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80013fe:	f7ff ff30 	bl	8001262 <AD9833_SendWave>
}
 8001402:	bf00      	nop
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800141c:	4b18      	ldr	r3, [pc, #96]	@ (8001480 <MX_ADC1_Init+0x74>)
 800141e:	4a19      	ldr	r2, [pc, #100]	@ (8001484 <MX_ADC1_Init+0x78>)
 8001420:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001422:	4b17      	ldr	r3, [pc, #92]	@ (8001480 <MX_ADC1_Init+0x74>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001428:	4b15      	ldr	r3, [pc, #84]	@ (8001480 <MX_ADC1_Init+0x74>)
 800142a:	2201      	movs	r2, #1
 800142c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800142e:	4b14      	ldr	r3, [pc, #80]	@ (8001480 <MX_ADC1_Init+0x74>)
 8001430:	2200      	movs	r2, #0
 8001432:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001434:	4b12      	ldr	r3, [pc, #72]	@ (8001480 <MX_ADC1_Init+0x74>)
 8001436:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800143a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800143c:	4b10      	ldr	r3, [pc, #64]	@ (8001480 <MX_ADC1_Init+0x74>)
 800143e:	2200      	movs	r2, #0
 8001440:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001442:	4b0f      	ldr	r3, [pc, #60]	@ (8001480 <MX_ADC1_Init+0x74>)
 8001444:	2201      	movs	r2, #1
 8001446:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001448:	480d      	ldr	r0, [pc, #52]	@ (8001480 <MX_ADC1_Init+0x74>)
 800144a:	f002 fe2d 	bl	80040a8 <HAL_ADC_Init>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001454:	f001 ff0c 	bl	8003270 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001458:	2309      	movs	r3, #9
 800145a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800145c:	2301      	movs	r3, #1
 800145e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8001460:	2302      	movs	r3, #2
 8001462:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	4619      	mov	r1, r3
 8001468:	4805      	ldr	r0, [pc, #20]	@ (8001480 <MX_ADC1_Init+0x74>)
 800146a:	f002 ffef 	bl	800444c <HAL_ADC_ConfigChannel>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001474:	f001 fefc 	bl	8003270 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001478:	bf00      	nop
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000298 	.word	0x20000298
 8001484:	40012400 	.word	0x40012400

08001488 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b088      	sub	sp, #32
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 0310 	add.w	r3, r7, #16
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a29      	ldr	r2, [pc, #164]	@ (8001548 <HAL_ADC_MspInit+0xc0>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d14a      	bne.n	800153e <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014a8:	4b28      	ldr	r3, [pc, #160]	@ (800154c <HAL_ADC_MspInit+0xc4>)
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	4a27      	ldr	r2, [pc, #156]	@ (800154c <HAL_ADC_MspInit+0xc4>)
 80014ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014b2:	6193      	str	r3, [r2, #24]
 80014b4:	4b25      	ldr	r3, [pc, #148]	@ (800154c <HAL_ADC_MspInit+0xc4>)
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c0:	4b22      	ldr	r3, [pc, #136]	@ (800154c <HAL_ADC_MspInit+0xc4>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	4a21      	ldr	r2, [pc, #132]	@ (800154c <HAL_ADC_MspInit+0xc4>)
 80014c6:	f043 0308 	orr.w	r3, r3, #8
 80014ca:	6193      	str	r3, [r2, #24]
 80014cc:	4b1f      	ldr	r3, [pc, #124]	@ (800154c <HAL_ADC_MspInit+0xc4>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	f003 0308 	and.w	r3, r3, #8
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = VBAT_ADC_Pin;
 80014d8:	2302      	movs	r3, #2
 80014da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014dc:	2303      	movs	r3, #3
 80014de:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(VBAT_ADC_GPIO_Port, &GPIO_InitStruct);
 80014e0:	f107 0310 	add.w	r3, r7, #16
 80014e4:	4619      	mov	r1, r3
 80014e6:	481a      	ldr	r0, [pc, #104]	@ (8001550 <HAL_ADC_MspInit+0xc8>)
 80014e8:	f003 ff60 	bl	80053ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80014ec:	4b19      	ldr	r3, [pc, #100]	@ (8001554 <HAL_ADC_MspInit+0xcc>)
 80014ee:	4a1a      	ldr	r2, [pc, #104]	@ (8001558 <HAL_ADC_MspInit+0xd0>)
 80014f0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014f2:	4b18      	ldr	r3, [pc, #96]	@ (8001554 <HAL_ADC_MspInit+0xcc>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014f8:	4b16      	ldr	r3, [pc, #88]	@ (8001554 <HAL_ADC_MspInit+0xcc>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014fe:	4b15      	ldr	r3, [pc, #84]	@ (8001554 <HAL_ADC_MspInit+0xcc>)
 8001500:	2280      	movs	r2, #128	@ 0x80
 8001502:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001504:	4b13      	ldr	r3, [pc, #76]	@ (8001554 <HAL_ADC_MspInit+0xcc>)
 8001506:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800150a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800150c:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <HAL_ADC_MspInit+0xcc>)
 800150e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001512:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001514:	4b0f      	ldr	r3, [pc, #60]	@ (8001554 <HAL_ADC_MspInit+0xcc>)
 8001516:	2220      	movs	r2, #32
 8001518:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800151a:	4b0e      	ldr	r3, [pc, #56]	@ (8001554 <HAL_ADC_MspInit+0xcc>)
 800151c:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001520:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001522:	480c      	ldr	r0, [pc, #48]	@ (8001554 <HAL_ADC_MspInit+0xcc>)
 8001524:	f003 fb48 	bl	8004bb8 <HAL_DMA_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 800152e:	f001 fe9f 	bl	8003270 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a07      	ldr	r2, [pc, #28]	@ (8001554 <HAL_ADC_MspInit+0xcc>)
 8001536:	621a      	str	r2, [r3, #32]
 8001538:	4a06      	ldr	r2, [pc, #24]	@ (8001554 <HAL_ADC_MspInit+0xcc>)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800153e:	bf00      	nop
 8001540:	3720      	adds	r7, #32
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40012400 	.word	0x40012400
 800154c:	40021000 	.word	0x40021000
 8001550:	40010c00 	.word	0x40010c00
 8001554:	200002c8 	.word	0x200002c8
 8001558:	40020008 	.word	0x40020008

0800155c <ADC1_Init>:
 * @param	: void
 * @retval  : none
 * @funct   : ADC采样初始化，采样校准，开启DMA
 */
void ADC1_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
	HAL_ADCEx_Calibration_Start(&hadc1);
 8001560:	4804      	ldr	r0, [pc, #16]	@ (8001574 <ADC1_Init+0x18>)
 8001562:	f003 f96d 	bl	8004840 <HAL_ADCEx_Calibration_Start>
	//HAL_ADC_Start(&hadc1);
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&bat_temp_val, 1);
 8001566:	2201      	movs	r2, #1
 8001568:	4903      	ldr	r1, [pc, #12]	@ (8001578 <ADC1_Init+0x1c>)
 800156a:	4802      	ldr	r0, [pc, #8]	@ (8001574 <ADC1_Init+0x18>)
 800156c:	f002 fe74 	bl	8004258 <HAL_ADC_Start_DMA>
}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20000298 	.word	0x20000298
 8001578:	20000254 	.word	0x20000254

0800157c <ADC1_GetBatteryVol>:
 * @param  :void
 * @retval :none
 * @func   :获取电池电压，对电压进行滤波处理，标定不�??????????要？
 */
void ADC1_GetBatteryVol(void)
{
 800157c:	b590      	push	{r4, r7, lr}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
	float battery_vol = 0.0f;
 8001582:	f04f 0300 	mov.w	r3, #0
 8001586:	607b      	str	r3, [r7, #4]
	uint32_t new_tick = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	603b      	str	r3, [r7, #0]
	static uint8_t SampleCount = 0;
	static uint32_t old_tick = 0;

	//等待DMA空闲执行下一次采�?
	if(__HAL_DMA_GET_FLAG(&hadc1,DMA_FLAG_TC1) == SET)
 800158c:	4b3d      	ldr	r3, [pc, #244]	@ (8001684 <ADC1_GetBatteryVol+0x108>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b01      	cmp	r3, #1
 8001596:	d107      	bne.n	80015a8 <ADC1_GetBatteryVol+0x2c>
	{
	   __HAL_DMA_CLEAR_FLAG(&hadc1,DMA_FLAG_TC1);
 8001598:	4b3a      	ldr	r3, [pc, #232]	@ (8001684 <ADC1_GetBatteryVol+0x108>)
 800159a:	2202      	movs	r2, #2
 800159c:	605a      	str	r2, [r3, #4]
	   HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&bat_temp_val, 1);
 800159e:	2201      	movs	r2, #1
 80015a0:	4939      	ldr	r1, [pc, #228]	@ (8001688 <ADC1_GetBatteryVol+0x10c>)
 80015a2:	483a      	ldr	r0, [pc, #232]	@ (800168c <ADC1_GetBatteryVol+0x110>)
 80015a4:	f002 fe58 	bl	8004258 <HAL_ADC_Start_DMA>
	}
	battery_vol = (float)bat_temp_val * 3300.0f / 4095;
 80015a8:	4b37      	ldr	r3, [pc, #220]	@ (8001688 <ADC1_GetBatteryVol+0x10c>)
 80015aa:	881b      	ldrh	r3, [r3, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff fb91 	bl	8000cd4 <__aeabi_ui2f>
 80015b2:	4603      	mov	r3, r0
 80015b4:	4936      	ldr	r1, [pc, #216]	@ (8001690 <ADC1_GetBatteryVol+0x114>)
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff fbe4 	bl	8000d84 <__aeabi_fmul>
 80015bc:	4603      	mov	r3, r0
 80015be:	4935      	ldr	r1, [pc, #212]	@ (8001694 <ADC1_GetBatteryVol+0x118>)
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fc93 	bl	8000eec <__aeabi_fdiv>
 80015c6:	4603      	mov	r3, r0
 80015c8:	607b      	str	r3, [r7, #4]
	//采样采用的分压电�?3:2左右
	battery_vol = battery_vol / 0.6285f;
 80015ca:	4933      	ldr	r1, [pc, #204]	@ (8001698 <ADC1_GetBatteryVol+0x11c>)
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff fc8d 	bl	8000eec <__aeabi_fdiv>
 80015d2:	4603      	mov	r3, r0
 80015d4:	607b      	str	r3, [r7, #4]

	if(SampleStarFlg == 0)
 80015d6:	4b31      	ldr	r3, [pc, #196]	@ (800169c <ADC1_GetBatteryVol+0x120>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d11b      	bne.n	8001616 <ADC1_GetBatteryVol+0x9a>
	{
		//第一次采样完全填�?
		for(SampleCount = 0;SampleCount < 15;SampleCount++)
 80015de:	4b30      	ldr	r3, [pc, #192]	@ (80016a0 <ADC1_GetBatteryVol+0x124>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	701a      	strb	r2, [r3, #0]
 80015e4:	e00f      	b.n	8001606 <ADC1_GetBatteryVol+0x8a>
		{
			battery_adc_buff[SampleCount] = (uint32_t)battery_vol;
 80015e6:	4b2e      	ldr	r3, [pc, #184]	@ (80016a0 <ADC1_GetBatteryVol+0x124>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	461c      	mov	r4, r3
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff fd19 	bl	8001024 <__aeabi_f2uiz>
 80015f2:	4603      	mov	r3, r0
 80015f4:	4a2b      	ldr	r2, [pc, #172]	@ (80016a4 <ADC1_GetBatteryVol+0x128>)
 80015f6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		for(SampleCount = 0;SampleCount < 15;SampleCount++)
 80015fa:	4b29      	ldr	r3, [pc, #164]	@ (80016a0 <ADC1_GetBatteryVol+0x124>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	3301      	adds	r3, #1
 8001600:	b2da      	uxtb	r2, r3
 8001602:	4b27      	ldr	r3, [pc, #156]	@ (80016a0 <ADC1_GetBatteryVol+0x124>)
 8001604:	701a      	strb	r2, [r3, #0]
 8001606:	4b26      	ldr	r3, [pc, #152]	@ (80016a0 <ADC1_GetBatteryVol+0x124>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b0e      	cmp	r3, #14
 800160c:	d9eb      	bls.n	80015e6 <ADC1_GetBatteryVol+0x6a>
		}
		SampleStarFlg = 1;
 800160e:	4b23      	ldr	r3, [pc, #140]	@ (800169c <ADC1_GetBatteryVol+0x120>)
 8001610:	2201      	movs	r2, #1
 8001612:	701a      	strb	r2, [r3, #0]
 8001614:	e016      	b.n	8001644 <ADC1_GetBatteryVol+0xc8>
	}else
	{
		battery_adc_buff[SampleCount] = (uint32_t)battery_vol;
 8001616:	4b22      	ldr	r3, [pc, #136]	@ (80016a0 <ADC1_GetBatteryVol+0x124>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	461c      	mov	r4, r3
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff fd01 	bl	8001024 <__aeabi_f2uiz>
 8001622:	4603      	mov	r3, r0
 8001624:	4a1f      	ldr	r2, [pc, #124]	@ (80016a4 <ADC1_GetBatteryVol+0x128>)
 8001626:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		SampleCount++;
 800162a:	4b1d      	ldr	r3, [pc, #116]	@ (80016a0 <ADC1_GetBatteryVol+0x124>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	3301      	adds	r3, #1
 8001630:	b2da      	uxtb	r2, r3
 8001632:	4b1b      	ldr	r3, [pc, #108]	@ (80016a0 <ADC1_GetBatteryVol+0x124>)
 8001634:	701a      	strb	r2, [r3, #0]
		if(SampleCount >= 15)
 8001636:	4b1a      	ldr	r3, [pc, #104]	@ (80016a0 <ADC1_GetBatteryVol+0x124>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b0e      	cmp	r3, #14
 800163c:	d902      	bls.n	8001644 <ADC1_GetBatteryVol+0xc8>
		{
			SampleCount = 0;
 800163e:	4b18      	ldr	r3, [pc, #96]	@ (80016a0 <ADC1_GetBatteryVol+0x124>)
 8001640:	2200      	movs	r2, #0
 8001642:	701a      	strb	r2, [r3, #0]
		}
	}

	battery_adc_value1  = SampleVolFilter(battery_adc_buff,15);
 8001644:	210f      	movs	r1, #15
 8001646:	4817      	ldr	r0, [pc, #92]	@ (80016a4 <ADC1_GetBatteryVol+0x128>)
 8001648:	f000 f834 	bl	80016b4 <SampleVolFilter>
 800164c:	4603      	mov	r3, r0
 800164e:	461a      	mov	r2, r3
 8001650:	4b15      	ldr	r3, [pc, #84]	@ (80016a8 <ADC1_GetBatteryVol+0x12c>)
 8001652:	801a      	strh	r2, [r3, #0]
	new_tick = HAL_GetTick();
 8001654:	f002 fcdc 	bl	8004010 <HAL_GetTick>
 8001658:	6038      	str	r0, [r7, #0]
	if((new_tick - old_tick) > 500)
 800165a:	4b14      	ldr	r3, [pc, #80]	@ (80016ac <ADC1_GetBatteryVol+0x130>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001666:	d908      	bls.n	800167a <ADC1_GetBatteryVol+0xfe>
	{
		old_tick = new_tick;
 8001668:	4a10      	ldr	r2, [pc, #64]	@ (80016ac <ADC1_GetBatteryVol+0x130>)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	6013      	str	r3, [r2, #0]
		printf("Vol=%d\n",battery_adc_value1);
 800166e:	4b0e      	ldr	r3, [pc, #56]	@ (80016a8 <ADC1_GetBatteryVol+0x12c>)
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	4619      	mov	r1, r3
 8001674:	480e      	ldr	r0, [pc, #56]	@ (80016b0 <ADC1_GetBatteryVol+0x134>)
 8001676:	f007 fee7 	bl	8009448 <iprintf>
	}
}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	bd90      	pop	{r4, r7, pc}
 8001682:	bf00      	nop
 8001684:	40020000 	.word	0x40020000
 8001688:	20000254 	.word	0x20000254
 800168c:	20000298 	.word	0x20000298
 8001690:	454e4000 	.word	0x454e4000
 8001694:	457ff000 	.word	0x457ff000
 8001698:	3f20e560 	.word	0x3f20e560
 800169c:	20000294 	.word	0x20000294
 80016a0:	2000030c 	.word	0x2000030c
 80016a4:	20000258 	.word	0x20000258
 80016a8:	20000024 	.word	0x20000024
 80016ac:	20000310 	.word	0x20000310
 80016b0:	0800cce8 	.word	0x0800cce8

080016b4 <SampleVolFilter>:
 * @retval  :vol  滤波后的电压
 * @func	:去掉�??大最小�?�取平均值，防止采样误差
 */

static uint16_t SampleVolFilter(uint32_t* buf,uint8_t len)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	70fb      	strb	r3, [r7, #3]
	uint32_t vol = 0,vol_sum = 0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
	uint32_t vol_temp = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	60bb      	str	r3, [r7, #8]
	uint8_t tag_i = 0,tag_j = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	74fb      	strb	r3, [r7, #19]
 80016d0:	2300      	movs	r3, #0
 80016d2:	74bb      	strb	r3, [r7, #18]

	for(tag_i = 0;tag_i < (len - 1);tag_i++)
 80016d4:	2300      	movs	r3, #0
 80016d6:	74fb      	strb	r3, [r7, #19]
 80016d8:	e034      	b.n	8001744 <SampleVolFilter+0x90>
	{
		for(tag_j = 0;tag_j < (len - tag_i - 1);tag_j++)
 80016da:	2300      	movs	r3, #0
 80016dc:	74bb      	strb	r3, [r7, #18]
 80016de:	e027      	b.n	8001730 <SampleVolFilter+0x7c>
		{
			if(buf[tag_j] > buf[tag_j+1])
 80016e0:	7cbb      	ldrb	r3, [r7, #18]
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	4413      	add	r3, r2
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	7cbb      	ldrb	r3, [r7, #18]
 80016ec:	3301      	adds	r3, #1
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	6879      	ldr	r1, [r7, #4]
 80016f2:	440b      	add	r3, r1
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d917      	bls.n	800172a <SampleVolFilter+0x76>
			{
				vol_temp = buf[tag_j];
 80016fa:	7cbb      	ldrb	r3, [r7, #18]
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	4413      	add	r3, r2
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	60bb      	str	r3, [r7, #8]
				buf[tag_j] = buf[tag_j+1];
 8001706:	7cbb      	ldrb	r3, [r7, #18]
 8001708:	3301      	adds	r3, #1
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	441a      	add	r2, r3
 8001710:	7cbb      	ldrb	r3, [r7, #18]
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	6879      	ldr	r1, [r7, #4]
 8001716:	440b      	add	r3, r1
 8001718:	6812      	ldr	r2, [r2, #0]
 800171a:	601a      	str	r2, [r3, #0]
				buf[tag_j+1] = vol_temp;
 800171c:	7cbb      	ldrb	r3, [r7, #18]
 800171e:	3301      	adds	r3, #1
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	4413      	add	r3, r2
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	601a      	str	r2, [r3, #0]
		for(tag_j = 0;tag_j < (len - tag_i - 1);tag_j++)
 800172a:	7cbb      	ldrb	r3, [r7, #18]
 800172c:	3301      	adds	r3, #1
 800172e:	74bb      	strb	r3, [r7, #18]
 8001730:	7cba      	ldrb	r2, [r7, #18]
 8001732:	78f9      	ldrb	r1, [r7, #3]
 8001734:	7cfb      	ldrb	r3, [r7, #19]
 8001736:	1acb      	subs	r3, r1, r3
 8001738:	3b01      	subs	r3, #1
 800173a:	429a      	cmp	r2, r3
 800173c:	dbd0      	blt.n	80016e0 <SampleVolFilter+0x2c>
	for(tag_i = 0;tag_i < (len - 1);tag_i++)
 800173e:	7cfb      	ldrb	r3, [r7, #19]
 8001740:	3301      	adds	r3, #1
 8001742:	74fb      	strb	r3, [r7, #19]
 8001744:	7cfa      	ldrb	r2, [r7, #19]
 8001746:	78fb      	ldrb	r3, [r7, #3]
 8001748:	3b01      	subs	r3, #1
 800174a:	429a      	cmp	r2, r3
 800174c:	dbc5      	blt.n	80016da <SampleVolFilter+0x26>
			}
		}
	}

	for(tag_i = 0;tag_i < len-2;tag_i++)
 800174e:	2300      	movs	r3, #0
 8001750:	74fb      	strb	r3, [r7, #19]
 8001752:	e00b      	b.n	800176c <SampleVolFilter+0xb8>
	{
		vol_sum += buf[tag_i+1];
 8001754:	7cfb      	ldrb	r3, [r7, #19]
 8001756:	3301      	adds	r3, #1
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	4413      	add	r3, r2
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	4413      	add	r3, r2
 8001764:	617b      	str	r3, [r7, #20]
	for(tag_i = 0;tag_i < len-2;tag_i++)
 8001766:	7cfb      	ldrb	r3, [r7, #19]
 8001768:	3301      	adds	r3, #1
 800176a:	74fb      	strb	r3, [r7, #19]
 800176c:	7cfa      	ldrb	r2, [r7, #19]
 800176e:	78fb      	ldrb	r3, [r7, #3]
 8001770:	3b02      	subs	r3, #2
 8001772:	429a      	cmp	r2, r3
 8001774:	dbee      	blt.n	8001754 <SampleVolFilter+0xa0>
	}
	vol = (uint16_t)(vol_sum/(len-2));
 8001776:	78fb      	ldrb	r3, [r7, #3]
 8001778:	3b02      	subs	r3, #2
 800177a:	461a      	mov	r2, r3
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001782:	b29b      	uxth	r3, r3
 8001784:	60fb      	str	r3, [r7, #12]

	return vol;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	b29b      	uxth	r3, r3
}
 800178a:	4618      	mov	r0, r3
 800178c:	371c      	adds	r7, #28
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr

08001794 <Battery_LevelReceive>:
 * @param   none
 * @retval  none
 * @func	将接收到的电量转为等级
 */
void Battery_LevelReceive(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
	static uint8_t	battery_voltage_data = 0xff;

	//判断4次接收到的电量值是否相等，避免采样误差
	if((BatteryLevelBuf[0] == BatteryLevelBuf[1]) &&
 8001798:	4b51      	ldr	r3, [pc, #324]	@ (80018e0 <Battery_LevelReceive+0x14c>)
 800179a:	781a      	ldrb	r2, [r3, #0]
 800179c:	4b50      	ldr	r3, [pc, #320]	@ (80018e0 <Battery_LevelReceive+0x14c>)
 800179e:	785b      	ldrb	r3, [r3, #1]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	f040 8099 	bne.w	80018d8 <Battery_LevelReceive+0x144>
	   (BatteryLevelBuf[1] == BatteryLevelBuf[2]) &&
 80017a6:	4b4e      	ldr	r3, [pc, #312]	@ (80018e0 <Battery_LevelReceive+0x14c>)
 80017a8:	785a      	ldrb	r2, [r3, #1]
 80017aa:	4b4d      	ldr	r3, [pc, #308]	@ (80018e0 <Battery_LevelReceive+0x14c>)
 80017ac:	789b      	ldrb	r3, [r3, #2]
	if((BatteryLevelBuf[0] == BatteryLevelBuf[1]) &&
 80017ae:	429a      	cmp	r2, r3
 80017b0:	f040 8092 	bne.w	80018d8 <Battery_LevelReceive+0x144>
	   (BatteryLevelBuf[2] == BatteryLevelBuf[3]))
 80017b4:	4b4a      	ldr	r3, [pc, #296]	@ (80018e0 <Battery_LevelReceive+0x14c>)
 80017b6:	789a      	ldrb	r2, [r3, #2]
 80017b8:	4b49      	ldr	r3, [pc, #292]	@ (80018e0 <Battery_LevelReceive+0x14c>)
 80017ba:	78db      	ldrb	r3, [r3, #3]
	   (BatteryLevelBuf[1] == BatteryLevelBuf[2]) &&
 80017bc:	429a      	cmp	r2, r3
 80017be:	f040 808b 	bne.w	80018d8 <Battery_LevelReceive+0x144>
	{
		if((BatteryLevelBuf[0] == 0x80) || (BatteryLevelBuf[0] == 0x84))   //判断充放电状态是顺便判断电流，防止误判
 80017c2:	4b47      	ldr	r3, [pc, #284]	@ (80018e0 <Battery_LevelReceive+0x14c>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b80      	cmp	r3, #128	@ 0x80
 80017c8:	d003      	beq.n	80017d2 <Battery_LevelReceive+0x3e>
 80017ca:	4b45      	ldr	r3, [pc, #276]	@ (80018e0 <Battery_LevelReceive+0x14c>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b84      	cmp	r3, #132	@ 0x84
 80017d0:	d103      	bne.n	80017da <Battery_LevelReceive+0x46>
		{
			battery_voltage_data = 0xAA;
 80017d2:	4b44      	ldr	r3, [pc, #272]	@ (80018e4 <Battery_LevelReceive+0x150>)
 80017d4:	22aa      	movs	r2, #170	@ 0xaa
 80017d6:	701a      	strb	r2, [r3, #0]
 80017d8:	e02a      	b.n	8001830 <Battery_LevelReceive+0x9c>
		}else
		{
			if(((BatteryLevelBuf[0] & 0x02) == 0) && ((BatteryLevelBuf[0] & 0x80) == 0x80))    //第二位为0的时候为放电
 80017da:	4b41      	ldr	r3, [pc, #260]	@ (80018e0 <Battery_LevelReceive+0x14c>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d117      	bne.n	8001816 <Battery_LevelReceive+0x82>
 80017e6:	4b3e      	ldr	r3, [pc, #248]	@ (80018e0 <Battery_LevelReceive+0x14c>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	b25b      	sxtb	r3, r3
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	da12      	bge.n	8001816 <Battery_LevelReceive+0x82>
			{

				battery_voltage_data = BatteryLevelBuf[0] & 0xf0;							   //放电
 80017f0:	4b3b      	ldr	r3, [pc, #236]	@ (80018e0 <Battery_LevelReceive+0x14c>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	f023 030f 	bic.w	r3, r3, #15
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	4b3a      	ldr	r3, [pc, #232]	@ (80018e4 <Battery_LevelReceive+0x150>)
 80017fc:	701a      	strb	r2, [r3, #0]
				if((BatteryLevelBuf[0] < 0x98) && (Ultrasound_state != WORK_STATE))
 80017fe:	4b38      	ldr	r3, [pc, #224]	@ (80018e0 <Battery_LevelReceive+0x14c>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b97      	cmp	r3, #151	@ 0x97
 8001804:	d813      	bhi.n	800182e <Battery_LevelReceive+0x9a>
 8001806:	4b38      	ldr	r3, [pc, #224]	@ (80018e8 <Battery_LevelReceive+0x154>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b04      	cmp	r3, #4
 800180c:	d00f      	beq.n	800182e <Battery_LevelReceive+0x9a>
				{
					Low_Battery_Flg = 1;
 800180e:	4b37      	ldr	r3, [pc, #220]	@ (80018ec <Battery_LevelReceive+0x158>)
 8001810:	2201      	movs	r2, #1
 8001812:	701a      	strb	r2, [r3, #0]
				if((BatteryLevelBuf[0] < 0x98) && (Ultrasound_state != WORK_STATE))
 8001814:	e00b      	b.n	800182e <Battery_LevelReceive+0x9a>
				}
			}else if(BatteryLevelBuf[0] != 0xFF)
 8001816:	4b32      	ldr	r3, [pc, #200]	@ (80018e0 <Battery_LevelReceive+0x14c>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2bff      	cmp	r3, #255	@ 0xff
 800181c:	d008      	beq.n	8001830 <Battery_LevelReceive+0x9c>
			{
				battery_voltage_data = BatteryLevelBuf[0] & 0x70;
 800181e:	4b30      	ldr	r3, [pc, #192]	@ (80018e0 <Battery_LevelReceive+0x14c>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001826:	b2da      	uxtb	r2, r3
 8001828:	4b2e      	ldr	r3, [pc, #184]	@ (80018e4 <Battery_LevelReceive+0x150>)
 800182a:	701a      	strb	r2, [r3, #0]
 800182c:	e000      	b.n	8001830 <Battery_LevelReceive+0x9c>
				if((BatteryLevelBuf[0] < 0x98) && (Ultrasound_state != WORK_STATE))
 800182e:	bf00      	nop

			}
		}


		switch(battery_voltage_data)
 8001830:	4b2c      	ldr	r3, [pc, #176]	@ (80018e4 <Battery_LevelReceive+0x150>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2bb0      	cmp	r3, #176	@ 0xb0
 8001836:	d046      	beq.n	80018c6 <Battery_LevelReceive+0x132>
 8001838:	2bb0      	cmp	r3, #176	@ 0xb0
 800183a:	dc48      	bgt.n	80018ce <Battery_LevelReceive+0x13a>
 800183c:	2baa      	cmp	r3, #170	@ 0xaa
 800183e:	d032      	beq.n	80018a6 <Battery_LevelReceive+0x112>
 8001840:	2baa      	cmp	r3, #170	@ 0xaa
 8001842:	dc44      	bgt.n	80018ce <Battery_LevelReceive+0x13a>
 8001844:	2ba0      	cmp	r3, #160	@ 0xa0
 8001846:	d03a      	beq.n	80018be <Battery_LevelReceive+0x12a>
 8001848:	2ba0      	cmp	r3, #160	@ 0xa0
 800184a:	dc40      	bgt.n	80018ce <Battery_LevelReceive+0x13a>
 800184c:	2b90      	cmp	r3, #144	@ 0x90
 800184e:	d032      	beq.n	80018b6 <Battery_LevelReceive+0x122>
 8001850:	2b90      	cmp	r3, #144	@ 0x90
 8001852:	dc3c      	bgt.n	80018ce <Battery_LevelReceive+0x13a>
 8001854:	2b80      	cmp	r3, #128	@ 0x80
 8001856:	d02a      	beq.n	80018ae <Battery_LevelReceive+0x11a>
 8001858:	2b80      	cmp	r3, #128	@ 0x80
 800185a:	dc38      	bgt.n	80018ce <Battery_LevelReceive+0x13a>
 800185c:	2b70      	cmp	r3, #112	@ 0x70
 800185e:	d01e      	beq.n	800189e <Battery_LevelReceive+0x10a>
 8001860:	2b70      	cmp	r3, #112	@ 0x70
 8001862:	dc34      	bgt.n	80018ce <Battery_LevelReceive+0x13a>
 8001864:	2b30      	cmp	r3, #48	@ 0x30
 8001866:	d016      	beq.n	8001896 <Battery_LevelReceive+0x102>
 8001868:	2b30      	cmp	r3, #48	@ 0x30
 800186a:	dc30      	bgt.n	80018ce <Battery_LevelReceive+0x13a>
 800186c:	2b20      	cmp	r3, #32
 800186e:	d00e      	beq.n	800188e <Battery_LevelReceive+0xfa>
 8001870:	2b20      	cmp	r3, #32
 8001872:	dc2c      	bgt.n	80018ce <Battery_LevelReceive+0x13a>
 8001874:	2b00      	cmp	r3, #0
 8001876:	d002      	beq.n	800187e <Battery_LevelReceive+0xea>
 8001878:	2b10      	cmp	r3, #16
 800187a:	d004      	beq.n	8001886 <Battery_LevelReceive+0xf2>

					battery_level_state =  boost_battery_level5;

						break;
			default :
						break;
 800187c:	e027      	b.n	80018ce <Battery_LevelReceive+0x13a>
					battery_level_state =  charge_battery_level1;
 800187e:	4b1c      	ldr	r3, [pc, #112]	@ (80018f0 <Battery_LevelReceive+0x15c>)
 8001880:	2201      	movs	r2, #1
 8001882:	701a      	strb	r2, [r3, #0]
						break;
 8001884:	e024      	b.n	80018d0 <Battery_LevelReceive+0x13c>
					battery_level_state =  charge_battery_level2;
 8001886:	4b1a      	ldr	r3, [pc, #104]	@ (80018f0 <Battery_LevelReceive+0x15c>)
 8001888:	2202      	movs	r2, #2
 800188a:	701a      	strb	r2, [r3, #0]
						break;
 800188c:	e020      	b.n	80018d0 <Battery_LevelReceive+0x13c>
					battery_level_state =  charge_battery_level3;
 800188e:	4b18      	ldr	r3, [pc, #96]	@ (80018f0 <Battery_LevelReceive+0x15c>)
 8001890:	2203      	movs	r2, #3
 8001892:	701a      	strb	r2, [r3, #0]
						break;
 8001894:	e01c      	b.n	80018d0 <Battery_LevelReceive+0x13c>
					battery_level_state =  charge_battery_level4;
 8001896:	4b16      	ldr	r3, [pc, #88]	@ (80018f0 <Battery_LevelReceive+0x15c>)
 8001898:	2204      	movs	r2, #4
 800189a:	701a      	strb	r2, [r3, #0]
						break;
 800189c:	e018      	b.n	80018d0 <Battery_LevelReceive+0x13c>
					battery_level_state =  charge_battery_level5;
 800189e:	4b14      	ldr	r3, [pc, #80]	@ (80018f0 <Battery_LevelReceive+0x15c>)
 80018a0:	2205      	movs	r2, #5
 80018a2:	701a      	strb	r2, [r3, #0]
						break;
 80018a4:	e014      	b.n	80018d0 <Battery_LevelReceive+0x13c>
					battery_level_state =  boost_battery_level1;
 80018a6:	4b12      	ldr	r3, [pc, #72]	@ (80018f0 <Battery_LevelReceive+0x15c>)
 80018a8:	2206      	movs	r2, #6
 80018aa:	701a      	strb	r2, [r3, #0]
						break;
 80018ac:	e010      	b.n	80018d0 <Battery_LevelReceive+0x13c>
					battery_level_state =  boost_battery_level2;
 80018ae:	4b10      	ldr	r3, [pc, #64]	@ (80018f0 <Battery_LevelReceive+0x15c>)
 80018b0:	2207      	movs	r2, #7
 80018b2:	701a      	strb	r2, [r3, #0]
						break;
 80018b4:	e00c      	b.n	80018d0 <Battery_LevelReceive+0x13c>
					battery_level_state =  boost_battery_level3;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	@ (80018f0 <Battery_LevelReceive+0x15c>)
 80018b8:	2208      	movs	r2, #8
 80018ba:	701a      	strb	r2, [r3, #0]
						break;
 80018bc:	e008      	b.n	80018d0 <Battery_LevelReceive+0x13c>
					battery_level_state =  boost_battery_level4;
 80018be:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <Battery_LevelReceive+0x15c>)
 80018c0:	2209      	movs	r2, #9
 80018c2:	701a      	strb	r2, [r3, #0]
						break;
 80018c4:	e004      	b.n	80018d0 <Battery_LevelReceive+0x13c>
					battery_level_state =  boost_battery_level5;
 80018c6:	4b0a      	ldr	r3, [pc, #40]	@ (80018f0 <Battery_LevelReceive+0x15c>)
 80018c8:	220a      	movs	r2, #10
 80018ca:	701a      	strb	r2, [r3, #0]
						break;
 80018cc:	e000      	b.n	80018d0 <Battery_LevelReceive+0x13c>
						break;
 80018ce:	bf00      	nop

		}
		send_battery_state_data = battery_level_state;
 80018d0:	4b07      	ldr	r3, [pc, #28]	@ (80018f0 <Battery_LevelReceive+0x15c>)
 80018d2:	781a      	ldrb	r2, [r3, #0]
 80018d4:	4b07      	ldr	r3, [pc, #28]	@ (80018f4 <Battery_LevelReceive+0x160>)
 80018d6:	701a      	strb	r2, [r3, #0]
	}
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr
 80018e0:	200007c8 	.word	0x200007c8
 80018e4:	2000003a 	.word	0x2000003a
 80018e8:	20000316 	.word	0x20000316
 80018ec:	20000355 	.word	0x20000355
 80018f0:	20000026 	.word	0x20000026
 80018f4:	20000027 	.word	0x20000027

080018f8 <Battery_LevelSend>:
 * @param   none
 * @retval  none
 * @func	向屏幕发送电池电量信息
 */
void Battery_LevelSend(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
	static uint8_t ChCount = 0;
	static uint8_t DisChCount = 0;

	//充电显示400ms为周期发送
	//放电显示200ms为周期发送
	if(send_battery_state_data < boost_battery_level1)
 80018fc:	4b46      	ldr	r3, [pc, #280]	@ (8001a18 <Battery_LevelSend+0x120>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b05      	cmp	r3, #5
 8001902:	d83b      	bhi.n	800197c <Battery_LevelSend+0x84>
	{
		if(ChCount > 19)
 8001904:	4b45      	ldr	r3, [pc, #276]	@ (8001a1c <Battery_LevelSend+0x124>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b13      	cmp	r3, #19
 800190a:	d902      	bls.n	8001912 <Battery_LevelSend+0x1a>
		{
			ChCount = 0;
 800190c:	4b43      	ldr	r3, [pc, #268]	@ (8001a1c <Battery_LevelSend+0x124>)
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]
		}
		if(ChCount == 0)
 8001912:	4b42      	ldr	r3, [pc, #264]	@ (8001a1c <Battery_LevelSend+0x124>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d126      	bne.n	8001968 <Battery_LevelSend+0x70>
		{
			//充电循环动画，
			if((chact < boost_battery_level1) && (chact >= send_battery_state_data))
 800191a:	4b41      	ldr	r3, [pc, #260]	@ (8001a20 <Battery_LevelSend+0x128>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b05      	cmp	r3, #5
 8001920:	d81a      	bhi.n	8001958 <Battery_LevelSend+0x60>
 8001922:	4b3f      	ldr	r3, [pc, #252]	@ (8001a20 <Battery_LevelSend+0x128>)
 8001924:	781a      	ldrb	r2, [r3, #0]
 8001926:	4b3c      	ldr	r3, [pc, #240]	@ (8001a18 <Battery_LevelSend+0x120>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	429a      	cmp	r2, r3
 800192c:	d314      	bcc.n	8001958 <Battery_LevelSend+0x60>
			{
#ifdef CHARGE_WORK
				battery_txbuffer[2] = 0X12;
 800192e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a24 <Battery_LevelSend+0x12c>)
 8001930:	2212      	movs	r2, #18
 8001932:	709a      	strb	r2, [r3, #2]
#else
				battery_txbuffer[2] = 0X11;
#endif
				battery_txbuffer[6] = chact;
 8001934:	4b3a      	ldr	r3, [pc, #232]	@ (8001a20 <Battery_LevelSend+0x128>)
 8001936:	781a      	ldrb	r2, [r3, #0]
 8001938:	4b3a      	ldr	r3, [pc, #232]	@ (8001a24 <Battery_LevelSend+0x12c>)
 800193a:	719a      	strb	r2, [r3, #6]
				DMA_USART3_Tx_Data(battery_txbuffer, 14);
 800193c:	210e      	movs	r1, #14
 800193e:	4839      	ldr	r0, [pc, #228]	@ (8001a24 <Battery_LevelSend+0x12c>)
 8001940:	f001 fe28 	bl	8003594 <DMA_USART3_Tx_Data>
				chact++;
 8001944:	4b36      	ldr	r3, [pc, #216]	@ (8001a20 <Battery_LevelSend+0x128>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	3301      	adds	r3, #1
 800194a:	b2da      	uxtb	r2, r3
 800194c:	4b34      	ldr	r3, [pc, #208]	@ (8001a20 <Battery_LevelSend+0x128>)
 800194e:	701a      	strb	r2, [r3, #0]
				FinRes = Bat_Charge;
 8001950:	4b35      	ldr	r3, [pc, #212]	@ (8001a28 <Battery_LevelSend+0x130>)
 8001952:	2202      	movs	r2, #2
 8001954:	701a      	strb	r2, [r3, #0]
 8001956:	e007      	b.n	8001968 <Battery_LevelSend+0x70>
			}else
			{
				chact = send_battery_state_data;
 8001958:	4b2f      	ldr	r3, [pc, #188]	@ (8001a18 <Battery_LevelSend+0x120>)
 800195a:	781a      	ldrb	r2, [r3, #0]
 800195c:	4b30      	ldr	r3, [pc, #192]	@ (8001a20 <Battery_LevelSend+0x128>)
 800195e:	701a      	strb	r2, [r3, #0]
				send_battery_state_data_old = send_battery_state_data;
 8001960:	4b2d      	ldr	r3, [pc, #180]	@ (8001a18 <Battery_LevelSend+0x120>)
 8001962:	781a      	ldrb	r2, [r3, #0]
 8001964:	4b31      	ldr	r3, [pc, #196]	@ (8001a2c <Battery_LevelSend+0x134>)
 8001966:	701a      	strb	r2, [r3, #0]
			}
		}
		DisChCount = 0;
 8001968:	4b31      	ldr	r3, [pc, #196]	@ (8001a30 <Battery_LevelSend+0x138>)
 800196a:	2200      	movs	r2, #0
 800196c:	701a      	strb	r2, [r3, #0]
		ChCount++;
 800196e:	4b2b      	ldr	r3, [pc, #172]	@ (8001a1c <Battery_LevelSend+0x124>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	3301      	adds	r3, #1
 8001974:	b2da      	uxtb	r2, r3
 8001976:	4b29      	ldr	r3, [pc, #164]	@ (8001a1c <Battery_LevelSend+0x124>)
 8001978:	701a      	strb	r2, [r3, #0]
			DMA_USART3_Tx_Data(battery_txbuffer, 14);
		}
		DisChCount++;
		ChCount = 1;
	}
}
 800197a:	e04b      	b.n	8001a14 <Battery_LevelSend+0x11c>
		if(DisChCount > 9)
 800197c:	4b2c      	ldr	r3, [pc, #176]	@ (8001a30 <Battery_LevelSend+0x138>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b09      	cmp	r3, #9
 8001982:	d902      	bls.n	800198a <Battery_LevelSend+0x92>
			DisChCount = 0;
 8001984:	4b2a      	ldr	r3, [pc, #168]	@ (8001a30 <Battery_LevelSend+0x138>)
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
		if(DisChCount == 0)
 800198a:	4b29      	ldr	r3, [pc, #164]	@ (8001a30 <Battery_LevelSend+0x138>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d137      	bne.n	8001a02 <Battery_LevelSend+0x10a>
			battery_txbuffer[2] = 0X12;
 8001992:	4b24      	ldr	r3, [pc, #144]	@ (8001a24 <Battery_LevelSend+0x12c>)
 8001994:	2212      	movs	r2, #18
 8001996:	709a      	strb	r2, [r3, #2]
			if(CompleteFlg == 1)
 8001998:	4b26      	ldr	r3, [pc, #152]	@ (8001a34 <Battery_LevelSend+0x13c>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d11b      	bne.n	80019d8 <Battery_LevelSend+0xe0>
				if((send_battery_state_data > send_battery_state_data_old) && (send_battery_state_data_old > charge_battery_level5))
 80019a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a18 <Battery_LevelSend+0x120>)
 80019a2:	781a      	ldrb	r2, [r3, #0]
 80019a4:	4b21      	ldr	r3, [pc, #132]	@ (8001a2c <Battery_LevelSend+0x134>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d90a      	bls.n	80019c2 <Battery_LevelSend+0xca>
 80019ac:	4b1f      	ldr	r3, [pc, #124]	@ (8001a2c <Battery_LevelSend+0x134>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b05      	cmp	r3, #5
 80019b2:	d906      	bls.n	80019c2 <Battery_LevelSend+0xca>
					battery_txbuffer[6] = send_battery_state_data_old - 5;
 80019b4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a2c <Battery_LevelSend+0x134>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	3b05      	subs	r3, #5
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	4b19      	ldr	r3, [pc, #100]	@ (8001a24 <Battery_LevelSend+0x12c>)
 80019be:	719a      	strb	r2, [r3, #6]
 80019c0:	e010      	b.n	80019e4 <Battery_LevelSend+0xec>
					send_battery_state_data_old = send_battery_state_data;
 80019c2:	4b15      	ldr	r3, [pc, #84]	@ (8001a18 <Battery_LevelSend+0x120>)
 80019c4:	781a      	ldrb	r2, [r3, #0]
 80019c6:	4b19      	ldr	r3, [pc, #100]	@ (8001a2c <Battery_LevelSend+0x134>)
 80019c8:	701a      	strb	r2, [r3, #0]
					battery_txbuffer[6] = send_battery_state_data_old - 5;
 80019ca:	4b18      	ldr	r3, [pc, #96]	@ (8001a2c <Battery_LevelSend+0x134>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	3b05      	subs	r3, #5
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	4b14      	ldr	r3, [pc, #80]	@ (8001a24 <Battery_LevelSend+0x12c>)
 80019d4:	719a      	strb	r2, [r3, #6]
 80019d6:	e005      	b.n	80019e4 <Battery_LevelSend+0xec>
				battery_txbuffer[6] = send_battery_state_data - 5;
 80019d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a18 <Battery_LevelSend+0x120>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	3b05      	subs	r3, #5
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	4b10      	ldr	r3, [pc, #64]	@ (8001a24 <Battery_LevelSend+0x12c>)
 80019e2:	719a      	strb	r2, [r3, #6]
			if((Low_Battery_Flg == 1) && (Ultrasound_state != WORK_STATE))
 80019e4:	4b14      	ldr	r3, [pc, #80]	@ (8001a38 <Battery_LevelSend+0x140>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d106      	bne.n	80019fa <Battery_LevelSend+0x102>
 80019ec:	4b13      	ldr	r3, [pc, #76]	@ (8001a3c <Battery_LevelSend+0x144>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b04      	cmp	r3, #4
 80019f2:	d002      	beq.n	80019fa <Battery_LevelSend+0x102>
				battery_txbuffer[6] = 6;
 80019f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001a24 <Battery_LevelSend+0x12c>)
 80019f6:	2206      	movs	r2, #6
 80019f8:	719a      	strb	r2, [r3, #6]
			DMA_USART3_Tx_Data(battery_txbuffer, 14);
 80019fa:	210e      	movs	r1, #14
 80019fc:	4809      	ldr	r0, [pc, #36]	@ (8001a24 <Battery_LevelSend+0x12c>)
 80019fe:	f001 fdc9 	bl	8003594 <DMA_USART3_Tx_Data>
		DisChCount++;
 8001a02:	4b0b      	ldr	r3, [pc, #44]	@ (8001a30 <Battery_LevelSend+0x138>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	3301      	adds	r3, #1
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	4b09      	ldr	r3, [pc, #36]	@ (8001a30 <Battery_LevelSend+0x138>)
 8001a0c:	701a      	strb	r2, [r3, #0]
		ChCount = 1;
 8001a0e:	4b03      	ldr	r3, [pc, #12]	@ (8001a1c <Battery_LevelSend+0x124>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	701a      	strb	r2, [r3, #0]
}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20000027 	.word	0x20000027
 8001a1c:	20000314 	.word	0x20000314
 8001a20:	2000003b 	.word	0x2000003b
 8001a24:	2000002c 	.word	0x2000002c
 8001a28:	2000033c 	.word	0x2000033c
 8001a2c:	20000028 	.word	0x20000028
 8001a30:	20000315 	.word	0x20000315
 8001a34:	200007e8 	.word	0x200007e8
 8001a38:	20000355 	.word	0x20000355
 8001a3c:	20000316 	.word	0x20000316

08001a40 <System_Init>:
 * @param   none
 * @retval  none
 * @func	系统初始化
 */
void System_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af04      	add	r7, sp, #16
	uint8_t Tx_Frequency_Paramete;
	uint8_t TX_Vibration_Paramete;

	HAL_Delay(200);
 8001a46:	20c8      	movs	r0, #200	@ 0xc8
 8001a48:	f002 faec 	bl	8004024 <HAL_Delay>
	Mcu_GpioInit();
 8001a4c:	f001 fc16 	bl	800327c <Mcu_GpioInit>
	AD9833_InitIo(AD9877_Ch_A);
 8001a50:	2000      	movs	r0, #0
 8001a52:	f7ff fc81 	bl	8001358 <AD9833_InitIo>
	AD9833_InitIo(AD9877_Ch_B);
 8001a56:	2001      	movs	r0, #1
 8001a58:	f7ff fc7e 	bl	8001358 <AD9833_InitIo>

	STMFLASH_Read(FLASH_SLAVE_ADJUST,(uint16_t*)&FreqAdjustParam,2);
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	49a4      	ldr	r1, [pc, #656]	@ (8001cf0 <System_Init+0x2b0>)
 8001a60:	48a4      	ldr	r0, [pc, #656]	@ (8001cf4 <System_Init+0x2b4>)
 8001a62:	f000 ffdb 	bl	8002a1c <STMFLASH_Read>
	STMFLASH_Read(FLASH_SLAVE_LOWFLG,(uint16_t*)&Low_Battery_Flg,1);
 8001a66:	2201      	movs	r2, #1
 8001a68:	49a3      	ldr	r1, [pc, #652]	@ (8001cf8 <System_Init+0x2b8>)
 8001a6a:	48a4      	ldr	r0, [pc, #656]	@ (8001cfc <System_Init+0x2bc>)
 8001a6c:	f000 ffd6 	bl	8002a1c <STMFLASH_Read>
	STMFLASH_Read(FLASH_SLAVE_LOCKFLG ,(uint16_t*)&LockOn_ParamFlg,1);
 8001a70:	2201      	movs	r2, #1
 8001a72:	49a3      	ldr	r1, [pc, #652]	@ (8001d00 <System_Init+0x2c0>)
 8001a74:	48a3      	ldr	r0, [pc, #652]	@ (8001d04 <System_Init+0x2c4>)
 8001a76:	f000 ffd1 	bl	8002a1c <STMFLASH_Read>
	STMFLASH_Read(FLASH_SLAVE_WORKCOUNT,(uint16_t*)(&WorkCount),1);
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	49a2      	ldr	r1, [pc, #648]	@ (8001d08 <System_Init+0x2c8>)
 8001a7e:	48a3      	ldr	r0, [pc, #652]	@ (8001d0c <System_Init+0x2cc>)
 8001a80:	f000 ffcc 	bl	8002a1c <STMFLASH_Read>
	STMFLASH_Read(FLASH_SLAVE_SHUNTDOWM ,(uint16_t*)&PowerFlg,1);
 8001a84:	2201      	movs	r2, #1
 8001a86:	49a2      	ldr	r1, [pc, #648]	@ (8001d10 <System_Init+0x2d0>)
 8001a88:	48a2      	ldr	r0, [pc, #648]	@ (8001d14 <System_Init+0x2d4>)
 8001a8a:	f000 ffc7 	bl	8002a1c <STMFLASH_Read>

	if(FreqAdjustParam[0] == 0xFFFF)
 8001a8e:	4b98      	ldr	r3, [pc, #608]	@ (8001cf0 <System_Init+0x2b0>)
 8001a90:	881b      	ldrh	r3, [r3, #0]
 8001a92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d103      	bne.n	8001aa2 <System_Init+0x62>
	{
		duty_cycle_count = 101;
 8001a9a:	4b9f      	ldr	r3, [pc, #636]	@ (8001d18 <System_Init+0x2d8>)
 8001a9c:	2265      	movs	r2, #101	@ 0x65
 8001a9e:	701a      	strb	r2, [r3, #0]
 8001aa0:	e004      	b.n	8001aac <System_Init+0x6c>
	}else
	{
		duty_cycle_count = (uint8_t)FreqAdjustParam[0];
 8001aa2:	4b93      	ldr	r3, [pc, #588]	@ (8001cf0 <System_Init+0x2b0>)
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	4b9b      	ldr	r3, [pc, #620]	@ (8001d18 <System_Init+0x2d8>)
 8001aaa:	701a      	strb	r2, [r3, #0]
	}

	if(FreqAdjustParam[1] == 0xFFFF)
 8001aac:	4b90      	ldr	r3, [pc, #576]	@ (8001cf0 <System_Init+0x2b0>)
 8001aae:	885b      	ldrh	r3, [r3, #2]
 8001ab0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d104      	bne.n	8001ac2 <System_Init+0x82>
	{
		duty_tim = 5000;
 8001ab8:	4b98      	ldr	r3, [pc, #608]	@ (8001d1c <System_Init+0x2dc>)
 8001aba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001abe:	801a      	strh	r2, [r3, #0]
 8001ac0:	e003      	b.n	8001aca <System_Init+0x8a>
	}else
	{
		duty_tim = FreqAdjustParam[1];
 8001ac2:	4b8b      	ldr	r3, [pc, #556]	@ (8001cf0 <System_Init+0x2b0>)
 8001ac4:	885a      	ldrh	r2, [r3, #2]
 8001ac6:	4b95      	ldr	r3, [pc, #596]	@ (8001d1c <System_Init+0x2dc>)
 8001ac8:	801a      	strh	r2, [r3, #0]
	}

	SetPWMDutyCycleAndFrequency(duty_tim);
 8001aca:	4b94      	ldr	r3, [pc, #592]	@ (8001d1c <System_Init+0x2dc>)
 8001acc:	881b      	ldrh	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 fe1c 	bl	800270c <SetPWMDutyCycleAndFrequency>

	if(WorkCount == 0xFFFF)
 8001ad4:	4b8c      	ldr	r3, [pc, #560]	@ (8001d08 <System_Init+0x2c8>)
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d102      	bne.n	8001ae6 <System_Init+0xa6>
	{
		WorkCount = 0;
 8001ae0:	4b89      	ldr	r3, [pc, #548]	@ (8001d08 <System_Init+0x2c8>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	801a      	strh	r2, [r3, #0]
	}else
	{
	}

	if(PowerFlg == 0x01)
 8001ae6:	4b8a      	ldr	r3, [pc, #552]	@ (8001d10 <System_Init+0x2d0>)
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d103      	bne.n	8001af6 <System_Init+0xb6>
	{
		Ultrasound_state = CLOSE_STATE;
 8001aee:	4b8c      	ldr	r3, [pc, #560]	@ (8001d20 <System_Init+0x2e0>)
 8001af0:	2205      	movs	r2, #5
 8001af2:	701a      	strb	r2, [r3, #0]
 8001af4:	e008      	b.n	8001b08 <System_Init+0xc8>
	}else if(PowerFlg == 0xFFFF)
 8001af6:	4b86      	ldr	r3, [pc, #536]	@ (8001d10 <System_Init+0x2d0>)
 8001af8:	881b      	ldrh	r3, [r3, #0]
 8001afa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d102      	bne.n	8001b08 <System_Init+0xc8>
	{
		PowerFlg = 0;
 8001b02:	4b83      	ldr	r3, [pc, #524]	@ (8001d10 <System_Init+0x2d0>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	801a      	strh	r2, [r3, #0]
	}else
	{
	}

	STMFLASH_Read(FLASH_SLAVE_CHANGEFLG,(uint16_t*)(Change_Paramete_Flg),3);
 8001b08:	2203      	movs	r2, #3
 8001b0a:	4986      	ldr	r1, [pc, #536]	@ (8001d24 <System_Init+0x2e4>)
 8001b0c:	4886      	ldr	r0, [pc, #536]	@ (8001d28 <System_Init+0x2e8>)
 8001b0e:	f000 ff85 	bl	8002a1c <STMFLASH_Read>
	if((Change_Paramete_Flg[0] == 0xdddd)&&(Change_Paramete_Flg[1] == 0xeeee)&&(Change_Paramete_Flg[2] == 0xffff))
 8001b12:	4b84      	ldr	r3, [pc, #528]	@ (8001d24 <System_Init+0x2e4>)
 8001b14:	881b      	ldrh	r3, [r3, #0]
 8001b16:	f64d 52dd 	movw	r2, #56797	@ 0xdddd
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d173      	bne.n	8001c06 <System_Init+0x1c6>
 8001b1e:	4b81      	ldr	r3, [pc, #516]	@ (8001d24 <System_Init+0x2e4>)
 8001b20:	885b      	ldrh	r3, [r3, #2]
 8001b22:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d16d      	bne.n	8001c06 <System_Init+0x1c6>
 8001b2a:	4b7e      	ldr	r3, [pc, #504]	@ (8001d24 <System_Init+0x2e4>)
 8001b2c:	889b      	ldrh	r3, [r3, #4]
 8001b2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d167      	bne.n	8001c06 <System_Init+0x1c6>
	{
		STMFLASH_Read(FLASH_SLAVE_ULTRAPARAM,(uint16_t*)(&Ultrasound_Parem_Read_Buff),3);
 8001b36:	2203      	movs	r2, #3
 8001b38:	497c      	ldr	r1, [pc, #496]	@ (8001d2c <System_Init+0x2ec>)
 8001b3a:	487d      	ldr	r0, [pc, #500]	@ (8001d30 <System_Init+0x2f0>)
 8001b3c:	f000 ff6e 	bl	8002a1c <STMFLASH_Read>

		Frequency_Parameter_A = (uint8_t)Ultrasound_Parem_Read_Buff[0];
 8001b40:	4b7a      	ldr	r3, [pc, #488]	@ (8001d2c <System_Init+0x2ec>)
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	4b7b      	ldr	r3, [pc, #492]	@ (8001d34 <System_Init+0x2f4>)
 8001b48:	701a      	strb	r2, [r3, #0]
		Frequency_Parameter_B = (uint8_t)Ultrasound_Parem_Read_Buff[1];
 8001b4a:	4b78      	ldr	r3, [pc, #480]	@ (8001d2c <System_Init+0x2ec>)
 8001b4c:	885b      	ldrh	r3, [r3, #2]
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	4b79      	ldr	r3, [pc, #484]	@ (8001d38 <System_Init+0x2f8>)
 8001b52:	701a      	strb	r2, [r3, #0]
		Vibration_Paramete = (uint8_t)Ultrasound_Parem_Read_Buff[2];
 8001b54:	4b75      	ldr	r3, [pc, #468]	@ (8001d2c <System_Init+0x2ec>)
 8001b56:	889b      	ldrh	r3, [r3, #4]
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	4b78      	ldr	r3, [pc, #480]	@ (8001d3c <System_Init+0x2fc>)
 8001b5c:	701a      	strb	r2, [r3, #0]
		/**硬件进行1/2的预分频 所以软件处理时要乘2**/
		u32_frequency_parameter = 2000*(Frequency_Parameter_A+ULTRA_BASE);
 8001b5e:	4b75      	ldr	r3, [pc, #468]	@ (8001d34 <System_Init+0x2f4>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	f203 2327 	addw	r3, r3, #551	@ 0x227
 8001b66:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001b6a:	fb02 f303 	mul.w	r3, r2, r3
 8001b6e:	461a      	mov	r2, r3
 8001b70:	4b73      	ldr	r3, [pc, #460]	@ (8001d40 <System_Init+0x300>)
 8001b72:	601a      	str	r2, [r3, #0]
		AD9833_SetPara(AD9877_Ch_A,AD9833_REG_FREQ0,u32_frequency_parameter,AD9833_REG_PHASE1,2048,AD9833_OUT_TRIANGLE);
 8001b74:	4b72      	ldr	r3, [pc, #456]	@ (8001d40 <System_Init+0x300>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe fc33 	bl	80003e4 <__aeabi_ui2d>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	2102      	movs	r1, #2
 8001b84:	9102      	str	r1, [sp, #8]
 8001b86:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b8a:	9101      	str	r1, [sp, #4]
 8001b8c:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001b90:	9100      	str	r1, [sp, #0]
 8001b92:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b96:	2000      	movs	r0, #0
 8001b98:	f7ff fbf6 	bl	8001388 <AD9833_SetPara>

		u32_frequency_parameter = 2000*(Frequency_Parameter_B+ULTRA_BASE);
 8001b9c:	4b66      	ldr	r3, [pc, #408]	@ (8001d38 <System_Init+0x2f8>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	f203 2327 	addw	r3, r3, #551	@ 0x227
 8001ba4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001ba8:	fb02 f303 	mul.w	r3, r2, r3
 8001bac:	461a      	mov	r2, r3
 8001bae:	4b64      	ldr	r3, [pc, #400]	@ (8001d40 <System_Init+0x300>)
 8001bb0:	601a      	str	r2, [r3, #0]
		AD9833_SetPara(AD9877_Ch_B,AD9833_REG_FREQ0,u32_frequency_parameter,AD9833_REG_PHASE1,2048,AD9833_OUT_TRIANGLE);
 8001bb2:	4b63      	ldr	r3, [pc, #396]	@ (8001d40 <System_Init+0x300>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7fe fc14 	bl	80003e4 <__aeabi_ui2d>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	2102      	movs	r1, #2
 8001bc2:	9102      	str	r1, [sp, #8]
 8001bc4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001bc8:	9101      	str	r1, [sp, #4]
 8001bca:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001bce:	9100      	str	r1, [sp, #0]
 8001bd0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	f7ff fbd7 	bl	8001388 <AD9833_SetPara>

		//电机驱动频率72000000/(72 * 4167) ≈ 240Hz  驱动电压 = 3.3 * 55 / 100
		u32_vibration_parameter = Vibration_Paramete * MOTOR_BASE;
 8001bda:	4b58      	ldr	r3, [pc, #352]	@ (8001d3c <System_Init+0x2fc>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	461a      	mov	r2, r3
 8001be0:	23d8      	movs	r3, #216	@ 0xd8
 8001be2:	fb02 f303 	mul.w	r3, r2, r3
 8001be6:	461a      	mov	r2, r3
 8001be8:	4b56      	ldr	r3, [pc, #344]	@ (8001d44 <System_Init+0x304>)
 8001bea:	601a      	str	r2, [r3, #0]

		Comd_funparameter_Frequency_txbuffer_A = Frequency_Parameter_A;
 8001bec:	4b51      	ldr	r3, [pc, #324]	@ (8001d34 <System_Init+0x2f4>)
 8001bee:	781a      	ldrb	r2, [r3, #0]
 8001bf0:	4b55      	ldr	r3, [pc, #340]	@ (8001d48 <System_Init+0x308>)
 8001bf2:	701a      	strb	r2, [r3, #0]
		Comd_funparameter_Frequency_txbuffer_B = Frequency_Parameter_B;
 8001bf4:	4b50      	ldr	r3, [pc, #320]	@ (8001d38 <System_Init+0x2f8>)
 8001bf6:	781a      	ldrb	r2, [r3, #0]
 8001bf8:	4b54      	ldr	r3, [pc, #336]	@ (8001d4c <System_Init+0x30c>)
 8001bfa:	701a      	strb	r2, [r3, #0]
		Comd_funparameter_Vibration_txbuffer = Vibration_Paramete;
 8001bfc:	4b4f      	ldr	r3, [pc, #316]	@ (8001d3c <System_Init+0x2fc>)
 8001bfe:	781a      	ldrb	r2, [r3, #0]
 8001c00:	4b53      	ldr	r3, [pc, #332]	@ (8001d50 <System_Init+0x310>)
 8001c02:	701a      	strb	r2, [r3, #0]
 8001c04:	e069      	b.n	8001cda <System_Init+0x29a>
	}else if((Change_Paramete_Flg[0] == 0xffff)&&(Change_Paramete_Flg[1] == 0xffff)&&(Change_Paramete_Flg[2] == 0xffff))
 8001c06:	4b47      	ldr	r3, [pc, #284]	@ (8001d24 <System_Init+0x2e4>)
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d163      	bne.n	8001cda <System_Init+0x29a>
 8001c12:	4b44      	ldr	r3, [pc, #272]	@ (8001d24 <System_Init+0x2e4>)
 8001c14:	885b      	ldrh	r3, [r3, #2]
 8001c16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d15d      	bne.n	8001cda <System_Init+0x29a>
 8001c1e:	4b41      	ldr	r3, [pc, #260]	@ (8001d24 <System_Init+0x2e4>)
 8001c20:	889b      	ldrh	r3, [r3, #4]
 8001c22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d157      	bne.n	8001cda <System_Init+0x29a>
	{
		Tx_Frequency_Paramete = 0X4A;
 8001c2a:	234a      	movs	r3, #74	@ 0x4a
 8001c2c:	71bb      	strb	r3, [r7, #6]
		TX_Vibration_Paramete = 0X0A;
 8001c2e:	230a      	movs	r3, #10
 8001c30:	71fb      	strb	r3, [r7, #7]

		//if(Tx_Frequency_Paramete == 84)
		{
			HAL_Delay(100);
 8001c32:	2064      	movs	r0, #100	@ 0x64
 8001c34:	f002 f9f6 	bl	8004024 <HAL_Delay>
			u32_frequency_parameter = 2000*(Tx_Frequency_Paramete+ULTRA_BASE);
 8001c38:	79bb      	ldrb	r3, [r7, #6]
 8001c3a:	f203 2327 	addw	r3, r3, #551	@ 0x227
 8001c3e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001c42:	fb02 f303 	mul.w	r3, r2, r3
 8001c46:	461a      	mov	r2, r3
 8001c48:	4b3d      	ldr	r3, [pc, #244]	@ (8001d40 <System_Init+0x300>)
 8001c4a:	601a      	str	r2, [r3, #0]
			if(u32_frequency_parameter == 1270000)
 8001c4c:	4b3c      	ldr	r3, [pc, #240]	@ (8001d40 <System_Init+0x300>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a40      	ldr	r2, [pc, #256]	@ (8001d54 <System_Init+0x314>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d106      	bne.n	8001c64 <System_Init+0x224>
			{
				HAL_UART_Transmit(&huart1,&Tx_Frequency_Paramete, 1, HAL_MAX_DELAY);
 8001c56:	1db9      	adds	r1, r7, #6
 8001c58:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	483e      	ldr	r0, [pc, #248]	@ (8001d58 <System_Init+0x318>)
 8001c60:	f005 fbbe 	bl	80073e0 <HAL_UART_Transmit>
			}
			AD9833_SetPara(AD9877_Ch_A,AD9833_REG_FREQ0,u32_frequency_parameter,AD9833_REG_PHASE1,2048,AD9833_OUT_TRIANGLE);
 8001c64:	4b36      	ldr	r3, [pc, #216]	@ (8001d40 <System_Init+0x300>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe fbbb 	bl	80003e4 <__aeabi_ui2d>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	2102      	movs	r1, #2
 8001c74:	9102      	str	r1, [sp, #8]
 8001c76:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c7a:	9101      	str	r1, [sp, #4]
 8001c7c:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001c80:	9100      	str	r1, [sp, #0]
 8001c82:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001c86:	2000      	movs	r0, #0
 8001c88:	f7ff fb7e 	bl	8001388 <AD9833_SetPara>
			AD9833_SetPara(AD9877_Ch_B,AD9833_REG_FREQ0,u32_frequency_parameter,AD9833_REG_PHASE1,2048,AD9833_OUT_TRIANGLE);
 8001c8c:	4b2c      	ldr	r3, [pc, #176]	@ (8001d40 <System_Init+0x300>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe fba7 	bl	80003e4 <__aeabi_ui2d>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	2102      	movs	r1, #2
 8001c9c:	9102      	str	r1, [sp, #8]
 8001c9e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ca2:	9101      	str	r1, [sp, #4]
 8001ca4:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001ca8:	9100      	str	r1, [sp, #0]
 8001caa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001cae:	2001      	movs	r0, #1
 8001cb0:	f7ff fb6a 	bl	8001388 <AD9833_SetPara>
		}


		//if(TX_Vibration_Paramete == 0x0A)
		{
			HAL_Delay(100);
 8001cb4:	2064      	movs	r0, #100	@ 0x64
 8001cb6:	f002 f9b5 	bl	8004024 <HAL_Delay>
			u32_vibration_parameter = TX_Vibration_Paramete * MOTOR_BASE;
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	22d8      	movs	r2, #216	@ 0xd8
 8001cbe:	fb02 f303 	mul.w	r3, r2, r3
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d44 <System_Init+0x304>)
 8001cc6:	601a      	str	r2, [r3, #0]
			{

			}
		}

		Comd_funparameter_Frequency_txbuffer_A = Tx_Frequency_Paramete;
 8001cc8:	79ba      	ldrb	r2, [r7, #6]
 8001cca:	4b1f      	ldr	r3, [pc, #124]	@ (8001d48 <System_Init+0x308>)
 8001ccc:	701a      	strb	r2, [r3, #0]
		Comd_funparameter_Frequency_txbuffer_B = Tx_Frequency_Paramete;
 8001cce:	79ba      	ldrb	r2, [r7, #6]
 8001cd0:	4b1e      	ldr	r3, [pc, #120]	@ (8001d4c <System_Init+0x30c>)
 8001cd2:	701a      	strb	r2, [r3, #0]
		Comd_funparameter_Vibration_txbuffer = TX_Vibration_Paramete;
 8001cd4:	4a1e      	ldr	r2, [pc, #120]	@ (8001d50 <System_Init+0x310>)
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	7013      	strb	r3, [r2, #0]
	}
	ultrasound_standby_time = 0;
 8001cda:	4b20      	ldr	r3, [pc, #128]	@ (8001d5c <System_Init+0x31c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
	battery_send_intervaltime = 0;
 8001ce0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d60 <System_Init+0x320>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000368 	.word	0x20000368
 8001cf4:	0800ec00 	.word	0x0800ec00
 8001cf8:	20000355 	.word	0x20000355
 8001cfc:	0800f400 	.word	0x0800f400
 8001d00:	2000035c 	.word	0x2000035c
 8001d04:	0800f800 	.word	0x0800f800
 8001d08:	2000034a 	.word	0x2000034a
 8001d0c:	08010c00 	.word	0x08010c00
 8001d10:	20000364 	.word	0x20000364
 8001d14:	08010000 	.word	0x08010000
 8001d18:	2000004a 	.word	0x2000004a
 8001d1c:	2000004c 	.word	0x2000004c
 8001d20:	20000316 	.word	0x20000316
 8001d24:	20000318 	.word	0x20000318
 8001d28:	0800f000 	.word	0x0800f000
 8001d2c:	20000320 	.word	0x20000320
 8001d30:	0800fc00 	.word	0x0800fc00
 8001d34:	2000032e 	.word	0x2000032e
 8001d38:	2000032f 	.word	0x2000032f
 8001d3c:	20000330 	.word	0x20000330
 8001d40:	20000334 	.word	0x20000334
 8001d44:	20000338 	.word	0x20000338
 8001d48:	20000331 	.word	0x20000331
 8001d4c:	20000332 	.word	0x20000332
 8001d50:	20000333 	.word	0x20000333
 8001d54:	001360f0 	.word	0x001360f0
 8001d58:	20000ab8 	.word	0x20000ab8
 8001d5c:	2000097c 	.word	0x2000097c
 8001d60:	20000980 	.word	0x20000980

08001d64 <Usart3_ReceiveData>:
 * @param   none
 * @retval  none
 * @func	串口接收数据处理
 */
void Usart3_ReceiveData(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af04      	add	r7, sp, #16

	if(USART3_RX_FLAG)
 8001d6a:	4ba0      	ldr	r3, [pc, #640]	@ (8001fec <Usart3_ReceiveData+0x288>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 823b 	beq.w	80021ec <Usart3_ReceiveData+0x488>
	{
		USART3_RX_FLAG = 0;
 8001d76:	4b9d      	ldr	r3, [pc, #628]	@ (8001fec <Usart3_ReceiveData+0x288>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	701a      	strb	r2, [r3, #0]
		/**超声开启/停止指令**/
		if((USART3_RX_BUF[0] == 0xEE) && (USART3_RX_BUF[1] == 0xB5) && (USART3_RX_BUF[2] == 0x21) && (USART3_RX_BUF[12] == 0xFF) && (USART3_RX_BUF[13] == 0xFC) && (USART3_RX_BUF[14] == 0xFF) && (USART3_RX_BUF[15] == 0xFF))
 8001d7c:	4b9c      	ldr	r3, [pc, #624]	@ (8001ff0 <Usart3_ReceiveData+0x28c>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2bee      	cmp	r3, #238	@ 0xee
 8001d82:	f040 819c 	bne.w	80020be <Usart3_ReceiveData+0x35a>
 8001d86:	4b9a      	ldr	r3, [pc, #616]	@ (8001ff0 <Usart3_ReceiveData+0x28c>)
 8001d88:	785b      	ldrb	r3, [r3, #1]
 8001d8a:	2bb5      	cmp	r3, #181	@ 0xb5
 8001d8c:	f040 8197 	bne.w	80020be <Usart3_ReceiveData+0x35a>
 8001d90:	4b97      	ldr	r3, [pc, #604]	@ (8001ff0 <Usart3_ReceiveData+0x28c>)
 8001d92:	789b      	ldrb	r3, [r3, #2]
 8001d94:	2b21      	cmp	r3, #33	@ 0x21
 8001d96:	f040 8192 	bne.w	80020be <Usart3_ReceiveData+0x35a>
 8001d9a:	4b95      	ldr	r3, [pc, #596]	@ (8001ff0 <Usart3_ReceiveData+0x28c>)
 8001d9c:	7b1b      	ldrb	r3, [r3, #12]
 8001d9e:	2bff      	cmp	r3, #255	@ 0xff
 8001da0:	f040 818d 	bne.w	80020be <Usart3_ReceiveData+0x35a>
 8001da4:	4b92      	ldr	r3, [pc, #584]	@ (8001ff0 <Usart3_ReceiveData+0x28c>)
 8001da6:	7b5b      	ldrb	r3, [r3, #13]
 8001da8:	2bfc      	cmp	r3, #252	@ 0xfc
 8001daa:	f040 8188 	bne.w	80020be <Usart3_ReceiveData+0x35a>
 8001dae:	4b90      	ldr	r3, [pc, #576]	@ (8001ff0 <Usart3_ReceiveData+0x28c>)
 8001db0:	7b9b      	ldrb	r3, [r3, #14]
 8001db2:	2bff      	cmp	r3, #255	@ 0xff
 8001db4:	f040 8183 	bne.w	80020be <Usart3_ReceiveData+0x35a>
 8001db8:	4b8d      	ldr	r3, [pc, #564]	@ (8001ff0 <Usart3_ReceiveData+0x28c>)
 8001dba:	7bdb      	ldrb	r3, [r3, #15]
 8001dbc:	2bff      	cmp	r3, #255	@ 0xff
 8001dbe:	f040 817e 	bne.w	80020be <Usart3_ReceiveData+0x35a>
		{
			if((USART3_RX_BUF[3] == 0x0) && (USART3_RX_BUF[4] == 0x0) && (USART3_RX_BUF[5] == 0x02) && (USART3_RX_BUF[6] == 0x01)) //超声开启
 8001dc2:	4b8b      	ldr	r3, [pc, #556]	@ (8001ff0 <Usart3_ReceiveData+0x28c>)
 8001dc4:	78db      	ldrb	r3, [r3, #3]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d117      	bne.n	8001dfa <Usart3_ReceiveData+0x96>
 8001dca:	4b89      	ldr	r3, [pc, #548]	@ (8001ff0 <Usart3_ReceiveData+0x28c>)
 8001dcc:	791b      	ldrb	r3, [r3, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d113      	bne.n	8001dfa <Usart3_ReceiveData+0x96>
 8001dd2:	4b87      	ldr	r3, [pc, #540]	@ (8001ff0 <Usart3_ReceiveData+0x28c>)
 8001dd4:	795b      	ldrb	r3, [r3, #5]
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d10f      	bne.n	8001dfa <Usart3_ReceiveData+0x96>
 8001dda:	4b85      	ldr	r3, [pc, #532]	@ (8001ff0 <Usart3_ReceiveData+0x28c>)
 8001ddc:	799b      	ldrb	r3, [r3, #6]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d10b      	bne.n	8001dfa <Usart3_ReceiveData+0x96>
			{
				Ultrasound_state = WORK_STATE;
 8001de2:	4b84      	ldr	r3, [pc, #528]	@ (8001ff4 <Usart3_ReceiveData+0x290>)
 8001de4:	2204      	movs	r2, #4
 8001de6:	701a      	strb	r2, [r3, #0]
				HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001de8:	2108      	movs	r1, #8
 8001dea:	4883      	ldr	r0, [pc, #524]	@ (8001ff8 <Usart3_ReceiveData+0x294>)
 8001dec:	f004 fbe4 	bl	80065b8 <HAL_TIM_PWM_Start>
				DMA_USART3_Tx_Data(Cmd_GetTim, 6);
 8001df0:	2106      	movs	r1, #6
 8001df2:	4882      	ldr	r0, [pc, #520]	@ (8001ffc <Usart3_ReceiveData+0x298>)
 8001df4:	f001 fbce 	bl	8003594 <DMA_USART3_Tx_Data>
 8001df8:	e161      	b.n	80020be <Usart3_ReceiveData+0x35a>
			}else if((USART3_RX_BUF[3] == 0x0) && (USART3_RX_BUF[4] == 0x0) && (USART3_RX_BUF[5] == 0x04) && (USART3_RX_BUF[6] == 0x00)) //超声停止
 8001dfa:	4b7d      	ldr	r3, [pc, #500]	@ (8001ff0 <Usart3_ReceiveData+0x28c>)
 8001dfc:	78db      	ldrb	r3, [r3, #3]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d113      	bne.n	8001e2a <Usart3_ReceiveData+0xc6>
 8001e02:	4b7b      	ldr	r3, [pc, #492]	@ (8001ff0 <Usart3_ReceiveData+0x28c>)
 8001e04:	791b      	ldrb	r3, [r3, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d10f      	bne.n	8001e2a <Usart3_ReceiveData+0xc6>
 8001e0a:	4b79      	ldr	r3, [pc, #484]	@ (8001ff0 <Usart3_ReceiveData+0x28c>)
 8001e0c:	795b      	ldrb	r3, [r3, #5]
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	d10b      	bne.n	8001e2a <Usart3_ReceiveData+0xc6>
 8001e12:	4b77      	ldr	r3, [pc, #476]	@ (8001ff0 <Usart3_ReceiveData+0x28c>)
 8001e14:	799b      	ldrb	r3, [r3, #6]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d107      	bne.n	8001e2a <Usart3_ReceiveData+0xc6>
			{
				Ultrasound_state = STANDBY_STATE;
 8001e1a:	4b76      	ldr	r3, [pc, #472]	@ (8001ff4 <Usart3_ReceiveData+0x290>)
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	701a      	strb	r2, [r3, #0]

				HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 8001e20:	2108      	movs	r1, #8
 8001e22:	4875      	ldr	r0, [pc, #468]	@ (8001ff8 <Usart3_ReceiveData+0x294>)
 8001e24:	f004 fc6a 	bl	80066fc <HAL_TIM_PWM_Stop>
 8001e28:	e149      	b.n	80020be <Usart3_ReceiveData+0x35a>
			}else if(USART3_RX_BUF[3] == 0xBC) //超声频率设置
 8001e2a:	4b71      	ldr	r3, [pc, #452]	@ (8001ff0 <Usart3_ReceiveData+0x28c>)
 8001e2c:	78db      	ldrb	r3, [r3, #3]
 8001e2e:	2bbc      	cmp	r3, #188	@ 0xbc
 8001e30:	f040 8106 	bne.w	8002040 <Usart3_ReceiveData+0x2dc>
			{
				if(USART3_RX_BUF[6] == 0x10)
 8001e34:	4b6e      	ldr	r3, [pc, #440]	@ (8001ff0 <Usart3_ReceiveData+0x28c>)
 8001e36:	799b      	ldrb	r3, [r3, #6]
 8001e38:	2b10      	cmp	r3, #16
 8001e3a:	d108      	bne.n	8001e4e <Usart3_ReceiveData+0xea>
				{
					LockOn_ParamFlg = 0x01;
 8001e3c:	4b70      	ldr	r3, [pc, #448]	@ (8002000 <Usart3_ReceiveData+0x29c>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	701a      	strb	r2, [r3, #0]
					STMFLASH_Write(FLASH_SLAVE_LOCKFLG,(uint16_t*)(&LockOn_ParamFlg),1);
 8001e42:	2201      	movs	r2, #1
 8001e44:	496e      	ldr	r1, [pc, #440]	@ (8002000 <Usart3_ReceiveData+0x29c>)
 8001e46:	486f      	ldr	r0, [pc, #444]	@ (8002004 <Usart3_ReceiveData+0x2a0>)
 8001e48:	f000 fd2e 	bl	80028a8 <STMFLASH_Write>
 8001e4c:	e137      	b.n	80020be <Usart3_ReceiveData+0x35a>
				}else if((USART3_RX_BUF[6] == 0x01) && (LockOn_ParamFlg != 0x01))
 8001e4e:	4b68      	ldr	r3, [pc, #416]	@ (8001ff0 <Usart3_ReceiveData+0x28c>)
 8001e50:	799b      	ldrb	r3, [r3, #6]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	f040 8133 	bne.w	80020be <Usart3_ReceiveData+0x35a>
 8001e58:	4b69      	ldr	r3, [pc, #420]	@ (8002000 <Usart3_ReceiveData+0x29c>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	f000 812e 	beq.w	80020be <Usart3_ReceiveData+0x35a>
				{
					Ultrasound_state = PUASE_STATE;
 8001e62:	4b64      	ldr	r3, [pc, #400]	@ (8001ff4 <Usart3_ReceiveData+0x290>)
 8001e64:	2203      	movs	r2, #3
 8001e66:	701a      	strb	r2, [r3, #0]
					//超声参数保存Flg位
					Change_Paramete_Flg[0] = 0xdddd;
 8001e68:	4b67      	ldr	r3, [pc, #412]	@ (8002008 <Usart3_ReceiveData+0x2a4>)
 8001e6a:	f64d 52dd 	movw	r2, #56797	@ 0xdddd
 8001e6e:	801a      	strh	r2, [r3, #0]
					Change_Paramete_Flg[1] = 0xeeee;
 8001e70:	4b65      	ldr	r3, [pc, #404]	@ (8002008 <Usart3_ReceiveData+0x2a4>)
 8001e72:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 8001e76:	805a      	strh	r2, [r3, #2]
					Change_Paramete_Flg[2] = 0xffff;
 8001e78:	4b63      	ldr	r3, [pc, #396]	@ (8002008 <Usart3_ReceiveData+0x2a4>)
 8001e7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e7e:	809a      	strh	r2, [r3, #4]
					STMFLASH_Write(FLASH_SLAVE_CHANGEFLG,(uint16_t*)(Change_Paramete_Flg),3);
 8001e80:	2203      	movs	r2, #3
 8001e82:	4961      	ldr	r1, [pc, #388]	@ (8002008 <Usart3_ReceiveData+0x2a4>)
 8001e84:	4861      	ldr	r0, [pc, #388]	@ (800200c <Usart3_ReceiveData+0x2a8>)
 8001e86:	f000 fd0f 	bl	80028a8 <STMFLASH_Write>

					Ultrasound_Parem_Write_Buff[0] = (uint16_t)USART3_RX_BUF[4];
 8001e8a:	4b59      	ldr	r3, [pc, #356]	@ (8001ff0 <Usart3_ReceiveData+0x28c>)
 8001e8c:	791b      	ldrb	r3, [r3, #4]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	4b5f      	ldr	r3, [pc, #380]	@ (8002010 <Usart3_ReceiveData+0x2ac>)
 8001e92:	801a      	strh	r2, [r3, #0]
					Ultrasound_Parem_Write_Buff[1] = (uint16_t)USART3_RX_BUF[7];
 8001e94:	4b56      	ldr	r3, [pc, #344]	@ (8001ff0 <Usart3_ReceiveData+0x28c>)
 8001e96:	79db      	ldrb	r3, [r3, #7]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b5d      	ldr	r3, [pc, #372]	@ (8002010 <Usart3_ReceiveData+0x2ac>)
 8001e9c:	805a      	strh	r2, [r3, #2]
					Ultrasound_Parem_Write_Buff[2] = (uint16_t)USART3_RX_BUF[5];
 8001e9e:	4b54      	ldr	r3, [pc, #336]	@ (8001ff0 <Usart3_ReceiveData+0x28c>)
 8001ea0:	795b      	ldrb	r3, [r3, #5]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	4b5a      	ldr	r3, [pc, #360]	@ (8002010 <Usart3_ReceiveData+0x2ac>)
 8001ea6:	809a      	strh	r2, [r3, #4]

					STMFLASH_Write(FLASH_SLAVE_ULTRAPARAM,(uint16_t*)(&Ultrasound_Parem_Write_Buff),3);
 8001ea8:	2203      	movs	r2, #3
 8001eaa:	4959      	ldr	r1, [pc, #356]	@ (8002010 <Usart3_ReceiveData+0x2ac>)
 8001eac:	4859      	ldr	r0, [pc, #356]	@ (8002014 <Usart3_ReceiveData+0x2b0>)
 8001eae:	f000 fcfb 	bl	80028a8 <STMFLASH_Write>
					STMFLASH_Read(FLASH_SLAVE_ULTRAPARAM,(uint16_t*)(&Ultrasound_Parem_Read_Buff),3);
 8001eb2:	2203      	movs	r2, #3
 8001eb4:	4958      	ldr	r1, [pc, #352]	@ (8002018 <Usart3_ReceiveData+0x2b4>)
 8001eb6:	4857      	ldr	r0, [pc, #348]	@ (8002014 <Usart3_ReceiveData+0x2b0>)
 8001eb8:	f000 fdb0 	bl	8002a1c <STMFLASH_Read>

					if((Ultrasound_Parem_Write_Buff[0] == Ultrasound_Parem_Read_Buff[0]) && (Ultrasound_Parem_Write_Buff[1] == Ultrasound_Parem_Read_Buff[1])&&(Ultrasound_Parem_Write_Buff[2] == Ultrasound_Parem_Read_Buff[2]))
 8001ebc:	4b54      	ldr	r3, [pc, #336]	@ (8002010 <Usart3_ReceiveData+0x2ac>)
 8001ebe:	881a      	ldrh	r2, [r3, #0]
 8001ec0:	4b55      	ldr	r3, [pc, #340]	@ (8002018 <Usart3_ReceiveData+0x2b4>)
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	f040 80fa 	bne.w	80020be <Usart3_ReceiveData+0x35a>
 8001eca:	4b51      	ldr	r3, [pc, #324]	@ (8002010 <Usart3_ReceiveData+0x2ac>)
 8001ecc:	885a      	ldrh	r2, [r3, #2]
 8001ece:	4b52      	ldr	r3, [pc, #328]	@ (8002018 <Usart3_ReceiveData+0x2b4>)
 8001ed0:	885b      	ldrh	r3, [r3, #2]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	f040 80f3 	bne.w	80020be <Usart3_ReceiveData+0x35a>
 8001ed8:	4b4d      	ldr	r3, [pc, #308]	@ (8002010 <Usart3_ReceiveData+0x2ac>)
 8001eda:	889a      	ldrh	r2, [r3, #4]
 8001edc:	4b4e      	ldr	r3, [pc, #312]	@ (8002018 <Usart3_ReceiveData+0x2b4>)
 8001ede:	889b      	ldrh	r3, [r3, #4]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	f040 80ec 	bne.w	80020be <Usart3_ReceiveData+0x35a>
					{
						Mcu_GpioInit();
 8001ee6:	f001 f9c9 	bl	800327c <Mcu_GpioInit>

						Frequency_Parameter_A = (uint8_t)Ultrasound_Parem_Read_Buff[0];
 8001eea:	4b4b      	ldr	r3, [pc, #300]	@ (8002018 <Usart3_ReceiveData+0x2b4>)
 8001eec:	881b      	ldrh	r3, [r3, #0]
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	4b4a      	ldr	r3, [pc, #296]	@ (800201c <Usart3_ReceiveData+0x2b8>)
 8001ef2:	701a      	strb	r2, [r3, #0]
						Frequency_Parameter_B = (uint8_t)Ultrasound_Parem_Read_Buff[1];
 8001ef4:	4b48      	ldr	r3, [pc, #288]	@ (8002018 <Usart3_ReceiveData+0x2b4>)
 8001ef6:	885b      	ldrh	r3, [r3, #2]
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	4b49      	ldr	r3, [pc, #292]	@ (8002020 <Usart3_ReceiveData+0x2bc>)
 8001efc:	701a      	strb	r2, [r3, #0]
						Vibration_Paramete = (uint8_t)Ultrasound_Parem_Read_Buff[2];
 8001efe:	4b46      	ldr	r3, [pc, #280]	@ (8002018 <Usart3_ReceiveData+0x2b4>)
 8001f00:	889b      	ldrh	r3, [r3, #4]
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	4b47      	ldr	r3, [pc, #284]	@ (8002024 <Usart3_ReceiveData+0x2c0>)
 8001f06:	701a      	strb	r2, [r3, #0]
						/**硬件进行1/2的预分频 所以软件处理时要乘2**/
						u32_frequency_parameter = 2000*(Frequency_Parameter_A+ULTRA_BASE);
 8001f08:	4b44      	ldr	r3, [pc, #272]	@ (800201c <Usart3_ReceiveData+0x2b8>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	f203 2327 	addw	r3, r3, #551	@ 0x227
 8001f10:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001f14:	fb02 f303 	mul.w	r3, r2, r3
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4b43      	ldr	r3, [pc, #268]	@ (8002028 <Usart3_ReceiveData+0x2c4>)
 8001f1c:	601a      	str	r2, [r3, #0]
						AD9833_SetPara(AD9877_Ch_A,AD9833_REG_FREQ0,u32_frequency_parameter,AD9833_REG_PHASE1,2048,AD9833_OUT_TRIANGLE);
 8001f1e:	4b42      	ldr	r3, [pc, #264]	@ (8002028 <Usart3_ReceiveData+0x2c4>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe fa5e 	bl	80003e4 <__aeabi_ui2d>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	2102      	movs	r1, #2
 8001f2e:	9102      	str	r1, [sp, #8]
 8001f30:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f34:	9101      	str	r1, [sp, #4]
 8001f36:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001f3a:	9100      	str	r1, [sp, #0]
 8001f3c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f40:	2000      	movs	r0, #0
 8001f42:	f7ff fa21 	bl	8001388 <AD9833_SetPara>

						u32_frequency_parameter = 2000*(Frequency_Parameter_B+ULTRA_BASE);
 8001f46:	4b36      	ldr	r3, [pc, #216]	@ (8002020 <Usart3_ReceiveData+0x2bc>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	f203 2327 	addw	r3, r3, #551	@ 0x227
 8001f4e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001f52:	fb02 f303 	mul.w	r3, r2, r3
 8001f56:	461a      	mov	r2, r3
 8001f58:	4b33      	ldr	r3, [pc, #204]	@ (8002028 <Usart3_ReceiveData+0x2c4>)
 8001f5a:	601a      	str	r2, [r3, #0]
						AD9833_SetPara(AD9877_Ch_B,AD9833_REG_FREQ0,u32_frequency_parameter,AD9833_REG_PHASE1,2048,AD9833_OUT_TRIANGLE);
 8001f5c:	4b32      	ldr	r3, [pc, #200]	@ (8002028 <Usart3_ReceiveData+0x2c4>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe fa3f 	bl	80003e4 <__aeabi_ui2d>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	2102      	movs	r1, #2
 8001f6c:	9102      	str	r1, [sp, #8]
 8001f6e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f72:	9101      	str	r1, [sp, #4]
 8001f74:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001f78:	9100      	str	r1, [sp, #0]
 8001f7a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f7e:	2001      	movs	r0, #1
 8001f80:	f7ff fa02 	bl	8001388 <AD9833_SetPara>

						//电机驱动频率72000000/(72 * 4167) ≈ 240Hz  驱动电压 = 3.3 * 55 / 100
						u32_vibration_parameter = Vibration_Paramete * MOTOR_BASE;
 8001f84:	4b27      	ldr	r3, [pc, #156]	@ (8002024 <Usart3_ReceiveData+0x2c0>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	23d8      	movs	r3, #216	@ 0xd8
 8001f8c:	fb02 f303 	mul.w	r3, r2, r3
 8001f90:	461a      	mov	r2, r3
 8001f92:	4b26      	ldr	r3, [pc, #152]	@ (800202c <Usart3_ReceiveData+0x2c8>)
 8001f94:	601a      	str	r2, [r3, #0]

						Comd_funparameter_txbuffer[2] = 0X21;
 8001f96:	4b26      	ldr	r3, [pc, #152]	@ (8002030 <Usart3_ReceiveData+0x2cc>)
 8001f98:	2221      	movs	r2, #33	@ 0x21
 8001f9a:	709a      	strb	r2, [r3, #2]
						Comd_funparameter_txbuffer[4] = Frequency_Parameter_A;
 8001f9c:	4b1f      	ldr	r3, [pc, #124]	@ (800201c <Usart3_ReceiveData+0x2b8>)
 8001f9e:	781a      	ldrb	r2, [r3, #0]
 8001fa0:	4b23      	ldr	r3, [pc, #140]	@ (8002030 <Usart3_ReceiveData+0x2cc>)
 8001fa2:	711a      	strb	r2, [r3, #4]
						Comd_funparameter_txbuffer[5] = Vibration_Paramete;
 8001fa4:	4b1f      	ldr	r3, [pc, #124]	@ (8002024 <Usart3_ReceiveData+0x2c0>)
 8001fa6:	781a      	ldrb	r2, [r3, #0]
 8001fa8:	4b21      	ldr	r3, [pc, #132]	@ (8002030 <Usart3_ReceiveData+0x2cc>)
 8001faa:	715a      	strb	r2, [r3, #5]
						Comd_funparameter_txbuffer[6] = Frequency_Parameter_B;
 8001fac:	4b1c      	ldr	r3, [pc, #112]	@ (8002020 <Usart3_ReceiveData+0x2bc>)
 8001fae:	781a      	ldrb	r2, [r3, #0]
 8001fb0:	4b1f      	ldr	r3, [pc, #124]	@ (8002030 <Usart3_ReceiveData+0x2cc>)
 8001fb2:	719a      	strb	r2, [r3, #6]

						Comd_funparameter_Frequency_txbuffer_A = Frequency_Parameter_A;
 8001fb4:	4b19      	ldr	r3, [pc, #100]	@ (800201c <Usart3_ReceiveData+0x2b8>)
 8001fb6:	781a      	ldrb	r2, [r3, #0]
 8001fb8:	4b1e      	ldr	r3, [pc, #120]	@ (8002034 <Usart3_ReceiveData+0x2d0>)
 8001fba:	701a      	strb	r2, [r3, #0]
						Comd_funparameter_Frequency_txbuffer_B = Frequency_Parameter_B;
 8001fbc:	4b18      	ldr	r3, [pc, #96]	@ (8002020 <Usart3_ReceiveData+0x2bc>)
 8001fbe:	781a      	ldrb	r2, [r3, #0]
 8001fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8002038 <Usart3_ReceiveData+0x2d4>)
 8001fc2:	701a      	strb	r2, [r3, #0]
						Comd_funparameter_Vibration_txbuffer = Vibration_Paramete;
 8001fc4:	4b17      	ldr	r3, [pc, #92]	@ (8002024 <Usart3_ReceiveData+0x2c0>)
 8001fc6:	781a      	ldrb	r2, [r3, #0]
 8001fc8:	4b1c      	ldr	r3, [pc, #112]	@ (800203c <Usart3_ReceiveData+0x2d8>)
 8001fca:	701a      	strb	r2, [r3, #0]

						DMA_USART3_Tx_Data(Comd_funparameter_txbuffer, 14);
 8001fcc:	210e      	movs	r1, #14
 8001fce:	4818      	ldr	r0, [pc, #96]	@ (8002030 <Usart3_ReceiveData+0x2cc>)
 8001fd0:	f001 fae0 	bl	8003594 <DMA_USART3_Tx_Data>
						HAL_Delay(2);
 8001fd4:	2002      	movs	r0, #2
 8001fd6:	f002 f825 	bl	8004024 <HAL_Delay>
						DMA_USART3_Tx_Data(Comd_funparameter_txbuffer, 14);
 8001fda:	210e      	movs	r1, #14
 8001fdc:	4814      	ldr	r0, [pc, #80]	@ (8002030 <Usart3_ReceiveData+0x2cc>)
 8001fde:	f001 fad9 	bl	8003594 <DMA_USART3_Tx_Data>

						HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 8001fe2:	2108      	movs	r1, #8
 8001fe4:	4804      	ldr	r0, [pc, #16]	@ (8001ff8 <Usart3_ReceiveData+0x294>)
 8001fe6:	f004 fb89 	bl	80066fc <HAL_TIM_PWM_Stop>
 8001fea:	e068      	b.n	80020be <Usart3_ReceiveData+0x35a>
 8001fec:	2000086d 	.word	0x2000086d
 8001ff0:	200007ec 	.word	0x200007ec
 8001ff4:	20000316 	.word	0x20000316
 8001ff8:	20000a70 	.word	0x20000a70
 8001ffc:	20000054 	.word	0x20000054
 8002000:	2000035c 	.word	0x2000035c
 8002004:	0800f800 	.word	0x0800f800
 8002008:	20000318 	.word	0x20000318
 800200c:	0800f000 	.word	0x0800f000
 8002010:	20000328 	.word	0x20000328
 8002014:	0800fc00 	.word	0x0800fc00
 8002018:	20000320 	.word	0x20000320
 800201c:	2000032e 	.word	0x2000032e
 8002020:	2000032f 	.word	0x2000032f
 8002024:	20000330 	.word	0x20000330
 8002028:	20000334 	.word	0x20000334
 800202c:	20000338 	.word	0x20000338
 8002030:	2000003c 	.word	0x2000003c
 8002034:	20000331 	.word	0x20000331
 8002038:	20000332 	.word	0x20000332
 800203c:	20000333 	.word	0x20000333
					}
				}else
				{}

			}else if((USART3_RX_BUF[3] == 0xBD) && (USART3_RX_BUF[4] == 0xF9)) //超声占空比设置
 8002040:	4b6c      	ldr	r3, [pc, #432]	@ (80021f4 <Usart3_ReceiveData+0x490>)
 8002042:	78db      	ldrb	r3, [r3, #3]
 8002044:	2bbd      	cmp	r3, #189	@ 0xbd
 8002046:	d13a      	bne.n	80020be <Usart3_ReceiveData+0x35a>
 8002048:	4b6a      	ldr	r3, [pc, #424]	@ (80021f4 <Usart3_ReceiveData+0x490>)
 800204a:	791b      	ldrb	r3, [r3, #4]
 800204c:	2bf9      	cmp	r3, #249	@ 0xf9
 800204e:	d136      	bne.n	80020be <Usart3_ReceiveData+0x35a>
			{
				duty_cycle_count = USART3_RX_BUF[5];
 8002050:	4b68      	ldr	r3, [pc, #416]	@ (80021f4 <Usart3_ReceiveData+0x490>)
 8002052:	795a      	ldrb	r2, [r3, #5]
 8002054:	4b68      	ldr	r3, [pc, #416]	@ (80021f8 <Usart3_ReceiveData+0x494>)
 8002056:	701a      	strb	r2, [r3, #0]
				duty_tim = (((uint16_t)USART3_RX_BUF[6] << 8) | (uint16_t)USART3_RX_BUF[7]);
 8002058:	4b66      	ldr	r3, [pc, #408]	@ (80021f4 <Usart3_ReceiveData+0x490>)
 800205a:	799b      	ldrb	r3, [r3, #6]
 800205c:	021b      	lsls	r3, r3, #8
 800205e:	b21a      	sxth	r2, r3
 8002060:	4b64      	ldr	r3, [pc, #400]	@ (80021f4 <Usart3_ReceiveData+0x490>)
 8002062:	79db      	ldrb	r3, [r3, #7]
 8002064:	b21b      	sxth	r3, r3
 8002066:	4313      	orrs	r3, r2
 8002068:	b21b      	sxth	r3, r3
 800206a:	b29a      	uxth	r2, r3
 800206c:	4b63      	ldr	r3, [pc, #396]	@ (80021fc <Usart3_ReceiveData+0x498>)
 800206e:	801a      	strh	r2, [r3, #0]

				if(duty_cycle_count == 0x64)
 8002070:	4b61      	ldr	r3, [pc, #388]	@ (80021f8 <Usart3_ReceiveData+0x494>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b64      	cmp	r3, #100	@ 0x64
 8002076:	d102      	bne.n	800207e <Usart3_ReceiveData+0x31a>
				{
					duty_cycle_count = 0x65;
 8002078:	4b5f      	ldr	r3, [pc, #380]	@ (80021f8 <Usart3_ReceiveData+0x494>)
 800207a:	2265      	movs	r2, #101	@ 0x65
 800207c:	701a      	strb	r2, [r3, #0]
				}

				if((duty_cycle_count == (uint8_t)FreqAdjustParam[0]) && (duty_tim == FreqAdjustParam[1]))
 800207e:	4b60      	ldr	r3, [pc, #384]	@ (8002200 <Usart3_ReceiveData+0x49c>)
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	b2da      	uxtb	r2, r3
 8002084:	4b5c      	ldr	r3, [pc, #368]	@ (80021f8 <Usart3_ReceiveData+0x494>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	429a      	cmp	r2, r3
 800208a:	d105      	bne.n	8002098 <Usart3_ReceiveData+0x334>
 800208c:	4b5c      	ldr	r3, [pc, #368]	@ (8002200 <Usart3_ReceiveData+0x49c>)
 800208e:	885a      	ldrh	r2, [r3, #2]
 8002090:	4b5a      	ldr	r3, [pc, #360]	@ (80021fc <Usart3_ReceiveData+0x498>)
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	429a      	cmp	r2, r3
 8002096:	d012      	beq.n	80020be <Usart3_ReceiveData+0x35a>
				{

				}else
				{
					FreqAdjustParam[0] = (uint16_t)duty_cycle_count;
 8002098:	4b57      	ldr	r3, [pc, #348]	@ (80021f8 <Usart3_ReceiveData+0x494>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	461a      	mov	r2, r3
 800209e:	4b58      	ldr	r3, [pc, #352]	@ (8002200 <Usart3_ReceiveData+0x49c>)
 80020a0:	801a      	strh	r2, [r3, #0]
					FreqAdjustParam[1] = duty_tim;
 80020a2:	4b56      	ldr	r3, [pc, #344]	@ (80021fc <Usart3_ReceiveData+0x498>)
 80020a4:	881a      	ldrh	r2, [r3, #0]
 80020a6:	4b56      	ldr	r3, [pc, #344]	@ (8002200 <Usart3_ReceiveData+0x49c>)
 80020a8:	805a      	strh	r2, [r3, #2]
					SetPWMDutyCycleAndFrequency(duty_tim);
 80020aa:	4b54      	ldr	r3, [pc, #336]	@ (80021fc <Usart3_ReceiveData+0x498>)
 80020ac:	881b      	ldrh	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 fb2c 	bl	800270c <SetPWMDutyCycleAndFrequency>
					STMFLASH_Write(FLASH_SLAVE_ADJUST,FreqAdjustParam,2);
 80020b4:	2202      	movs	r2, #2
 80020b6:	4952      	ldr	r1, [pc, #328]	@ (8002200 <Usart3_ReceiveData+0x49c>)
 80020b8:	4852      	ldr	r0, [pc, #328]	@ (8002204 <Usart3_ReceiveData+0x4a0>)
 80020ba:	f000 fbf5 	bl	80028a8 <STMFLASH_Write>
			{
			}
		}

		/**进入管理员界面 系统挂起**/
		if((USART3_RX_BUF[0] == 0xEE) && (USART3_RX_BUF[1] == 0xB5) && (USART3_RX_BUF[2] == 0x11) && (USART3_RX_BUF[12] == 0xFF) && (USART3_RX_BUF[13] == 0xFC) && (USART3_RX_BUF[14] == 0xFF) && (USART3_RX_BUF[15] == 0xFF))
 80020be:	4b4d      	ldr	r3, [pc, #308]	@ (80021f4 <Usart3_ReceiveData+0x490>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2bee      	cmp	r3, #238	@ 0xee
 80020c4:	d166      	bne.n	8002194 <Usart3_ReceiveData+0x430>
 80020c6:	4b4b      	ldr	r3, [pc, #300]	@ (80021f4 <Usart3_ReceiveData+0x490>)
 80020c8:	785b      	ldrb	r3, [r3, #1]
 80020ca:	2bb5      	cmp	r3, #181	@ 0xb5
 80020cc:	d162      	bne.n	8002194 <Usart3_ReceiveData+0x430>
 80020ce:	4b49      	ldr	r3, [pc, #292]	@ (80021f4 <Usart3_ReceiveData+0x490>)
 80020d0:	789b      	ldrb	r3, [r3, #2]
 80020d2:	2b11      	cmp	r3, #17
 80020d4:	d15e      	bne.n	8002194 <Usart3_ReceiveData+0x430>
 80020d6:	4b47      	ldr	r3, [pc, #284]	@ (80021f4 <Usart3_ReceiveData+0x490>)
 80020d8:	7b1b      	ldrb	r3, [r3, #12]
 80020da:	2bff      	cmp	r3, #255	@ 0xff
 80020dc:	d15a      	bne.n	8002194 <Usart3_ReceiveData+0x430>
 80020de:	4b45      	ldr	r3, [pc, #276]	@ (80021f4 <Usart3_ReceiveData+0x490>)
 80020e0:	7b5b      	ldrb	r3, [r3, #13]
 80020e2:	2bfc      	cmp	r3, #252	@ 0xfc
 80020e4:	d156      	bne.n	8002194 <Usart3_ReceiveData+0x430>
 80020e6:	4b43      	ldr	r3, [pc, #268]	@ (80021f4 <Usart3_ReceiveData+0x490>)
 80020e8:	7b9b      	ldrb	r3, [r3, #14]
 80020ea:	2bff      	cmp	r3, #255	@ 0xff
 80020ec:	d152      	bne.n	8002194 <Usart3_ReceiveData+0x430>
 80020ee:	4b41      	ldr	r3, [pc, #260]	@ (80021f4 <Usart3_ReceiveData+0x490>)
 80020f0:	7bdb      	ldrb	r3, [r3, #15]
 80020f2:	2bff      	cmp	r3, #255	@ 0xff
 80020f4:	d14e      	bne.n	8002194 <Usart3_ReceiveData+0x430>
		{
			if((USART3_RX_BUF[3] == 0x0) && (USART3_RX_BUF[4] == 0x0) && (USART3_RX_BUF[5] == 0x00) && (USART3_RX_BUF[6] == 0x0B))   //进入管理员界面
 80020f6:	4b3f      	ldr	r3, [pc, #252]	@ (80021f4 <Usart3_ReceiveData+0x490>)
 80020f8:	78db      	ldrb	r3, [r3, #3]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d130      	bne.n	8002160 <Usart3_ReceiveData+0x3fc>
 80020fe:	4b3d      	ldr	r3, [pc, #244]	@ (80021f4 <Usart3_ReceiveData+0x490>)
 8002100:	791b      	ldrb	r3, [r3, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d12c      	bne.n	8002160 <Usart3_ReceiveData+0x3fc>
 8002106:	4b3b      	ldr	r3, [pc, #236]	@ (80021f4 <Usart3_ReceiveData+0x490>)
 8002108:	795b      	ldrb	r3, [r3, #5]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d128      	bne.n	8002160 <Usart3_ReceiveData+0x3fc>
 800210e:	4b39      	ldr	r3, [pc, #228]	@ (80021f4 <Usart3_ReceiveData+0x490>)
 8002110:	799b      	ldrb	r3, [r3, #6]
 8002112:	2b0b      	cmp	r3, #11
 8002114:	d124      	bne.n	8002160 <Usart3_ReceiveData+0x3fc>
			{
				ultrasound_standby_time = 0;
 8002116:	4b3c      	ldr	r3, [pc, #240]	@ (8002208 <Usart3_ReceiveData+0x4a4>)
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
				Ultrasound_state = PUASE_STATE;
 800211c:	4b3b      	ldr	r3, [pc, #236]	@ (800220c <Usart3_ReceiveData+0x4a8>)
 800211e:	2203      	movs	r2, #3
 8002120:	701a      	strb	r2, [r3, #0]

				Comd_funparameter_txbuffer[2] = 0x13;
 8002122:	4b3b      	ldr	r3, [pc, #236]	@ (8002210 <Usart3_ReceiveData+0x4ac>)
 8002124:	2213      	movs	r2, #19
 8002126:	709a      	strb	r2, [r3, #2]
				Comd_funparameter_txbuffer[4] = Comd_funparameter_Frequency_txbuffer_A;
 8002128:	4b3a      	ldr	r3, [pc, #232]	@ (8002214 <Usart3_ReceiveData+0x4b0>)
 800212a:	781a      	ldrb	r2, [r3, #0]
 800212c:	4b38      	ldr	r3, [pc, #224]	@ (8002210 <Usart3_ReceiveData+0x4ac>)
 800212e:	711a      	strb	r2, [r3, #4]
				Comd_funparameter_txbuffer[5] = Comd_funparameter_Vibration_txbuffer;
 8002130:	4b39      	ldr	r3, [pc, #228]	@ (8002218 <Usart3_ReceiveData+0x4b4>)
 8002132:	781a      	ldrb	r2, [r3, #0]
 8002134:	4b36      	ldr	r3, [pc, #216]	@ (8002210 <Usart3_ReceiveData+0x4ac>)
 8002136:	715a      	strb	r2, [r3, #5]
				Comd_funparameter_txbuffer[6] = Comd_funparameter_Frequency_txbuffer_B;
 8002138:	4b38      	ldr	r3, [pc, #224]	@ (800221c <Usart3_ReceiveData+0x4b8>)
 800213a:	781a      	ldrb	r2, [r3, #0]
 800213c:	4b34      	ldr	r3, [pc, #208]	@ (8002210 <Usart3_ReceiveData+0x4ac>)
 800213e:	719a      	strb	r2, [r3, #6]
				DMA_USART3_Tx_Data(Comd_funparameter_txbuffer, 14);
 8002140:	210e      	movs	r1, #14
 8002142:	4833      	ldr	r0, [pc, #204]	@ (8002210 <Usart3_ReceiveData+0x4ac>)
 8002144:	f001 fa26 	bl	8003594 <DMA_USART3_Tx_Data>
				HAL_Delay(2);
 8002148:	2002      	movs	r0, #2
 800214a:	f001 ff6b 	bl	8004024 <HAL_Delay>
				DMA_USART3_Tx_Data(Comd_funparameter_txbuffer, 14);
 800214e:	210e      	movs	r1, #14
 8002150:	482f      	ldr	r0, [pc, #188]	@ (8002210 <Usart3_ReceiveData+0x4ac>)
 8002152:	f001 fa1f 	bl	8003594 <DMA_USART3_Tx_Data>

				HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 8002156:	2108      	movs	r1, #8
 8002158:	4831      	ldr	r0, [pc, #196]	@ (8002220 <Usart3_ReceiveData+0x4bc>)
 800215a:	f004 facf 	bl	80066fc <HAL_TIM_PWM_Stop>
 800215e:	e019      	b.n	8002194 <Usart3_ReceiveData+0x430>
			}else if((USART3_RX_BUF[3] == 0x0) && (USART3_RX_BUF[4] == 0x0A) && (USART3_RX_BUF[5] == 0x00) && (USART3_RX_BUF[6] == 0x06)) //退出管理员界面
 8002160:	4b24      	ldr	r3, [pc, #144]	@ (80021f4 <Usart3_ReceiveData+0x490>)
 8002162:	78db      	ldrb	r3, [r3, #3]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d115      	bne.n	8002194 <Usart3_ReceiveData+0x430>
 8002168:	4b22      	ldr	r3, [pc, #136]	@ (80021f4 <Usart3_ReceiveData+0x490>)
 800216a:	791b      	ldrb	r3, [r3, #4]
 800216c:	2b0a      	cmp	r3, #10
 800216e:	d111      	bne.n	8002194 <Usart3_ReceiveData+0x430>
 8002170:	4b20      	ldr	r3, [pc, #128]	@ (80021f4 <Usart3_ReceiveData+0x490>)
 8002172:	795b      	ldrb	r3, [r3, #5]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d10d      	bne.n	8002194 <Usart3_ReceiveData+0x430>
 8002178:	4b1e      	ldr	r3, [pc, #120]	@ (80021f4 <Usart3_ReceiveData+0x490>)
 800217a:	799b      	ldrb	r3, [r3, #6]
 800217c:	2b06      	cmp	r3, #6
 800217e:	d109      	bne.n	8002194 <Usart3_ReceiveData+0x430>
			{
				ultrasound_standby_time = 0;
 8002180:	4b21      	ldr	r3, [pc, #132]	@ (8002208 <Usart3_ReceiveData+0x4a4>)
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
				Ultrasound_state = STANDBY_STATE;
 8002186:	4b21      	ldr	r3, [pc, #132]	@ (800220c <Usart3_ReceiveData+0x4a8>)
 8002188:	2202      	movs	r2, #2
 800218a:	701a      	strb	r2, [r3, #0]

				HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 800218c:	2108      	movs	r1, #8
 800218e:	4824      	ldr	r0, [pc, #144]	@ (8002220 <Usart3_ReceiveData+0x4bc>)
 8002190:	f004 fab4 	bl	80066fc <HAL_TIM_PWM_Stop>
			}
		}

		if((USART3_RX_BUF[0] == 0xEE) && (USART3_RX_BUF[1] == 0xF7) && (USART3_RX_BUF[9] == 0xFF) && (USART3_RX_BUF[10] == 0xFC) && (USART3_RX_BUF[11] == 0xFF) && (USART3_RX_BUF[12] == 0xFF))
 8002194:	4b17      	ldr	r3, [pc, #92]	@ (80021f4 <Usart3_ReceiveData+0x490>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2bee      	cmp	r3, #238	@ 0xee
 800219a:	d127      	bne.n	80021ec <Usart3_ReceiveData+0x488>
 800219c:	4b15      	ldr	r3, [pc, #84]	@ (80021f4 <Usart3_ReceiveData+0x490>)
 800219e:	785b      	ldrb	r3, [r3, #1]
 80021a0:	2bf7      	cmp	r3, #247	@ 0xf7
 80021a2:	d123      	bne.n	80021ec <Usart3_ReceiveData+0x488>
 80021a4:	4b13      	ldr	r3, [pc, #76]	@ (80021f4 <Usart3_ReceiveData+0x490>)
 80021a6:	7a5b      	ldrb	r3, [r3, #9]
 80021a8:	2bff      	cmp	r3, #255	@ 0xff
 80021aa:	d11f      	bne.n	80021ec <Usart3_ReceiveData+0x488>
 80021ac:	4b11      	ldr	r3, [pc, #68]	@ (80021f4 <Usart3_ReceiveData+0x490>)
 80021ae:	7a9b      	ldrb	r3, [r3, #10]
 80021b0:	2bfc      	cmp	r3, #252	@ 0xfc
 80021b2:	d11b      	bne.n	80021ec <Usart3_ReceiveData+0x488>
 80021b4:	4b0f      	ldr	r3, [pc, #60]	@ (80021f4 <Usart3_ReceiveData+0x490>)
 80021b6:	7adb      	ldrb	r3, [r3, #11]
 80021b8:	2bff      	cmp	r3, #255	@ 0xff
 80021ba:	d117      	bne.n	80021ec <Usart3_ReceiveData+0x488>
 80021bc:	4b0d      	ldr	r3, [pc, #52]	@ (80021f4 <Usart3_ReceiveData+0x490>)
 80021be:	7b1b      	ldrb	r3, [r3, #12]
 80021c0:	2bff      	cmp	r3, #255	@ 0xff
 80021c2:	d113      	bne.n	80021ec <Usart3_ReceiveData+0x488>
		{
			Start_Time.Year = USART3_RX_BUF[2];
 80021c4:	4b0b      	ldr	r3, [pc, #44]	@ (80021f4 <Usart3_ReceiveData+0x490>)
 80021c6:	789a      	ldrb	r2, [r3, #2]
 80021c8:	4b16      	ldr	r3, [pc, #88]	@ (8002224 <Usart3_ReceiveData+0x4c0>)
 80021ca:	701a      	strb	r2, [r3, #0]
			Start_Time.Mon = USART3_RX_BUF[3];
 80021cc:	4b09      	ldr	r3, [pc, #36]	@ (80021f4 <Usart3_ReceiveData+0x490>)
 80021ce:	78da      	ldrb	r2, [r3, #3]
 80021d0:	4b14      	ldr	r3, [pc, #80]	@ (8002224 <Usart3_ReceiveData+0x4c0>)
 80021d2:	705a      	strb	r2, [r3, #1]
			Start_Time.Day = USART3_RX_BUF[5];
 80021d4:	4b07      	ldr	r3, [pc, #28]	@ (80021f4 <Usart3_ReceiveData+0x490>)
 80021d6:	795a      	ldrb	r2, [r3, #5]
 80021d8:	4b12      	ldr	r3, [pc, #72]	@ (8002224 <Usart3_ReceiveData+0x4c0>)
 80021da:	709a      	strb	r2, [r3, #2]
			Start_Time.Hour = USART3_RX_BUF[6];
 80021dc:	4b05      	ldr	r3, [pc, #20]	@ (80021f4 <Usart3_ReceiveData+0x490>)
 80021de:	799a      	ldrb	r2, [r3, #6]
 80021e0:	4b10      	ldr	r3, [pc, #64]	@ (8002224 <Usart3_ReceiveData+0x4c0>)
 80021e2:	70da      	strb	r2, [r3, #3]
			Start_Time.Min = USART3_RX_BUF[7];
 80021e4:	4b03      	ldr	r3, [pc, #12]	@ (80021f4 <Usart3_ReceiveData+0x490>)
 80021e6:	79da      	ldrb	r2, [r3, #7]
 80021e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002224 <Usart3_ReceiveData+0x4c0>)
 80021ea:	711a      	strb	r2, [r3, #4]
		}
	}
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	200007ec 	.word	0x200007ec
 80021f8:	2000004a 	.word	0x2000004a
 80021fc:	2000004c 	.word	0x2000004c
 8002200:	20000368 	.word	0x20000368
 8002204:	0800ec00 	.word	0x0800ec00
 8002208:	2000097c 	.word	0x2000097c
 800220c:	20000316 	.word	0x20000316
 8002210:	2000003c 	.word	0x2000003c
 8002214:	20000331 	.word	0x20000331
 8002218:	20000333 	.word	0x20000333
 800221c:	20000332 	.word	0x20000332
 8002220:	20000a70 	.word	0x20000a70
 8002224:	20000350 	.word	0x20000350

08002228 <Ultra_FourStates>:
 * @param   none
 * @retval  none
 * @func	超声工作状态，输出脉冲信号
 */
void Ultra_FourStates(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
	static uint8_t BatteryChFlg = 0;
	static uint32_t old_tick = 0;
	uint32_t new_tick = 0;
 800222e:	2300      	movs	r3, #0
 8002230:	607b      	str	r3, [r7, #4]

	if(process_flag == 1)
 8002232:	4b9e      	ldr	r3, [pc, #632]	@ (80024ac <Ultra_FourStates+0x284>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d154      	bne.n	80022e4 <Ultra_FourStates+0xbc>
	{
		process_flag = 0;
 800223a:	4b9c      	ldr	r3, [pc, #624]	@ (80024ac <Ultra_FourStates+0x284>)
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]

		if(battery_level_state < boost_battery_level1)
 8002240:	4b9b      	ldr	r3, [pc, #620]	@ (80024b0 <Ultra_FourStates+0x288>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b05      	cmp	r3, #5
 8002246:	d820      	bhi.n	800228a <Ultra_FourStates+0x62>

#else
			Ultrasound_state = CHARGE_STATE;
#endif

			new_tick = HAL_GetTick();
 8002248:	f001 fee2 	bl	8004010 <HAL_GetTick>
 800224c:	6078      	str	r0, [r7, #4]
			if((new_tick - old_tick) > 1000)
 800224e:	4b99      	ldr	r3, [pc, #612]	@ (80024b4 <Ultra_FourStates+0x28c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800225a:	d905      	bls.n	8002268 <Ultra_FourStates+0x40>
			{
				old_tick = new_tick;
 800225c:	4a95      	ldr	r2, [pc, #596]	@ (80024b4 <Ultra_FourStates+0x28c>)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6013      	str	r3, [r2, #0]
				BatteryChFlg = 1;
 8002262:	4b95      	ldr	r3, [pc, #596]	@ (80024b8 <Ultra_FourStates+0x290>)
 8002264:	2201      	movs	r2, #1
 8002266:	701a      	strb	r2, [r3, #0]
			}

			if((BatteryChFlg == 1) && (PowerFlg == 0))
 8002268:	4b93      	ldr	r3, [pc, #588]	@ (80024b8 <Ultra_FourStates+0x290>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d119      	bne.n	80022a4 <Ultra_FourStates+0x7c>
 8002270:	4b92      	ldr	r3, [pc, #584]	@ (80024bc <Ultra_FourStates+0x294>)
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d115      	bne.n	80022a4 <Ultra_FourStates+0x7c>
			{
				PowerFlg = 1;
 8002278:	4b90      	ldr	r3, [pc, #576]	@ (80024bc <Ultra_FourStates+0x294>)
 800227a:	2201      	movs	r2, #1
 800227c:	801a      	strh	r2, [r3, #0]
				STMFLASH_Write(FLASH_SLAVE_SHUNTDOWM,&PowerFlg,1);
 800227e:	2201      	movs	r2, #1
 8002280:	498e      	ldr	r1, [pc, #568]	@ (80024bc <Ultra_FourStates+0x294>)
 8002282:	488f      	ldr	r0, [pc, #572]	@ (80024c0 <Ultra_FourStates+0x298>)
 8002284:	f000 fb10 	bl	80028a8 <STMFLASH_Write>
 8002288:	e00c      	b.n	80022a4 <Ultra_FourStates+0x7c>
			}
		}else
		{
			if(BatteryChFlg == 0x01)
 800228a:	4b8b      	ldr	r3, [pc, #556]	@ (80024b8 <Ultra_FourStates+0x290>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d102      	bne.n	8002298 <Ultra_FourStates+0x70>
			{
				Ultrasound_state = CLOSE_STATE;
 8002292:	4b8c      	ldr	r3, [pc, #560]	@ (80024c4 <Ultra_FourStates+0x29c>)
 8002294:	2205      	movs	r2, #5
 8002296:	701a      	strb	r2, [r3, #0]
			}
			new_tick = HAL_GetTick();
 8002298:	f001 feba 	bl	8004010 <HAL_GetTick>
 800229c:	6078      	str	r0, [r7, #4]
			old_tick = new_tick;
 800229e:	4a85      	ldr	r2, [pc, #532]	@ (80024b4 <Ultra_FourStates+0x28c>)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6013      	str	r3, [r2, #0]
		}
		if((receive_battery_state_data & 0x80) == 0x80)
 80022a4:	4b88      	ldr	r3, [pc, #544]	@ (80024c8 <Ultra_FourStates+0x2a0>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	b25b      	sxtb	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	da1a      	bge.n	80022e4 <Ultra_FourStates+0xbc>
		{
			if(battery_adc_value1 <= 3200)   //自动关机3.2V
 80022ae:	4b87      	ldr	r3, [pc, #540]	@ (80024cc <Ultra_FourStates+0x2a4>)
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	f5b3 6f48 	cmp.w	r3, #3200	@ 0xc80
 80022b6:	d806      	bhi.n	80022c6 <Ultra_FourStates+0x9e>
			{
				Ultrasound_state = CLOSE_STATE;
 80022b8:	4b82      	ldr	r3, [pc, #520]	@ (80024c4 <Ultra_FourStates+0x29c>)
 80022ba:	2205      	movs	r2, #5
 80022bc:	701a      	strb	r2, [r3, #0]
				FinRes = Vol_Low;
 80022be:	4b84      	ldr	r3, [pc, #528]	@ (80024d0 <Ultra_FourStates+0x2a8>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	701a      	strb	r2, [r3, #0]
 80022c4:	e00e      	b.n	80022e4 <Ultra_FourStates+0xbc>
			}else
			{
				if((Ultrasound_state == WORK_STATE)||(Ultrasound_state == PUASE_STATE)||(Ultrasound_state == CLOSE_STATE))
 80022c6:	4b7f      	ldr	r3, [pc, #508]	@ (80024c4 <Ultra_FourStates+0x29c>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d00a      	beq.n	80022e4 <Ultra_FourStates+0xbc>
 80022ce:	4b7d      	ldr	r3, [pc, #500]	@ (80024c4 <Ultra_FourStates+0x29c>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b03      	cmp	r3, #3
 80022d4:	d006      	beq.n	80022e4 <Ultra_FourStates+0xbc>
 80022d6:	4b7b      	ldr	r3, [pc, #492]	@ (80024c4 <Ultra_FourStates+0x29c>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b05      	cmp	r3, #5
 80022dc:	d002      	beq.n	80022e4 <Ultra_FourStates+0xbc>
				{

				}else
				{
					Ultrasound_state = STANDBY_STATE;
 80022de:	4b79      	ldr	r3, [pc, #484]	@ (80024c4 <Ultra_FourStates+0x29c>)
 80022e0:	2202      	movs	r2, #2
 80022e2:	701a      	strb	r2, [r3, #0]
			}
		}

	}

	switch(Ultrasound_state)
 80022e4:	4b77      	ldr	r3, [pc, #476]	@ (80024c4 <Ultra_FourStates+0x29c>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	3b01      	subs	r3, #1
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	f200 812b 	bhi.w	8002546 <Ultra_FourStates+0x31e>
 80022f0:	a201      	add	r2, pc, #4	@ (adr r2, 80022f8 <Ultra_FourStates+0xd0>)
 80022f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f6:	bf00      	nop
 80022f8:	0800230d 	.word	0x0800230d
 80022fc:	08002327 	.word	0x08002327
 8002300:	08002395 	.word	0x08002395
 8002304:	08002403 	.word	0x08002403
 8002308:	08002501 	.word	0x08002501
	{
		//充电状态
		case CHARGE_STATE:
			{
				ultrasound_standby_time = 0;
 800230c:	4b71      	ldr	r3, [pc, #452]	@ (80024d4 <Ultra_FourStates+0x2ac>)
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
				if(WorkStartFlg == 1)
 8002312:	4b71      	ldr	r3, [pc, #452]	@ (80024d8 <Ultra_FourStates+0x2b0>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d102      	bne.n	8002320 <Ultra_FourStates+0xf8>
				{
					WorkFinishFlg = 1;
 800231a:	4b70      	ldr	r3, [pc, #448]	@ (80024dc <Ultra_FourStates+0x2b4>)
 800231c:	2201      	movs	r2, #1
 800231e:	701a      	strb	r2, [r3, #0]
				}
				Mcu_GpioInit();
 8002320:	f000 ffac 	bl	800327c <Mcu_GpioInit>
			}
				break;
 8002324:	e114      	b.n	8002550 <Ultra_FourStates+0x328>
		//待机状态
		case STANDBY_STATE:
			{
				if(WorkStartFlg == 1)
 8002326:	4b6c      	ldr	r3, [pc, #432]	@ (80024d8 <Ultra_FourStates+0x2b0>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d102      	bne.n	8002334 <Ultra_FourStates+0x10c>
				{
					WorkFinishFlg = 1;
 800232e:	4b6b      	ldr	r3, [pc, #428]	@ (80024dc <Ultra_FourStates+0x2b4>)
 8002330:	2201      	movs	r2, #1
 8002332:	701a      	strb	r2, [r3, #0]
				}

				HAL_GPIO_WritePin(LTDCDC_EN_GPIO_Port, LTDCDC_EN_Pin, GPIO_PIN_RESET);
 8002334:	2200      	movs	r2, #0
 8002336:	2180      	movs	r1, #128	@ 0x80
 8002338:	4869      	ldr	r0, [pc, #420]	@ (80024e0 <Ultra_FourStates+0x2b8>)
 800233a:	f003 f9d2 	bl	80056e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MOTOR_GATE_GPIO_Port, MOTOR_GATE_Pin, GPIO_PIN_RESET);
 800233e:	2200      	movs	r2, #0
 8002340:	2108      	movs	r1, #8
 8002342:	4868      	ldr	r0, [pc, #416]	@ (80024e4 <Ultra_FourStates+0x2bc>)
 8002344:	f003 f9cd 	bl	80056e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(WAVE_A_EN_GPIO_Port, WAVE_A_EN_Pin, GPIO_PIN_RESET);
 8002348:	2200      	movs	r2, #0
 800234a:	2101      	movs	r1, #1
 800234c:	4866      	ldr	r0, [pc, #408]	@ (80024e8 <Ultra_FourStates+0x2c0>)
 800234e:	f003 f9c8 	bl	80056e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(WAVE_B_EN_GPIO_Port, WAVE_B_EN_Pin, GPIO_PIN_RESET);
 8002352:	2200      	movs	r2, #0
 8002354:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002358:	4862      	ldr	r0, [pc, #392]	@ (80024e4 <Ultra_FourStates+0x2bc>)
 800235a:	f003 f9c2 	bl	80056e2 <HAL_GPIO_WritePin>

				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 0);
 800235e:	4b63      	ldr	r3, [pc, #396]	@ (80024ec <Ultra_FourStates+0x2c4>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2200      	movs	r2, #0
 8002364:	639a      	str	r2, [r3, #56]	@ 0x38
				__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 0);	//PWM_Ultra_A
 8002366:	4b62      	ldr	r3, [pc, #392]	@ (80024f0 <Ultra_FourStates+0x2c8>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2200      	movs	r2, #0
 800236c:	641a      	str	r2, [r3, #64]	@ 0x40

				if(ultrasound_standby_time >= 4500)
 800236e:	4b59      	ldr	r3, [pc, #356]	@ (80024d4 <Ultra_FourStates+0x2ac>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f241 1293 	movw	r2, #4499	@ 0x1193
 8002376:	4293      	cmp	r3, r2
 8002378:	f240 80e7 	bls.w	800254a <Ultra_FourStates+0x322>
				{
					ultrasound_standby_time = 0;
 800237c:	4b55      	ldr	r3, [pc, #340]	@ (80024d4 <Ultra_FourStates+0x2ac>)
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
					if(battery_level_state < boost_battery_level1)
 8002382:	4b4b      	ldr	r3, [pc, #300]	@ (80024b0 <Ultra_FourStates+0x288>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b05      	cmp	r3, #5
 8002388:	f240 80df 	bls.w	800254a <Ultra_FourStates+0x322>
					{

					}else
					{
						Ultrasound_state = CLOSE_STATE;
 800238c:	4b4d      	ldr	r3, [pc, #308]	@ (80024c4 <Ultra_FourStates+0x29c>)
 800238e:	2205      	movs	r2, #5
 8002390:	701a      	strb	r2, [r3, #0]
					}
				}
			}
				break;
 8002392:	e0da      	b.n	800254a <Ultra_FourStates+0x322>
		//挂起状态
		case PUASE_STATE:
			{
				if(WorkStartFlg == 1)
 8002394:	4b50      	ldr	r3, [pc, #320]	@ (80024d8 <Ultra_FourStates+0x2b0>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d102      	bne.n	80023a2 <Ultra_FourStates+0x17a>
				{
					WorkFinishFlg = 1;
 800239c:	4b4f      	ldr	r3, [pc, #316]	@ (80024dc <Ultra_FourStates+0x2b4>)
 800239e:	2201      	movs	r2, #1
 80023a0:	701a      	strb	r2, [r3, #0]
				}

				HAL_GPIO_WritePin(LTDCDC_EN_GPIO_Port, LTDCDC_EN_Pin, GPIO_PIN_RESET);
 80023a2:	2200      	movs	r2, #0
 80023a4:	2180      	movs	r1, #128	@ 0x80
 80023a6:	484e      	ldr	r0, [pc, #312]	@ (80024e0 <Ultra_FourStates+0x2b8>)
 80023a8:	f003 f99b 	bl	80056e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MOTOR_GATE_GPIO_Port, MOTOR_GATE_Pin, GPIO_PIN_RESET);
 80023ac:	2200      	movs	r2, #0
 80023ae:	2108      	movs	r1, #8
 80023b0:	484c      	ldr	r0, [pc, #304]	@ (80024e4 <Ultra_FourStates+0x2bc>)
 80023b2:	f003 f996 	bl	80056e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(WAVE_A_EN_GPIO_Port, WAVE_A_EN_Pin, GPIO_PIN_RESET);
 80023b6:	2200      	movs	r2, #0
 80023b8:	2101      	movs	r1, #1
 80023ba:	484b      	ldr	r0, [pc, #300]	@ (80024e8 <Ultra_FourStates+0x2c0>)
 80023bc:	f003 f991 	bl	80056e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(WAVE_B_EN_GPIO_Port, WAVE_B_EN_Pin, GPIO_PIN_RESET);
 80023c0:	2200      	movs	r2, #0
 80023c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80023c6:	4847      	ldr	r0, [pc, #284]	@ (80024e4 <Ultra_FourStates+0x2bc>)
 80023c8:	f003 f98b 	bl	80056e2 <HAL_GPIO_WritePin>

				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 0);
 80023cc:	4b47      	ldr	r3, [pc, #284]	@ (80024ec <Ultra_FourStates+0x2c4>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2200      	movs	r2, #0
 80023d2:	639a      	str	r2, [r3, #56]	@ 0x38
				__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 0);	//PWM_Ultra_A
 80023d4:	4b46      	ldr	r3, [pc, #280]	@ (80024f0 <Ultra_FourStates+0x2c8>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2200      	movs	r2, #0
 80023da:	641a      	str	r2, [r3, #64]	@ 0x40

				if(ultrasound_standby_time >= 60000)
 80023dc:	4b3d      	ldr	r3, [pc, #244]	@ (80024d4 <Ultra_FourStates+0x2ac>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80023e4:	4293      	cmp	r3, r2
 80023e6:	f240 80b2 	bls.w	800254e <Ultra_FourStates+0x326>
				{
					ultrasound_standby_time = 0;
 80023ea:	4b3a      	ldr	r3, [pc, #232]	@ (80024d4 <Ultra_FourStates+0x2ac>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
					if(battery_level_state < boost_battery_level1)
 80023f0:	4b2f      	ldr	r3, [pc, #188]	@ (80024b0 <Ultra_FourStates+0x288>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2b05      	cmp	r3, #5
 80023f6:	f240 80aa 	bls.w	800254e <Ultra_FourStates+0x326>
					{

					}else
					{
						Ultrasound_state = CLOSE_STATE;
 80023fa:	4b32      	ldr	r3, [pc, #200]	@ (80024c4 <Ultra_FourStates+0x29c>)
 80023fc:	2205      	movs	r2, #5
 80023fe:	701a      	strb	r2, [r3, #0]
					}
				}
			}
				break;
 8002400:	e0a5      	b.n	800254e <Ultra_FourStates+0x326>
		//工作状态
		case WORK_STATE:
			{
				WorkStartFlg = 1;
 8002402:	4b35      	ldr	r3, [pc, #212]	@ (80024d8 <Ultra_FourStates+0x2b0>)
 8002404:	2201      	movs	r2, #1
 8002406:	701a      	strb	r2, [r3, #0]
				ultrasound_standby_time = 0;
 8002408:	4b32      	ldr	r3, [pc, #200]	@ (80024d4 <Ultra_FourStates+0x2ac>)
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]

				HAL_GPIO_WritePin(LTDCDC_EN_GPIO_Port, LTDCDC_EN_Pin, GPIO_PIN_SET);
 800240e:	2201      	movs	r2, #1
 8002410:	2180      	movs	r1, #128	@ 0x80
 8002412:	4833      	ldr	r0, [pc, #204]	@ (80024e0 <Ultra_FourStates+0x2b8>)
 8002414:	f003 f965 	bl	80056e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MPDCDC_EN_GPIO_Port, MPDCDC_EN_Pin, GPIO_PIN_SET);
 8002418:	2201      	movs	r2, #1
 800241a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800241e:	4831      	ldr	r0, [pc, #196]	@ (80024e4 <Ultra_FourStates+0x2bc>)
 8002420:	f003 f95f 	bl	80056e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MOTOR_GATE_GPIO_Port, MOTOR_GATE_Pin, GPIO_PIN_SET);
 8002424:	2201      	movs	r2, #1
 8002426:	2108      	movs	r1, #8
 8002428:	482e      	ldr	r0, [pc, #184]	@ (80024e4 <Ultra_FourStates+0x2bc>)
 800242a:	f003 f95a 	bl	80056e2 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(WAVE_A_EN_GPIO_Port, WAVE_A_EN_Pin, GPIO_PIN_SET);
 800242e:	2201      	movs	r2, #1
 8002430:	2101      	movs	r1, #1
 8002432:	482d      	ldr	r0, [pc, #180]	@ (80024e8 <Ultra_FourStates+0x2c0>)
 8002434:	f003 f955 	bl	80056e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(WAVE_B_EN_GPIO_Port, WAVE_B_EN_Pin, GPIO_PIN_SET);
 8002438:	2201      	movs	r2, #1
 800243a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800243e:	4829      	ldr	r0, [pc, #164]	@ (80024e4 <Ultra_FourStates+0x2bc>)
 8002440:	f003 f94f 	bl	80056e2 <HAL_GPIO_WritePin>

				if(Motor_Worktime < (duty_cycle_count * 100))
 8002444:	4b2b      	ldr	r3, [pc, #172]	@ (80024f4 <Ultra_FourStates+0x2cc>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	461a      	mov	r2, r3
 800244a:	2364      	movs	r3, #100	@ 0x64
 800244c:	fb02 f303 	mul.w	r3, r2, r3
 8002450:	461a      	mov	r2, r3
 8002452:	4b29      	ldr	r3, [pc, #164]	@ (80024f8 <Ultra_FourStates+0x2d0>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	429a      	cmp	r2, r3
 8002458:	d909      	bls.n	800246e <Ultra_FourStates+0x246>
				{
					__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, u32_vibration_parameter);
 800245a:	4b24      	ldr	r3, [pc, #144]	@ (80024ec <Ultra_FourStates+0x2c4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a27      	ldr	r2, [pc, #156]	@ (80024fc <Ultra_FourStates+0x2d4>)
 8002460:	6812      	ldr	r2, [r2, #0]
 8002462:	639a      	str	r2, [r3, #56]	@ 0x38
					__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8002464:	4b21      	ldr	r3, [pc, #132]	@ (80024ec <Ultra_FourStates+0x2c4>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2200      	movs	r2, #0
 800246a:	635a      	str	r2, [r3, #52]	@ 0x34
				}else
				{
					Motor_Worktime = 0;
				}
			}
				break;
 800246c:	e070      	b.n	8002550 <Ultra_FourStates+0x328>
				}else if((Motor_Worktime >= (duty_cycle_count * 100)) && (Motor_Worktime < (100 * 100)))
 800246e:	4b21      	ldr	r3, [pc, #132]	@ (80024f4 <Ultra_FourStates+0x2cc>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	461a      	mov	r2, r3
 8002474:	2364      	movs	r3, #100	@ 0x64
 8002476:	fb02 f303 	mul.w	r3, r2, r3
 800247a:	461a      	mov	r2, r3
 800247c:	4b1e      	ldr	r3, [pc, #120]	@ (80024f8 <Ultra_FourStates+0x2d0>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	429a      	cmp	r2, r3
 8002482:	d80e      	bhi.n	80024a2 <Ultra_FourStates+0x27a>
 8002484:	4b1c      	ldr	r3, [pc, #112]	@ (80024f8 <Ultra_FourStates+0x2d0>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f242 720f 	movw	r2, #9999	@ 0x270f
 800248c:	4293      	cmp	r3, r2
 800248e:	d808      	bhi.n	80024a2 <Ultra_FourStates+0x27a>
					__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 0);
 8002490:	4b16      	ldr	r3, [pc, #88]	@ (80024ec <Ultra_FourStates+0x2c4>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2200      	movs	r2, #0
 8002496:	639a      	str	r2, [r3, #56]	@ 0x38
					__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8002498:	4b14      	ldr	r3, [pc, #80]	@ (80024ec <Ultra_FourStates+0x2c4>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2200      	movs	r2, #0
 800249e:	635a      	str	r2, [r3, #52]	@ 0x34
				break;
 80024a0:	e056      	b.n	8002550 <Ultra_FourStates+0x328>
					Motor_Worktime = 0;
 80024a2:	4b15      	ldr	r3, [pc, #84]	@ (80024f8 <Ultra_FourStates+0x2d0>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
				break;
 80024a8:	e052      	b.n	8002550 <Ultra_FourStates+0x328>
 80024aa:	bf00      	nop
 80024ac:	200007c6 	.word	0x200007c6
 80024b0:	20000026 	.word	0x20000026
 80024b4:	2000036c 	.word	0x2000036c
 80024b8:	20000370 	.word	0x20000370
 80024bc:	20000364 	.word	0x20000364
 80024c0:	08010000 	.word	0x08010000
 80024c4:	20000316 	.word	0x20000316
 80024c8:	200007c7 	.word	0x200007c7
 80024cc:	20000024 	.word	0x20000024
 80024d0:	2000033c 	.word	0x2000033c
 80024d4:	2000097c 	.word	0x2000097c
 80024d8:	20000348 	.word	0x20000348
 80024dc:	20000349 	.word	0x20000349
 80024e0:	40010c00 	.word	0x40010c00
 80024e4:	40010800 	.word	0x40010800
 80024e8:	40011000 	.word	0x40011000
 80024ec:	20000a28 	.word	0x20000a28
 80024f0:	20000a70 	.word	0x20000a70
 80024f4:	2000004a 	.word	0x2000004a
 80024f8:	200007e0 	.word	0x200007e0
 80024fc:	20000338 	.word	0x20000338
		//关机状态
		case CLOSE_STATE:
			{
				if(WorkStartFlg == 1)
 8002500:	4b15      	ldr	r3, [pc, #84]	@ (8002558 <Ultra_FourStates+0x330>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d102      	bne.n	800250e <Ultra_FourStates+0x2e6>
				{
					WorkFinishFlg = 1;
 8002508:	4b14      	ldr	r3, [pc, #80]	@ (800255c <Ultra_FourStates+0x334>)
 800250a:	2201      	movs	r2, #1
 800250c:	701a      	strb	r2, [r3, #0]
				}

				if((ShuntDowmCount > 130) && (PowerFlg == 1))
 800250e:	4b14      	ldr	r3, [pc, #80]	@ (8002560 <Ultra_FourStates+0x338>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2b82      	cmp	r3, #130	@ 0x82
 8002514:	d90b      	bls.n	800252e <Ultra_FourStates+0x306>
 8002516:	4b13      	ldr	r3, [pc, #76]	@ (8002564 <Ultra_FourStates+0x33c>)
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d107      	bne.n	800252e <Ultra_FourStates+0x306>
				{
					PowerFlg = 0;
 800251e:	4b11      	ldr	r3, [pc, #68]	@ (8002564 <Ultra_FourStates+0x33c>)
 8002520:	2200      	movs	r2, #0
 8002522:	801a      	strh	r2, [r3, #0]
					STMFLASH_Write(FLASH_SLAVE_SHUNTDOWM,(uint16_t*)&PowerFlg,1);
 8002524:	2201      	movs	r2, #1
 8002526:	490f      	ldr	r1, [pc, #60]	@ (8002564 <Ultra_FourStates+0x33c>)
 8002528:	480f      	ldr	r0, [pc, #60]	@ (8002568 <Ultra_FourStates+0x340>)
 800252a:	f000 f9bd 	bl	80028a8 <STMFLASH_Write>
				}

				HAL_GPIO_WritePin(KEY_CONTROL_GPIO_Port, KEY_CONTROL_Pin, GPIO_PIN_SET);
 800252e:	2201      	movs	r2, #1
 8002530:	2140      	movs	r1, #64	@ 0x40
 8002532:	480e      	ldr	r0, [pc, #56]	@ (800256c <Ultra_FourStates+0x344>)
 8002534:	f003 f8d5 	bl	80056e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(CONTROL_CLOSE_GPIO_Port, CONTROL_CLOSE_Pin, GPIO_PIN_SET);
 8002538:	2201      	movs	r2, #1
 800253a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800253e:	480c      	ldr	r0, [pc, #48]	@ (8002570 <Ultra_FourStates+0x348>)
 8002540:	f003 f8cf 	bl	80056e2 <HAL_GPIO_WritePin>
			}
				break;
 8002544:	e004      	b.n	8002550 <Ultra_FourStates+0x328>
		default :

				break;
 8002546:	bf00      	nop
 8002548:	e002      	b.n	8002550 <Ultra_FourStates+0x328>
				break;
 800254a:	bf00      	nop
 800254c:	e000      	b.n	8002550 <Ultra_FourStates+0x328>
				break;
 800254e:	bf00      	nop
	}
}
 8002550:	bf00      	nop
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	20000348 	.word	0x20000348
 800255c:	20000349 	.word	0x20000349
 8002560:	20000360 	.word	0x20000360
 8002564:	20000364 	.word	0x20000364
 8002568:	08010000 	.word	0x08010000
 800256c:	40011000 	.word	0x40011000
 8002570:	40010800 	.word	0x40010800

08002574 <Log_Writer2Flash>:
 * @param   none
 * @retval  none
 * @func	将单次使用的档位、时间信息记录到Flash中
 */
void Log_Writer2Flash(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
	uint32_t work_time_temp = 0;
 800257a:	2300      	movs	r3, #0
 800257c:	607b      	str	r3, [r7, #4]
	uint32_t addr_offset = 0;
 800257e:	2300      	movs	r3, #0
 8002580:	603b      	str	r3, [r7, #0]
	//正常的开始工作到工作结束，记录一次
	if((WorkStartFlg == 1) && (WorkFinishFlg == 1))
 8002582:	4b36      	ldr	r3, [pc, #216]	@ (800265c <Log_Writer2Flash+0xe8>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d164      	bne.n	8002654 <Log_Writer2Flash+0xe0>
 800258a:	4b35      	ldr	r3, [pc, #212]	@ (8002660 <Log_Writer2Flash+0xec>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d160      	bne.n	8002654 <Log_Writer2Flash+0xe0>
	{
		WorkCount++;
 8002592:	4b34      	ldr	r3, [pc, #208]	@ (8002664 <Log_Writer2Flash+0xf0>)
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	3301      	adds	r3, #1
 8002598:	b29a      	uxth	r2, r3
 800259a:	4b32      	ldr	r3, [pc, #200]	@ (8002664 <Log_Writer2Flash+0xf0>)
 800259c:	801a      	strh	r2, [r3, #0]
		if(duty_cycle_count == 25)
 800259e:	4b32      	ldr	r3, [pc, #200]	@ (8002668 <Log_Writer2Flash+0xf4>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b19      	cmp	r3, #25
 80025a4:	d107      	bne.n	80025b6 <Log_Writer2Flash+0x42>
		{
			//异常结束的原因
			WorkParm[0] = (0x10 | FinRes);
 80025a6:	4b31      	ldr	r3, [pc, #196]	@ (800266c <Log_Writer2Flash+0xf8>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	f043 0310 	orr.w	r3, r3, #16
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	4b2f      	ldr	r3, [pc, #188]	@ (8002670 <Log_Writer2Flash+0xfc>)
 80025b2:	701a      	strb	r2, [r3, #0]
 80025b4:	e006      	b.n	80025c4 <Log_Writer2Flash+0x50>
		}else
		{
			WorkParm[0] = (0x20 | FinRes);
 80025b6:	4b2d      	ldr	r3, [pc, #180]	@ (800266c <Log_Writer2Flash+0xf8>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	f043 0320 	orr.w	r3, r3, #32
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002670 <Log_Writer2Flash+0xfc>)
 80025c2:	701a      	strb	r2, [r3, #0]
		}
		work_time_temp = WorkTime / 100;
 80025c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002674 <Log_Writer2Flash+0x100>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a2b      	ldr	r2, [pc, #172]	@ (8002678 <Log_Writer2Flash+0x104>)
 80025ca:	fba2 2303 	umull	r2, r3, r2, r3
 80025ce:	095b      	lsrs	r3, r3, #5
 80025d0:	607b      	str	r3, [r7, #4]
		WorkParm[1] = (uint8_t)((work_time_temp & 0xFF00) >> 8);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	0a1b      	lsrs	r3, r3, #8
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	4b25      	ldr	r3, [pc, #148]	@ (8002670 <Log_Writer2Flash+0xfc>)
 80025da:	705a      	strb	r2, [r3, #1]
		WorkParm[2] = (uint8_t)(work_time_temp & 0x00FF);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	4b23      	ldr	r3, [pc, #140]	@ (8002670 <Log_Writer2Flash+0xfc>)
 80025e2:	709a      	strb	r2, [r3, #2]
		WorkParm[3] = Start_Time.Year;
 80025e4:	4b25      	ldr	r3, [pc, #148]	@ (800267c <Log_Writer2Flash+0x108>)
 80025e6:	781a      	ldrb	r2, [r3, #0]
 80025e8:	4b21      	ldr	r3, [pc, #132]	@ (8002670 <Log_Writer2Flash+0xfc>)
 80025ea:	70da      	strb	r2, [r3, #3]
		WorkParm[4] = Start_Time.Mon;
 80025ec:	4b23      	ldr	r3, [pc, #140]	@ (800267c <Log_Writer2Flash+0x108>)
 80025ee:	785a      	ldrb	r2, [r3, #1]
 80025f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002670 <Log_Writer2Flash+0xfc>)
 80025f2:	711a      	strb	r2, [r3, #4]
		WorkParm[5] = Start_Time.Day;
 80025f4:	4b21      	ldr	r3, [pc, #132]	@ (800267c <Log_Writer2Flash+0x108>)
 80025f6:	789a      	ldrb	r2, [r3, #2]
 80025f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002670 <Log_Writer2Flash+0xfc>)
 80025fa:	715a      	strb	r2, [r3, #5]
		WorkParm[6] = Start_Time.Hour;
 80025fc:	4b1f      	ldr	r3, [pc, #124]	@ (800267c <Log_Writer2Flash+0x108>)
 80025fe:	78da      	ldrb	r2, [r3, #3]
 8002600:	4b1b      	ldr	r3, [pc, #108]	@ (8002670 <Log_Writer2Flash+0xfc>)
 8002602:	719a      	strb	r2, [r3, #6]
		WorkParm[7] = Start_Time.Min;
 8002604:	4b1d      	ldr	r3, [pc, #116]	@ (800267c <Log_Writer2Flash+0x108>)
 8002606:	791a      	ldrb	r2, [r3, #4]
 8002608:	4b19      	ldr	r3, [pc, #100]	@ (8002670 <Log_Writer2Flash+0xfc>)
 800260a:	71da      	strb	r2, [r3, #7]

		//记录到8600行之后回滚到0,目前Flash最大记录8600行
		addr_offset =  FLASH_SLAVE_LOGIN + ((WorkCount % 3800) * 8);
 800260c:	4b15      	ldr	r3, [pc, #84]	@ (8002664 <Log_Writer2Flash+0xf0>)
 800260e:	881b      	ldrh	r3, [r3, #0]
 8002610:	4a1b      	ldr	r2, [pc, #108]	@ (8002680 <Log_Writer2Flash+0x10c>)
 8002612:	fba2 1203 	umull	r1, r2, r2, r3
 8002616:	0a92      	lsrs	r2, r2, #10
 8002618:	f640 61d8 	movw	r1, #3800	@ 0xed8
 800261c:	fb01 f202 	mul.w	r2, r1, r2
 8002620:	1a9b      	subs	r3, r3, r2
 8002622:	b29b      	uxth	r3, r3
 8002624:	461a      	mov	r2, r3
 8002626:	4b17      	ldr	r3, [pc, #92]	@ (8002684 <Log_Writer2Flash+0x110>)
 8002628:	4413      	add	r3, r2
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	603b      	str	r3, [r7, #0]

		STMFLASH_Write(FLASH_SLAVE_WORKCOUNT,(uint16_t*)&WorkCount,1);
 800262e:	2201      	movs	r2, #1
 8002630:	490c      	ldr	r1, [pc, #48]	@ (8002664 <Log_Writer2Flash+0xf0>)
 8002632:	4815      	ldr	r0, [pc, #84]	@ (8002688 <Log_Writer2Flash+0x114>)
 8002634:	f000 f938 	bl	80028a8 <STMFLASH_Write>
		STMFLASH_Write(addr_offset ,(uint16_t*)WorkParm,4);
 8002638:	2204      	movs	r2, #4
 800263a:	490d      	ldr	r1, [pc, #52]	@ (8002670 <Log_Writer2Flash+0xfc>)
 800263c:	6838      	ldr	r0, [r7, #0]
 800263e:	f000 f933 	bl	80028a8 <STMFLASH_Write>

		WorkTime = 0;
 8002642:	4b0c      	ldr	r3, [pc, #48]	@ (8002674 <Log_Writer2Flash+0x100>)
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
		WorkStartFlg = 0;
 8002648:	4b04      	ldr	r3, [pc, #16]	@ (800265c <Log_Writer2Flash+0xe8>)
 800264a:	2200      	movs	r2, #0
 800264c:	701a      	strb	r2, [r3, #0]
		WorkFinishFlg = 0;
 800264e:	4b04      	ldr	r3, [pc, #16]	@ (8002660 <Log_Writer2Flash+0xec>)
 8002650:	2200      	movs	r2, #0
 8002652:	701a      	strb	r2, [r3, #0]
	}
}
 8002654:	bf00      	nop
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	20000348 	.word	0x20000348
 8002660:	20000349 	.word	0x20000349
 8002664:	2000034a 	.word	0x2000034a
 8002668:	2000004a 	.word	0x2000004a
 800266c:	2000033c 	.word	0x2000033c
 8002670:	20000340 	.word	0x20000340
 8002674:	2000034c 	.word	0x2000034c
 8002678:	51eb851f 	.word	0x51eb851f
 800267c:	20000350 	.word	0x20000350
 8002680:	44fc3a35 	.word	0x44fc3a35
 8002684:	01002181 	.word	0x01002181
 8002688:	08010c00 	.word	0x08010c00

0800268c <Warning_LowBattery>:
 * @param   none
 * @retval  none
 * @func	低电量报警，电量低于2格报警，只有当电量大于3格或充电20分钟解锁
 */
void Warning_LowBattery(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
	//从工作到结束，并且电量低于2格时低电量关机
	if((CompleteFlg == 1) && ((battery_level_state == boost_battery_level2) || (battery_level_state == boost_battery_level1)))
 8002690:	4b18      	ldr	r3, [pc, #96]	@ (80026f4 <Warning_LowBattery+0x68>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d113      	bne.n	80026c0 <Warning_LowBattery+0x34>
 8002698:	4b17      	ldr	r3, [pc, #92]	@ (80026f8 <Warning_LowBattery+0x6c>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2b07      	cmp	r3, #7
 800269e:	d003      	beq.n	80026a8 <Warning_LowBattery+0x1c>
 80026a0:	4b15      	ldr	r3, [pc, #84]	@ (80026f8 <Warning_LowBattery+0x6c>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	2b06      	cmp	r3, #6
 80026a6:	d10b      	bne.n	80026c0 <Warning_LowBattery+0x34>
	{
		if(Low_Battery_Flg == 1)
 80026a8:	4b14      	ldr	r3, [pc, #80]	@ (80026fc <Warning_LowBattery+0x70>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d007      	beq.n	80026c0 <Warning_LowBattery+0x34>
		{

		}else
		{
			Low_Battery_Flg = 1;
 80026b0:	4b12      	ldr	r3, [pc, #72]	@ (80026fc <Warning_LowBattery+0x70>)
 80026b2:	2201      	movs	r2, #1
 80026b4:	701a      	strb	r2, [r3, #0]
			STMFLASH_Write(FLASH_SLAVE_LOWFLG,(uint16_t*)&Low_Battery_Flg,1);
 80026b6:	2201      	movs	r2, #1
 80026b8:	4910      	ldr	r1, [pc, #64]	@ (80026fc <Warning_LowBattery+0x70>)
 80026ba:	4811      	ldr	r0, [pc, #68]	@ (8002700 <Warning_LowBattery+0x74>)
 80026bc:	f000 f8f4 	bl	80028a8 <STMFLASH_Write>
		}

	}

	if(battery_level_state > boost_battery_level3)
 80026c0:	4b0d      	ldr	r3, [pc, #52]	@ (80026f8 <Warning_LowBattery+0x6c>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b08      	cmp	r3, #8
 80026c6:	d902      	bls.n	80026ce <Warning_LowBattery+0x42>
	{
		Low_Battery_Flg = 0;
 80026c8:	4b0c      	ldr	r3, [pc, #48]	@ (80026fc <Warning_LowBattery+0x70>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]
	}

	if(Charge_Time > 120000)
 80026ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002704 <Warning_LowBattery+0x78>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a0d      	ldr	r2, [pc, #52]	@ (8002708 <Warning_LowBattery+0x7c>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d90a      	bls.n	80026ee <Warning_LowBattery+0x62>
	{
		Charge_Time = 0;
 80026d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002704 <Warning_LowBattery+0x78>)
 80026da:	2200      	movs	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]
		Low_Battery_Flg = 0;
 80026de:	4b07      	ldr	r3, [pc, #28]	@ (80026fc <Warning_LowBattery+0x70>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	701a      	strb	r2, [r3, #0]

		STMFLASH_Write(FLASH_SLAVE_LOWFLG,(uint16_t*)&Low_Battery_Flg,1);
 80026e4:	2201      	movs	r2, #1
 80026e6:	4905      	ldr	r1, [pc, #20]	@ (80026fc <Warning_LowBattery+0x70>)
 80026e8:	4805      	ldr	r0, [pc, #20]	@ (8002700 <Warning_LowBattery+0x74>)
 80026ea:	f000 f8dd 	bl	80028a8 <STMFLASH_Write>
	}
}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	200007e8 	.word	0x200007e8
 80026f8:	20000026 	.word	0x20000026
 80026fc:	20000355 	.word	0x20000355
 8002700:	0800f400 	.word	0x0800f400
 8002704:	20000358 	.word	0x20000358
 8002708:	0001d4c0 	.word	0x0001d4c0

0800270c <SetPWMDutyCycleAndFrequency>:
#define TIM3_CLK 72000000
#define MIN_OUTPUT_FREQ 2
#define MAX_OUTPUT_FREQ 10000

static void SetPWMDutyCycleAndFrequency(uint32_t pulsetime)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
	uint32_t input_freq = 0;
 8002714:	2300      	movs	r3, #0
 8002716:	60fb      	str	r3, [r7, #12]
	uint32_t out_prescaler_value = 0;
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]
	uint32_t out_count_value = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	613b      	str	r3, [r7, #16]

	input_freq = 10000 / pulsetime;
 8002720:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	fbb2 f3f3 	udiv	r3, r2, r3
 800272a:	60fb      	str	r3, [r7, #12]

	if((input_freq > MAX_OUTPUT_FREQ) || (input_freq < MIN_OUTPUT_FREQ))
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002732:	4293      	cmp	r3, r2
 8002734:	d84c      	bhi.n	80027d0 <SetPWMDutyCycleAndFrequency+0xc4>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d949      	bls.n	80027d0 <SetPWMDutyCycleAndFrequency+0xc4>
	{
		return ;
	}

	if((input_freq >= 20) && (input_freq <= 10000))
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2b13      	cmp	r3, #19
 8002740:	d90d      	bls.n	800275e <SetPWMDutyCycleAndFrequency+0x52>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002748:	4293      	cmp	r3, r2
 800274a:	d808      	bhi.n	800275e <SetPWMDutyCycleAndFrequency+0x52>
	{
		out_prescaler_value = 720-1;
 800274c:	f240 23cf 	movw	r3, #719	@ 0x2cf
 8002750:	617b      	str	r3, [r7, #20]
		out_count_value = 1000000 / input_freq;
 8002752:	4a22      	ldr	r2, [pc, #136]	@ (80027dc <SetPWMDutyCycleAndFrequency+0xd0>)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	fbb2 f3f3 	udiv	r3, r2, r3
 800275a:	613b      	str	r3, [r7, #16]
 800275c:	e00d      	b.n	800277a <SetPWMDutyCycleAndFrequency+0x6e>
	}else if((input_freq >= 2) && (input_freq < 20))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d937      	bls.n	80027d4 <SetPWMDutyCycleAndFrequency+0xc8>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2b13      	cmp	r3, #19
 8002768:	d834      	bhi.n	80027d4 <SetPWMDutyCycleAndFrequency+0xc8>
	{
		out_prescaler_value = 7200-1;
 800276a:	f641 431f 	movw	r3, #7199	@ 0x1c1f
 800276e:	617b      	str	r3, [r7, #20]
		out_count_value = 100000 / input_freq;
 8002770:	4a1b      	ldr	r2, [pc, #108]	@ (80027e0 <SetPWMDutyCycleAndFrequency+0xd4>)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	fbb2 f3f3 	udiv	r3, r2, r3
 8002778:	613b      	str	r3, [r7, #16]
	{
		return ;
	}

	// 停止定时器
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 800277a:	2108      	movs	r1, #8
 800277c:	4819      	ldr	r0, [pc, #100]	@ (80027e4 <SetPWMDutyCycleAndFrequency+0xd8>)
 800277e:	f003 ffbd 	bl	80066fc <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop(&htim4);
 8002782:	4818      	ldr	r0, [pc, #96]	@ (80027e4 <SetPWMDutyCycleAndFrequency+0xd8>)
 8002784:	f003 fe48 	bl	8006418 <HAL_TIM_Base_Stop>

	__HAL_TIM_SET_PRESCALER(&htim4, out_prescaler_value);
 8002788:	4b16      	ldr	r3, [pc, #88]	@ (80027e4 <SetPWMDutyCycleAndFrequency+0xd8>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SetAutoreload(&htim4, out_count_value);
 8002790:	4b14      	ldr	r3, [pc, #80]	@ (80027e4 <SetPWMDutyCycleAndFrequency+0xd8>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002798:	4a12      	ldr	r2, [pc, #72]	@ (80027e4 <SetPWMDutyCycleAndFrequency+0xd8>)
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	60d3      	str	r3, [r2, #12]
	duty_count = out_count_value;
 800279e:	4a12      	ldr	r2, [pc, #72]	@ (80027e8 <SetPWMDutyCycleAndFrequency+0xdc>)
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	6013      	str	r3, [r2, #0]

	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 0);	//PWM_Ultra_A
 80027a4:	4b0f      	ldr	r3, [pc, #60]	@ (80027e4 <SetPWMDutyCycleAndFrequency+0xd8>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2200      	movs	r2, #0
 80027aa:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, (duty_count * duty_cycle_count / 100)); // 假设使用通道1	//PWM_Ultra_B
 80027ac:	4b0f      	ldr	r3, [pc, #60]	@ (80027ec <SetPWMDutyCycleAndFrequency+0xe0>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	461a      	mov	r2, r3
 80027b2:	4b0d      	ldr	r3, [pc, #52]	@ (80027e8 <SetPWMDutyCycleAndFrequency+0xdc>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	fb03 f202 	mul.w	r2, r3, r2
 80027ba:	4b0a      	ldr	r3, [pc, #40]	@ (80027e4 <SetPWMDutyCycleAndFrequency+0xd8>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	490c      	ldr	r1, [pc, #48]	@ (80027f0 <SetPWMDutyCycleAndFrequency+0xe4>)
 80027c0:	fba1 1202 	umull	r1, r2, r1, r2
 80027c4:	0952      	lsrs	r2, r2, #5
 80027c6:	63da      	str	r2, [r3, #60]	@ 0x3c
	//__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 100);

    // 更新并启动定时器
	HAL_TIM_Base_Start(&htim4);
 80027c8:	4806      	ldr	r0, [pc, #24]	@ (80027e4 <SetPWMDutyCycleAndFrequency+0xd8>)
 80027ca:	f003 fddb 	bl	8006384 <HAL_TIM_Base_Start>
 80027ce:	e002      	b.n	80027d6 <SetPWMDutyCycleAndFrequency+0xca>
		return ;
 80027d0:	bf00      	nop
 80027d2:	e000      	b.n	80027d6 <SetPWMDutyCycleAndFrequency+0xca>
		return ;
 80027d4:	bf00      	nop
    //HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
}
 80027d6:	3718      	adds	r7, #24
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	000f4240 	.word	0x000f4240
 80027e0:	000186a0 	.word	0x000186a0
 80027e4:	20000a70 	.word	0x20000a70
 80027e8:	20000050 	.word	0x20000050
 80027ec:	2000004a 	.word	0x2000004a
 80027f0:	51eb851f 	.word	0x51eb851f

080027f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027fa:	4b10      	ldr	r3, [pc, #64]	@ (800283c <MX_DMA_Init+0x48>)
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	4a0f      	ldr	r2, [pc, #60]	@ (800283c <MX_DMA_Init+0x48>)
 8002800:	f043 0301 	orr.w	r3, r3, #1
 8002804:	6153      	str	r3, [r2, #20]
 8002806:	4b0d      	ldr	r3, [pc, #52]	@ (800283c <MX_DMA_Init+0x48>)
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	607b      	str	r3, [r7, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
//  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
//  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002812:	2200      	movs	r2, #0
 8002814:	2100      	movs	r1, #0
 8002816:	200c      	movs	r0, #12
 8002818:	f002 f997 	bl	8004b4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800281c:	200c      	movs	r0, #12
 800281e:	f002 f9b0 	bl	8004b82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 1);
 8002822:	2201      	movs	r2, #1
 8002824:	2100      	movs	r1, #0
 8002826:	200d      	movs	r0, #13
 8002828:	f002 f98f 	bl	8004b4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800282c:	200d      	movs	r0, #13
 800282e:	f002 f9a8 	bl	8004b82 <HAL_NVIC_EnableIRQ>

}
 8002832:	bf00      	nop
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40021000 	.word	0x40021000

08002840 <STMFLASH_ReadHalfWord>:

FLASH_ProcessTypeDef p_Flash;
u16 STMFLASH_BUF[STM_SECTOR_SIZE/2];

u16 STMFLASH_ReadHalfWord(u32 faddr)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
	return *(vu16*)faddr;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	881b      	ldrh	r3, [r3, #0]
 800284c:	b29b      	uxth	r3, r3
}
 800284e:	4618      	mov	r0, r3
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <STMFLASH_Write_NoCheck>:

#if STM32_FLASH_WREN
void STMFLASH_Write_NoCheck(u32 WriteAddr,u16 *pBuffer,u16 NumToWrite)
{
 8002858:	b5b0      	push	{r4, r5, r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	4613      	mov	r3, r2
 8002864:	80fb      	strh	r3, [r7, #6]
	u16 i;
	for(i=0;i<NumToWrite;i++)
 8002866:	2300      	movs	r3, #0
 8002868:	82fb      	strh	r3, [r7, #22]
 800286a:	e014      	b.n	8002896 <STMFLASH_Write_NoCheck+0x3e>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,WriteAddr,pBuffer[i]);
 800286c:	8afb      	ldrh	r3, [r7, #22]
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	68ba      	ldr	r2, [r7, #8]
 8002872:	4413      	add	r3, r2
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	b29b      	uxth	r3, r3
 8002878:	2200      	movs	r2, #0
 800287a:	461c      	mov	r4, r3
 800287c:	4615      	mov	r5, r2
 800287e:	4622      	mov	r2, r4
 8002880:	462b      	mov	r3, r5
 8002882:	68f9      	ldr	r1, [r7, #12]
 8002884:	2001      	movs	r0, #1
 8002886:	f002 fc39 	bl	80050fc <HAL_FLASH_Program>
	    WriteAddr+=2;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	3302      	adds	r3, #2
 800288e:	60fb      	str	r3, [r7, #12]
	for(i=0;i<NumToWrite;i++)
 8002890:	8afb      	ldrh	r3, [r7, #22]
 8002892:	3301      	adds	r3, #1
 8002894:	82fb      	strh	r3, [r7, #22]
 8002896:	8afa      	ldrh	r2, [r7, #22]
 8002898:	88fb      	ldrh	r3, [r7, #6]
 800289a:	429a      	cmp	r2, r3
 800289c:	d3e6      	bcc.n	800286c <STMFLASH_Write_NoCheck+0x14>
	}
}
 800289e:	bf00      	nop
 80028a0:	bf00      	nop
 80028a2:	3718      	adds	r7, #24
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bdb0      	pop	{r4, r5, r7, pc}

080028a8 <STMFLASH_Write>:

void STMFLASH_Write(u32 WriteAddr,u16 *pBuffer,u16 NumToWrite)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b088      	sub	sp, #32
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	4613      	mov	r3, r2
 80028b4:	80fb      	strh	r3, [r7, #6]
	u16 secoff;
	u16 secremain;
 	u16 i;
	u32 offaddr;

	if(WriteAddr<STM32_FLASH_BASE||(WriteAddr>=(STM32_FLASH_BASE+1024*STM32_FLASH_SIZE)))return;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028bc:	f0c0 80a3 	bcc.w	8002a06 <STMFLASH_Write+0x15e>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	4a53      	ldr	r2, [pc, #332]	@ (8002a10 <STMFLASH_Write+0x168>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	f200 809e 	bhi.w	8002a06 <STMFLASH_Write+0x15e>

	HAL_FLASH_Unlock();
 80028ca:	f002 fc87 	bl	80051dc <HAL_FLASH_Unlock>
	offaddr=WriteAddr-STM32_FLASH_BASE;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 80028d4:	613b      	str	r3, [r7, #16]
	secpos=offaddr/STM_SECTOR_SIZE;
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	0a9b      	lsrs	r3, r3, #10
 80028da:	61fb      	str	r3, [r7, #28]
	secoff=(offaddr%STM_SECTOR_SIZE)/2;
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028e2:	085b      	lsrs	r3, r3, #1
 80028e4:	837b      	strh	r3, [r7, #26]
	secremain=STM_SECTOR_SIZE/2-secoff;
 80028e6:	8b7b      	ldrh	r3, [r7, #26]
 80028e8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80028ec:	833b      	strh	r3, [r7, #24]
	if(NumToWrite<=secremain)secremain=NumToWrite;
 80028ee:	88fa      	ldrh	r2, [r7, #6]
 80028f0:	8b3b      	ldrh	r3, [r7, #24]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d801      	bhi.n	80028fa <STMFLASH_Write+0x52>
 80028f6:	88fb      	ldrh	r3, [r7, #6]
 80028f8:	833b      	strh	r3, [r7, #24]
	while(1)
	{
		STMFLASH_Read(secpos*STM_SECTOR_SIZE+STM32_FLASH_BASE,STMFLASH_BUF,STM_SECTOR_SIZE/2);
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8002900:	029b      	lsls	r3, r3, #10
 8002902:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002906:	4943      	ldr	r1, [pc, #268]	@ (8002a14 <STMFLASH_Write+0x16c>)
 8002908:	4618      	mov	r0, r3
 800290a:	f000 f887 	bl	8002a1c <STMFLASH_Read>
		for(i=0;i<secremain;i++)
 800290e:	2300      	movs	r3, #0
 8002910:	82fb      	strh	r3, [r7, #22]
 8002912:	e00c      	b.n	800292e <STMFLASH_Write+0x86>
		{
			if(STMFLASH_BUF[secoff+i]!=0XFFFF)break;
 8002914:	8b7a      	ldrh	r2, [r7, #26]
 8002916:	8afb      	ldrh	r3, [r7, #22]
 8002918:	4413      	add	r3, r2
 800291a:	4a3e      	ldr	r2, [pc, #248]	@ (8002a14 <STMFLASH_Write+0x16c>)
 800291c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002920:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002924:	4293      	cmp	r3, r2
 8002926:	d107      	bne.n	8002938 <STMFLASH_Write+0x90>
		for(i=0;i<secremain;i++)
 8002928:	8afb      	ldrh	r3, [r7, #22]
 800292a:	3301      	adds	r3, #1
 800292c:	82fb      	strh	r3, [r7, #22]
 800292e:	8afa      	ldrh	r2, [r7, #22]
 8002930:	8b3b      	ldrh	r3, [r7, #24]
 8002932:	429a      	cmp	r2, r3
 8002934:	d3ee      	bcc.n	8002914 <STMFLASH_Write+0x6c>
 8002936:	e000      	b.n	800293a <STMFLASH_Write+0x92>
			if(STMFLASH_BUF[secoff+i]!=0XFFFF)break;
 8002938:	bf00      	nop
		}
		if(i<secremain)
 800293a:	8afa      	ldrh	r2, [r7, #22]
 800293c:	8b3b      	ldrh	r3, [r7, #24]
 800293e:	429a      	cmp	r2, r3
 8002940:	d230      	bcs.n	80029a4 <STMFLASH_Write+0xfc>
		{
			Flash_PageErase(secpos*STM_SECTOR_SIZE+STM32_FLASH_BASE);
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8002948:	029b      	lsls	r3, r3, #10
 800294a:	4618      	mov	r0, r3
 800294c:	f000 f888 	bl	8002a60 <Flash_PageErase>
			FLASH_WaitForLastOperation(FLASH_WAITETIME);
 8002950:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002954:	f002 fc94 	bl	8005280 <FLASH_WaitForLastOperation>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002958:	4b2f      	ldr	r3, [pc, #188]	@ (8002a18 <STMFLASH_Write+0x170>)
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	4a2e      	ldr	r2, [pc, #184]	@ (8002a18 <STMFLASH_Write+0x170>)
 800295e:	f023 0302 	bic.w	r3, r3, #2
 8002962:	6113      	str	r3, [r2, #16]

			for(i=0;i<secremain;i++)
 8002964:	2300      	movs	r3, #0
 8002966:	82fb      	strh	r3, [r7, #22]
 8002968:	e00d      	b.n	8002986 <STMFLASH_Write+0xde>
			{
				STMFLASH_BUF[i+secoff]=pBuffer[i];
 800296a:	8afb      	ldrh	r3, [r7, #22]
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	68ba      	ldr	r2, [r7, #8]
 8002970:	441a      	add	r2, r3
 8002972:	8af9      	ldrh	r1, [r7, #22]
 8002974:	8b7b      	ldrh	r3, [r7, #26]
 8002976:	440b      	add	r3, r1
 8002978:	8811      	ldrh	r1, [r2, #0]
 800297a:	4a26      	ldr	r2, [pc, #152]	@ (8002a14 <STMFLASH_Write+0x16c>)
 800297c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(i=0;i<secremain;i++)
 8002980:	8afb      	ldrh	r3, [r7, #22]
 8002982:	3301      	adds	r3, #1
 8002984:	82fb      	strh	r3, [r7, #22]
 8002986:	8afa      	ldrh	r2, [r7, #22]
 8002988:	8b3b      	ldrh	r3, [r7, #24]
 800298a:	429a      	cmp	r2, r3
 800298c:	d3ed      	bcc.n	800296a <STMFLASH_Write+0xc2>
			}
			STMFLASH_Write_NoCheck(secpos*STM_SECTOR_SIZE+STM32_FLASH_BASE,STMFLASH_BUF,STM_SECTOR_SIZE/2);
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8002994:	029b      	lsls	r3, r3, #10
 8002996:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800299a:	491e      	ldr	r1, [pc, #120]	@ (8002a14 <STMFLASH_Write+0x16c>)
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff ff5b 	bl	8002858 <STMFLASH_Write_NoCheck>
 80029a2:	e009      	b.n	80029b8 <STMFLASH_Write+0x110>
		}else
		{
			FLASH_WaitForLastOperation(FLASH_WAITETIME);
 80029a4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80029a8:	f002 fc6a 	bl	8005280 <FLASH_WaitForLastOperation>
			STMFLASH_Write_NoCheck(WriteAddr,pBuffer,secremain);
 80029ac:	8b3b      	ldrh	r3, [r7, #24]
 80029ae:	461a      	mov	r2, r3
 80029b0:	68b9      	ldr	r1, [r7, #8]
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f7ff ff50 	bl	8002858 <STMFLASH_Write_NoCheck>
		}
		if(NumToWrite==secremain)break;
 80029b8:	88fa      	ldrh	r2, [r7, #6]
 80029ba:	8b3b      	ldrh	r3, [r7, #24]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d01e      	beq.n	80029fe <STMFLASH_Write+0x156>
		else//写入未结束
		{
			secpos++;
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	3301      	adds	r3, #1
 80029c4:	61fb      	str	r3, [r7, #28]
			secoff=0;
 80029c6:	2300      	movs	r3, #0
 80029c8:	837b      	strh	r3, [r7, #26]
		   	pBuffer+=secremain;
 80029ca:	8b3b      	ldrh	r3, [r7, #24]
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	68ba      	ldr	r2, [r7, #8]
 80029d0:	4413      	add	r3, r2
 80029d2:	60bb      	str	r3, [r7, #8]
			WriteAddr+=secremain*2;
 80029d4:	8b3b      	ldrh	r3, [r7, #24]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	461a      	mov	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	4413      	add	r3, r2
 80029de:	60fb      	str	r3, [r7, #12]
		   	NumToWrite-=secremain;
 80029e0:	88fa      	ldrh	r2, [r7, #6]
 80029e2:	8b3b      	ldrh	r3, [r7, #24]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	80fb      	strh	r3, [r7, #6]
			if(NumToWrite>(STM_SECTOR_SIZE/2))secremain=STM_SECTOR_SIZE/2;
 80029e8:	88fb      	ldrh	r3, [r7, #6]
 80029ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029ee:	d903      	bls.n	80029f8 <STMFLASH_Write+0x150>
 80029f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029f4:	833b      	strh	r3, [r7, #24]
 80029f6:	e780      	b.n	80028fa <STMFLASH_Write+0x52>
			else secremain=NumToWrite;
 80029f8:	88fb      	ldrh	r3, [r7, #6]
 80029fa:	833b      	strh	r3, [r7, #24]
		STMFLASH_Read(secpos*STM_SECTOR_SIZE+STM32_FLASH_BASE,STMFLASH_BUF,STM_SECTOR_SIZE/2);
 80029fc:	e77d      	b.n	80028fa <STMFLASH_Write+0x52>
		if(NumToWrite==secremain)break;
 80029fe:	bf00      	nop
		}
	};
	HAL_FLASH_Lock();
 8002a00:	f002 fc12 	bl	8005228 <HAL_FLASH_Lock>
 8002a04:	e000      	b.n	8002a08 <STMFLASH_Write+0x160>
	if(WriteAddr<STM32_FLASH_BASE||(WriteAddr>=(STM32_FLASH_BASE+1024*STM32_FLASH_SIZE)))return;
 8002a06:	bf00      	nop
}
 8002a08:	3720      	adds	r7, #32
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	0801ffff 	.word	0x0801ffff
 8002a14:	20000398 	.word	0x20000398
 8002a18:	40022000 	.word	0x40022000

08002a1c <STMFLASH_Read>:
#endif

void STMFLASH_Read(u32 ReadAddr,u16 *pBuffer,u16 NumToRead)
{
 8002a1c:	b590      	push	{r4, r7, lr}
 8002a1e:	b087      	sub	sp, #28
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	4613      	mov	r3, r2
 8002a28:	80fb      	strh	r3, [r7, #6]
	u16 i;
	for(i=0;i<NumToRead;i++)
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	82fb      	strh	r3, [r7, #22]
 8002a2e:	e00e      	b.n	8002a4e <STMFLASH_Read+0x32>
	{
		pBuffer[i]=STMFLASH_ReadHalfWord(ReadAddr);
 8002a30:	8afb      	ldrh	r3, [r7, #22]
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	68ba      	ldr	r2, [r7, #8]
 8002a36:	18d4      	adds	r4, r2, r3
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f7ff ff01 	bl	8002840 <STMFLASH_ReadHalfWord>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	8023      	strh	r3, [r4, #0]
		ReadAddr+=2;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	3302      	adds	r3, #2
 8002a46:	60fb      	str	r3, [r7, #12]
	for(i=0;i<NumToRead;i++)
 8002a48:	8afb      	ldrh	r3, [r7, #22]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	82fb      	strh	r3, [r7, #22]
 8002a4e:	8afa      	ldrh	r2, [r7, #22]
 8002a50:	88fb      	ldrh	r3, [r7, #6]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d3ec      	bcc.n	8002a30 <STMFLASH_Read+0x14>
	}
}
 8002a56:	bf00      	nop
 8002a58:	bf00      	nop
 8002a5a:	371c      	adds	r7, #28
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd90      	pop	{r4, r7, pc}

08002a60 <Flash_PageErase>:

void Flash_PageErase(uint32_t PageAddress)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]

  p_Flash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002a68:	4b0b      	ldr	r3, [pc, #44]	@ (8002a98 <Flash_PageErase+0x38>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif

    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a9c <Flash_PageErase+0x3c>)
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	4a0a      	ldr	r2, [pc, #40]	@ (8002a9c <Flash_PageErase+0x3c>)
 8002a74:	f043 0302 	orr.w	r3, r3, #2
 8002a78:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002a7a:	4a08      	ldr	r2, [pc, #32]	@ (8002a9c <Flash_PageErase+0x3c>)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002a80:	4b06      	ldr	r3, [pc, #24]	@ (8002a9c <Flash_PageErase+0x3c>)
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	4a05      	ldr	r2, [pc, #20]	@ (8002a9c <Flash_PageErase+0x3c>)
 8002a86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a8a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)

  }
#endif
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	20000378 	.word	0x20000378
 8002a9c:	40022000 	.word	0x40022000

08002aa0 <Encrypt_UidGet>:
 * @param   none
 * @retval  none
 * @func	获取单片机的UID号
 */
static void Encrypt_UidGet(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
	UID[0] = HAL_GetUIDw0();
 8002aa4:	f001 fae2 	bl	800406c <HAL_GetUIDw0>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	4a07      	ldr	r2, [pc, #28]	@ (8002ac8 <Encrypt_UidGet+0x28>)
 8002aac:	6013      	str	r3, [r2, #0]
	UID[1] = HAL_GetUIDw1();
 8002aae:	f001 fae7 	bl	8004080 <HAL_GetUIDw1>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	4a04      	ldr	r2, [pc, #16]	@ (8002ac8 <Encrypt_UidGet+0x28>)
 8002ab6:	6053      	str	r3, [r2, #4]
	UID[2] = HAL_GetUIDw2();
 8002ab8:	f001 faec 	bl	8004094 <HAL_GetUIDw2>
 8002abc:	4603      	mov	r3, r0
 8002abe:	4a02      	ldr	r2, [pc, #8]	@ (8002ac8 <Encrypt_UidGet+0x28>)
 8002ac0:	6093      	str	r3, [r2, #8]
}
 8002ac2:	bf00      	nop
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	200007a8 	.word	0x200007a8

08002acc <Encrypt_UidSecretKey>:
 * @param   none
 * @retval  none
 * @func	获取UID密钥
 */
static void Encrypt_UidSecretKey(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
	UID_Key[0] = UID[0] ^ ENCRYPTION_KEY;
 8002ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8002afc <Encrypt_UidSecretKey+0x30>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f083 33c3 	eor.w	r3, r3, #3284386755	@ 0xc3c3c3c3
 8002ad8:	4a09      	ldr	r2, [pc, #36]	@ (8002b00 <Encrypt_UidSecretKey+0x34>)
 8002ada:	6013      	str	r3, [r2, #0]
	UID_Key[1] = UID[1] ^ ENCRYPTION_KEY;
 8002adc:	4b07      	ldr	r3, [pc, #28]	@ (8002afc <Encrypt_UidSecretKey+0x30>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f083 33c3 	eor.w	r3, r3, #3284386755	@ 0xc3c3c3c3
 8002ae4:	4a06      	ldr	r2, [pc, #24]	@ (8002b00 <Encrypt_UidSecretKey+0x34>)
 8002ae6:	6053      	str	r3, [r2, #4]
	UID_Key[2] = UID[2] ^ ENCRYPTION_KEY;
 8002ae8:	4b04      	ldr	r3, [pc, #16]	@ (8002afc <Encrypt_UidSecretKey+0x30>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f083 33c3 	eor.w	r3, r3, #3284386755	@ 0xc3c3c3c3
 8002af0:	4a03      	ldr	r2, [pc, #12]	@ (8002b00 <Encrypt_UidSecretKey+0x34>)
 8002af2:	6093      	str	r3, [r2, #8]
}
 8002af4:	bf00      	nop
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc80      	pop	{r7}
 8002afa:	4770      	bx	lr
 8002afc:	200007a8 	.word	0x200007a8
 8002b00:	200007b4 	.word	0x200007b4

08002b04 <Encrypt_ApplicaStar>:
 * @param   none
 * @retval  none
 * @func	程序启动，上电读取到的密钥与存在Flash的密钥对比
 */
void Encrypt_ApplicaStar(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
	Encrypt_UidGet();
 8002b08:	f7ff ffca 	bl	8002aa0 <Encrypt_UidGet>
	Encrypt_UidSecretKey();
 8002b0c:	f7ff ffde 	bl	8002acc <Encrypt_UidSecretKey>

	STMFLASH_Read(FLASH_SLAVE_ENCRYPT,Uid_Key_Read.uid_key_16u,6);
 8002b10:	2206      	movs	r2, #6
 8002b12:	4921      	ldr	r1, [pc, #132]	@ (8002b98 <Encrypt_ApplicaStar+0x94>)
 8002b14:	4821      	ldr	r0, [pc, #132]	@ (8002b9c <Encrypt_ApplicaStar+0x98>)
 8002b16:	f7ff ff81 	bl	8002a1c <STMFLASH_Read>

	if((Uid_Key_Read.uid_key_32u[0] == 0xFFFFFFFF) && \
 8002b1a:	4b1f      	ldr	r3, [pc, #124]	@ (8002b98 <Encrypt_ApplicaStar+0x94>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b22:	d124      	bne.n	8002b6e <Encrypt_ApplicaStar+0x6a>
	   (Uid_Key_Read.uid_key_32u[1] == 0xFFFFFFFF) && \
 8002b24:	4b1c      	ldr	r3, [pc, #112]	@ (8002b98 <Encrypt_ApplicaStar+0x94>)
 8002b26:	685b      	ldr	r3, [r3, #4]
	if((Uid_Key_Read.uid_key_32u[0] == 0xFFFFFFFF) && \
 8002b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b2c:	d11f      	bne.n	8002b6e <Encrypt_ApplicaStar+0x6a>
	   (Uid_Key_Read.uid_key_32u[2] == 0xFFFFFFFF))
 8002b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8002b98 <Encrypt_ApplicaStar+0x94>)
 8002b30:	689b      	ldr	r3, [r3, #8]
	   (Uid_Key_Read.uid_key_32u[1] == 0xFFFFFFFF) && \
 8002b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b36:	d11a      	bne.n	8002b6e <Encrypt_ApplicaStar+0x6a>
	{
		//第一次上电程序保存密钥
		write_uid_flg = 1;
 8002b38:	4b19      	ldr	r3, [pc, #100]	@ (8002ba0 <Encrypt_ApplicaStar+0x9c>)
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	701a      	strb	r2, [r3, #0]
		Uid_Key_Read.uid_key_32u[0] = UID[0] ^ ENCRYPTION_KEY;
 8002b3e:	4b19      	ldr	r3, [pc, #100]	@ (8002ba4 <Encrypt_ApplicaStar+0xa0>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f083 33c3 	eor.w	r3, r3, #3284386755	@ 0xc3c3c3c3
 8002b46:	4a14      	ldr	r2, [pc, #80]	@ (8002b98 <Encrypt_ApplicaStar+0x94>)
 8002b48:	6013      	str	r3, [r2, #0]
		Uid_Key_Read.uid_key_32u[1] = UID[1] ^ ENCRYPTION_KEY;
 8002b4a:	4b16      	ldr	r3, [pc, #88]	@ (8002ba4 <Encrypt_ApplicaStar+0xa0>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f083 33c3 	eor.w	r3, r3, #3284386755	@ 0xc3c3c3c3
 8002b52:	4a11      	ldr	r2, [pc, #68]	@ (8002b98 <Encrypt_ApplicaStar+0x94>)
 8002b54:	6053      	str	r3, [r2, #4]
		Uid_Key_Read.uid_key_32u[2] = (UID[2] ^ ENCRYPTION_KEY);
 8002b56:	4b13      	ldr	r3, [pc, #76]	@ (8002ba4 <Encrypt_ApplicaStar+0xa0>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f083 33c3 	eor.w	r3, r3, #3284386755	@ 0xc3c3c3c3
 8002b5e:	4a0e      	ldr	r2, [pc, #56]	@ (8002b98 <Encrypt_ApplicaStar+0x94>)
 8002b60:	6093      	str	r3, [r2, #8]
		STMFLASH_Write(FLASH_SLAVE_ENCRYPT,Uid_Key_Read.uid_key_16u,6);
 8002b62:	2206      	movs	r2, #6
 8002b64:	490c      	ldr	r1, [pc, #48]	@ (8002b98 <Encrypt_ApplicaStar+0x94>)
 8002b66:	480d      	ldr	r0, [pc, #52]	@ (8002b9c <Encrypt_ApplicaStar+0x98>)
 8002b68:	f7ff fe9e 	bl	80028a8 <STMFLASH_Write>
		while(1);
	}else
	{

	}
}
 8002b6c:	e013      	b.n	8002b96 <Encrypt_ApplicaStar+0x92>
	}else if((UID_Key[0] != Uid_Key_Read.uid_key_32u[0]) || (UID_Key[1] != Uid_Key_Read.uid_key_32u[1]) || (UID_Key[2] != Uid_Key_Read.uid_key_32u[2]))
 8002b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ba8 <Encrypt_ApplicaStar+0xa4>)
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	4b09      	ldr	r3, [pc, #36]	@ (8002b98 <Encrypt_ApplicaStar+0x94>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d10c      	bne.n	8002b94 <Encrypt_ApplicaStar+0x90>
 8002b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba8 <Encrypt_ApplicaStar+0xa4>)
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	4b06      	ldr	r3, [pc, #24]	@ (8002b98 <Encrypt_ApplicaStar+0x94>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d106      	bne.n	8002b94 <Encrypt_ApplicaStar+0x90>
 8002b86:	4b08      	ldr	r3, [pc, #32]	@ (8002ba8 <Encrypt_ApplicaStar+0xa4>)
 8002b88:	689a      	ldr	r2, [r3, #8]
 8002b8a:	4b03      	ldr	r3, [pc, #12]	@ (8002b98 <Encrypt_ApplicaStar+0x94>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d100      	bne.n	8002b94 <Encrypt_ApplicaStar+0x90>
}
 8002b92:	e000      	b.n	8002b96 <Encrypt_ApplicaStar+0x92>
		while(1);
 8002b94:	e7fe      	b.n	8002b94 <Encrypt_ApplicaStar+0x90>
}
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	20000798 	.word	0x20000798
 8002b9c:	08010800 	.word	0x08010800
 8002ba0:	200007a4 	.word	0x200007a4
 8002ba4:	200007a8 	.word	0x200007a8
 8002ba8:	200007b4 	.word	0x200007b4

08002bac <HAL_GPIO_EXTI_Callback>:
uint8_t BatteryLevelBuf[RECVCOUNT] = {0};
uint8_t ShuntDownFlg = 2;
extern uint32_t receivetime;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	80fb      	strh	r3, [r7, #6]
	uint32_t new_charge_stick = 0;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60fb      	str	r3, [r7, #12]
	static uint8_t ReceiveCount = 0;
	static uint32_t old_charge_stick = 0;

	if(GPIO_Pin == CHARGE_STATE_Pin){
 8002bba:	88fb      	ldrh	r3, [r7, #6]
 8002bbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bc0:	f040 80ca 	bne.w	8002d58 <HAL_GPIO_EXTI_Callback+0x1ac>
		if(startflag == 0){
 8002bc4:	4b66      	ldr	r3, [pc, #408]	@ (8002d60 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d129      	bne.n	8002c20 <HAL_GPIO_EXTI_Callback+0x74>
			if(1 == HAL_GPIO_ReadPin(CHARGE_STATE_GPIO_Port, CHARGE_STATE_Pin)){
 8002bcc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002bd0:	4864      	ldr	r0, [pc, #400]	@ (8002d64 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8002bd2:	f002 fd6f 	bl	80056b4 <HAL_GPIO_ReadPin>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d104      	bne.n	8002be6 <HAL_GPIO_EXTI_Callback+0x3a>
				last_time = receivetime;
 8002bdc:	4b62      	ldr	r3, [pc, #392]	@ (8002d68 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a62      	ldr	r2, [pc, #392]	@ (8002d6c <HAL_GPIO_EXTI_Callback+0x1c0>)
 8002be2:	6013      	str	r3, [r2, #0]
 8002be4:	e04a      	b.n	8002c7c <HAL_GPIO_EXTI_Callback+0xd0>
			}else{
				if((receivetime - last_time >=38)&&(receivetime - last_time <= 41)){
 8002be6:	4b60      	ldr	r3, [pc, #384]	@ (8002d68 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	4b60      	ldr	r3, [pc, #384]	@ (8002d6c <HAL_GPIO_EXTI_Callback+0x1c0>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b25      	cmp	r3, #37	@ 0x25
 8002bf2:	d90e      	bls.n	8002c12 <HAL_GPIO_EXTI_Callback+0x66>
 8002bf4:	4b5c      	ldr	r3, [pc, #368]	@ (8002d68 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	4b5c      	ldr	r3, [pc, #368]	@ (8002d6c <HAL_GPIO_EXTI_Callback+0x1c0>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b29      	cmp	r3, #41	@ 0x29
 8002c00:	d807      	bhi.n	8002c12 <HAL_GPIO_EXTI_Callback+0x66>
					startflag = 1;
 8002c02:	4b57      	ldr	r3, [pc, #348]	@ (8002d60 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8002c04:	2201      	movs	r2, #1
 8002c06:	701a      	strb	r2, [r3, #0]
					last_time = receivetime;
 8002c08:	4b57      	ldr	r3, [pc, #348]	@ (8002d68 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a57      	ldr	r2, [pc, #348]	@ (8002d6c <HAL_GPIO_EXTI_Callback+0x1c0>)
 8002c0e:	6013      	str	r3, [r2, #0]
 8002c10:	e034      	b.n	8002c7c <HAL_GPIO_EXTI_Callback+0xd0>
				}else{
					receivetime = 0;
 8002c12:	4b55      	ldr	r3, [pc, #340]	@ (8002d68 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
					last_time = 0;
 8002c18:	4b54      	ldr	r3, [pc, #336]	@ (8002d6c <HAL_GPIO_EXTI_Callback+0x1c0>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	e02d      	b.n	8002c7c <HAL_GPIO_EXTI_Callback+0xd0>
				}
			}
		}else{
			if(1 == HAL_GPIO_ReadPin(CHARGE_STATE_GPIO_Port, CHARGE_STATE_Pin)){
 8002c20:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002c24:	484f      	ldr	r0, [pc, #316]	@ (8002d64 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8002c26:	f002 fd45 	bl	80056b4 <HAL_GPIO_ReadPin>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d121      	bne.n	8002c74 <HAL_GPIO_EXTI_Callback+0xc8>
				interrupt_num++;
 8002c30:	4b4f      	ldr	r3, [pc, #316]	@ (8002d70 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	3301      	adds	r3, #1
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	4b4d      	ldr	r3, [pc, #308]	@ (8002d70 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8002c3a:	701a      	strb	r2, [r3, #0]
				receive_battery_state_data = receive_battery_state_data << 1;
 8002c3c:	4b4d      	ldr	r3, [pc, #308]	@ (8002d74 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	b2da      	uxtb	r2, r3
 8002c44:	4b4b      	ldr	r3, [pc, #300]	@ (8002d74 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8002c46:	701a      	strb	r2, [r3, #0]
				if((receivetime - last_time >= 3)&&(receivetime - last_time <= 4)){
 8002c48:	4b47      	ldr	r3, [pc, #284]	@ (8002d68 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	4b47      	ldr	r3, [pc, #284]	@ (8002d6c <HAL_GPIO_EXTI_Callback+0x1c0>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d912      	bls.n	8002c7c <HAL_GPIO_EXTI_Callback+0xd0>
 8002c56:	4b44      	ldr	r3, [pc, #272]	@ (8002d68 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	4b44      	ldr	r3, [pc, #272]	@ (8002d6c <HAL_GPIO_EXTI_Callback+0x1c0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b04      	cmp	r3, #4
 8002c62:	d80b      	bhi.n	8002c7c <HAL_GPIO_EXTI_Callback+0xd0>
					receive_battery_state_data = receive_battery_state_data | 0x01;
 8002c64:	4b43      	ldr	r3, [pc, #268]	@ (8002d74 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	f043 0301 	orr.w	r3, r3, #1
 8002c6c:	b2da      	uxtb	r2, r3
 8002c6e:	4b41      	ldr	r3, [pc, #260]	@ (8002d74 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8002c70:	701a      	strb	r2, [r3, #0]
 8002c72:	e003      	b.n	8002c7c <HAL_GPIO_EXTI_Callback+0xd0>
				}
			}else{
				last_time = receivetime;
 8002c74:	4b3c      	ldr	r3, [pc, #240]	@ (8002d68 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a3c      	ldr	r2, [pc, #240]	@ (8002d6c <HAL_GPIO_EXTI_Callback+0x1c0>)
 8002c7a:	6013      	str	r3, [r2, #0]
			}
		}
		if(interrupt_num == 7){
 8002c7c:	4b3c      	ldr	r3, [pc, #240]	@ (8002d70 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b07      	cmp	r3, #7
 8002c82:	d169      	bne.n	8002d58 <HAL_GPIO_EXTI_Callback+0x1ac>
			receive_battery_state_data = receive_battery_state_data << 1;
 8002c84:	4b3b      	ldr	r3, [pc, #236]	@ (8002d74 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	4b39      	ldr	r3, [pc, #228]	@ (8002d74 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8002c8e:	701a      	strb	r2, [r3, #0]
			BatteryLevelBuf[ReceiveCount] = receive_battery_state_data;
 8002c90:	4b39      	ldr	r3, [pc, #228]	@ (8002d78 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	461a      	mov	r2, r3
 8002c96:	4b37      	ldr	r3, [pc, #220]	@ (8002d74 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8002c98:	7819      	ldrb	r1, [r3, #0]
 8002c9a:	4b38      	ldr	r3, [pc, #224]	@ (8002d7c <HAL_GPIO_EXTI_Callback+0x1d0>)
 8002c9c:	5499      	strb	r1, [r3, r2]
			//判断充电最低或者充电但电流为0时，为充电状态，即将进入关机；
			if(((receive_battery_state_data & 0x02) && ((receive_battery_state_data & 0x80) == 0)) ||
 8002c9e:	4b35      	ldr	r3, [pc, #212]	@ (8002d74 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d004      	beq.n	8002cb4 <HAL_GPIO_EXTI_Callback+0x108>
 8002caa:	4b32      	ldr	r3, [pc, #200]	@ (8002d74 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	b25b      	sxtb	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	da0a      	bge.n	8002cca <HAL_GPIO_EXTI_Callback+0x11e>
				(((receive_battery_state_data & 0x80) == 0) && ((receive_battery_state_data & 0x30) != 0)))
 8002cb4:	4b2f      	ldr	r3, [pc, #188]	@ (8002d74 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	b25b      	sxtb	r3, r3
			if(((receive_battery_state_data & 0x02) && ((receive_battery_state_data & 0x80) == 0)) ||
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	db16      	blt.n	8002cec <HAL_GPIO_EXTI_Callback+0x140>
				(((receive_battery_state_data & 0x80) == 0) && ((receive_battery_state_data & 0x30) != 0)))
 8002cbe:	4b2d      	ldr	r3, [pc, #180]	@ (8002d74 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d010      	beq.n	8002cec <HAL_GPIO_EXTI_Callback+0x140>
			{
				new_charge_stick = HAL_GetTick();
 8002cca:	f001 f9a1 	bl	8004010 <HAL_GetTick>
 8002cce:	60f8      	str	r0, [r7, #12]
				if((new_charge_stick - old_charge_stick) > 500)
 8002cd0:	4b2b      	ldr	r3, [pc, #172]	@ (8002d80 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002cdc:	d920      	bls.n	8002d20 <HAL_GPIO_EXTI_Callback+0x174>
				{
					ShuntDownFlg = 1;
 8002cde:	4b29      	ldr	r3, [pc, #164]	@ (8002d84 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	701a      	strb	r2, [r3, #0]
					old_charge_stick = new_charge_stick;
 8002ce4:	4a26      	ldr	r2, [pc, #152]	@ (8002d80 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6013      	str	r3, [r2, #0]
				if((new_charge_stick - old_charge_stick) > 500)
 8002cea:	e019      	b.n	8002d20 <HAL_GPIO_EXTI_Callback+0x174>
				}
			}else
			{
				if(ShuntDownFlg == 1)
 8002cec:	4b25      	ldr	r3, [pc, #148]	@ (8002d84 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d10f      	bne.n	8002d14 <HAL_GPIO_EXTI_Callback+0x168>
				{
					BatteryLevelBuf[0] = receive_battery_state_data;
 8002cf4:	4b1f      	ldr	r3, [pc, #124]	@ (8002d74 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8002cf6:	781a      	ldrb	r2, [r3, #0]
 8002cf8:	4b20      	ldr	r3, [pc, #128]	@ (8002d7c <HAL_GPIO_EXTI_Callback+0x1d0>)
 8002cfa:	701a      	strb	r2, [r3, #0]
					BatteryLevelBuf[1] = receive_battery_state_data;
 8002cfc:	4b1d      	ldr	r3, [pc, #116]	@ (8002d74 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8002cfe:	781a      	ldrb	r2, [r3, #0]
 8002d00:	4b1e      	ldr	r3, [pc, #120]	@ (8002d7c <HAL_GPIO_EXTI_Callback+0x1d0>)
 8002d02:	705a      	strb	r2, [r3, #1]
					BatteryLevelBuf[2] = receive_battery_state_data;
 8002d04:	4b1b      	ldr	r3, [pc, #108]	@ (8002d74 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8002d06:	781a      	ldrb	r2, [r3, #0]
 8002d08:	4b1c      	ldr	r3, [pc, #112]	@ (8002d7c <HAL_GPIO_EXTI_Callback+0x1d0>)
 8002d0a:	709a      	strb	r2, [r3, #2]
					BatteryLevelBuf[3] = receive_battery_state_data;
 8002d0c:	4b19      	ldr	r3, [pc, #100]	@ (8002d74 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8002d0e:	781a      	ldrb	r2, [r3, #0]
 8002d10:	4b1a      	ldr	r3, [pc, #104]	@ (8002d7c <HAL_GPIO_EXTI_Callback+0x1d0>)
 8002d12:	70da      	strb	r2, [r3, #3]
				}
				new_charge_stick = HAL_GetTick();
 8002d14:	f001 f97c 	bl	8004010 <HAL_GetTick>
 8002d18:	60f8      	str	r0, [r7, #12]
				old_charge_stick = new_charge_stick;
 8002d1a:	4a19      	ldr	r2, [pc, #100]	@ (8002d80 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6013      	str	r3, [r2, #0]
			}
			ReceiveCount++;
 8002d20:	4b15      	ldr	r3, [pc, #84]	@ (8002d78 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	3301      	adds	r3, #1
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	4b13      	ldr	r3, [pc, #76]	@ (8002d78 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8002d2a:	701a      	strb	r2, [r3, #0]
			if(ReceiveCount > (RECVCOUNT-1))
 8002d2c:	4b12      	ldr	r3, [pc, #72]	@ (8002d78 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b03      	cmp	r3, #3
 8002d32:	d902      	bls.n	8002d3a <HAL_GPIO_EXTI_Callback+0x18e>
			{
				ReceiveCount = 0;
 8002d34:	4b10      	ldr	r3, [pc, #64]	@ (8002d78 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	701a      	strb	r2, [r3, #0]
			}
			interrupt_num = 0;
 8002d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d70 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	701a      	strb	r2, [r3, #0]
			last_time = 0;
 8002d40:	4b0a      	ldr	r3, [pc, #40]	@ (8002d6c <HAL_GPIO_EXTI_Callback+0x1c0>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	601a      	str	r2, [r3, #0]
			receivetime = 0;
 8002d46:	4b08      	ldr	r3, [pc, #32]	@ (8002d68 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
			startflag = 0;
 8002d4c:	4b04      	ldr	r3, [pc, #16]	@ (8002d60 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	701a      	strb	r2, [r3, #0]
			process_flag = 1;
 8002d52:	4b0d      	ldr	r3, [pc, #52]	@ (8002d88 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8002d54:	2201      	movs	r2, #1
 8002d56:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002d58:	bf00      	nop
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	200007c4 	.word	0x200007c4
 8002d64:	40011000 	.word	0x40011000
 8002d68:	20000978 	.word	0x20000978
 8002d6c:	200007c0 	.word	0x200007c0
 8002d70:	200007c5 	.word	0x200007c5
 8002d74:	200007c7 	.word	0x200007c7
 8002d78:	200007cc 	.word	0x200007cc
 8002d7c:	200007c8 	.word	0x200007c8
 8002d80:	200007d0 	.word	0x200007d0
 8002d84:	2000005a 	.word	0x2000005a
 8002d88:	200007c6 	.word	0x200007c6

08002d8c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b088      	sub	sp, #32
 8002d90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d92:	f107 0310 	add.w	r3, r7, #16
 8002d96:	2200      	movs	r2, #0
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	605a      	str	r2, [r3, #4]
 8002d9c:	609a      	str	r2, [r3, #8]
 8002d9e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002da0:	4b66      	ldr	r3, [pc, #408]	@ (8002f3c <MX_GPIO_Init+0x1b0>)
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	4a65      	ldr	r2, [pc, #404]	@ (8002f3c <MX_GPIO_Init+0x1b0>)
 8002da6:	f043 0320 	orr.w	r3, r3, #32
 8002daa:	6193      	str	r3, [r2, #24]
 8002dac:	4b63      	ldr	r3, [pc, #396]	@ (8002f3c <MX_GPIO_Init+0x1b0>)
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	f003 0320 	and.w	r3, r3, #32
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002db8:	4b60      	ldr	r3, [pc, #384]	@ (8002f3c <MX_GPIO_Init+0x1b0>)
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	4a5f      	ldr	r2, [pc, #380]	@ (8002f3c <MX_GPIO_Init+0x1b0>)
 8002dbe:	f043 0310 	orr.w	r3, r3, #16
 8002dc2:	6193      	str	r3, [r2, #24]
 8002dc4:	4b5d      	ldr	r3, [pc, #372]	@ (8002f3c <MX_GPIO_Init+0x1b0>)
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	f003 0310 	and.w	r3, r3, #16
 8002dcc:	60bb      	str	r3, [r7, #8]
 8002dce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd0:	4b5a      	ldr	r3, [pc, #360]	@ (8002f3c <MX_GPIO_Init+0x1b0>)
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	4a59      	ldr	r2, [pc, #356]	@ (8002f3c <MX_GPIO_Init+0x1b0>)
 8002dd6:	f043 0304 	orr.w	r3, r3, #4
 8002dda:	6193      	str	r3, [r2, #24]
 8002ddc:	4b57      	ldr	r3, [pc, #348]	@ (8002f3c <MX_GPIO_Init+0x1b0>)
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	f003 0304 	and.w	r3, r3, #4
 8002de4:	607b      	str	r3, [r7, #4]
 8002de6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002de8:	4b54      	ldr	r3, [pc, #336]	@ (8002f3c <MX_GPIO_Init+0x1b0>)
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	4a53      	ldr	r2, [pc, #332]	@ (8002f3c <MX_GPIO_Init+0x1b0>)
 8002dee:	f043 0308 	orr.w	r3, r3, #8
 8002df2:	6193      	str	r3, [r2, #24]
 8002df4:	4b51      	ldr	r3, [pc, #324]	@ (8002f3c <MX_GPIO_Init+0x1b0>)
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	f003 0308 	and.w	r3, r3, #8
 8002dfc:	603b      	str	r3, [r7, #0]
 8002dfe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, WAVE_A_EN_Pin|KEY_CONTROL_Pin, GPIO_PIN_RESET);
 8002e00:	2200      	movs	r2, #0
 8002e02:	2141      	movs	r1, #65	@ 0x41
 8002e04:	484e      	ldr	r0, [pc, #312]	@ (8002f40 <MX_GPIO_Init+0x1b4>)
 8002e06:	f002 fc6c 	bl	80056e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_GATE_Pin|CONTROL_CLOSE_Pin|MPDCDC_EN_Pin|WAVE_B_EN_Pin, GPIO_PIN_RESET);
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f249 1108 	movw	r1, #37128	@ 0x9108
 8002e10:	484c      	ldr	r0, [pc, #304]	@ (8002f44 <MX_GPIO_Init+0x1b8>)
 8002e12:	f002 fc66 	bl	80056e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BOOT1_Pin|LTDCDC_EN_Pin, GPIO_PIN_RESET);
 8002e16:	2200      	movs	r2, #0
 8002e18:	2184      	movs	r1, #132	@ 0x84
 8002e1a:	484b      	ldr	r0, [pc, #300]	@ (8002f48 <MX_GPIO_Init+0x1bc>)
 8002e1c:	f002 fc61 	bl	80056e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, B_SCLK_Pin|B_SDATA_Pin|B_FSYNC_Pin, GPIO_PIN_SET);
 8002e20:	2201      	movs	r2, #1
 8002e22:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8002e26:	4846      	ldr	r0, [pc, #280]	@ (8002f40 <MX_GPIO_Init+0x1b4>)
 8002e28:	f002 fc5b 	bl	80056e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A_SCLK_GPIO_Port, A_SCLK_Pin, GPIO_PIN_SET);
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	2104      	movs	r1, #4
 8002e30:	4846      	ldr	r0, [pc, #280]	@ (8002f4c <MX_GPIO_Init+0x1c0>)
 8002e32:	f002 fc56 	bl	80056e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_SDATA_Pin|A_FSYNC_Pin, GPIO_PIN_SET);
 8002e36:	2201      	movs	r2, #1
 8002e38:	2118      	movs	r1, #24
 8002e3a:	4843      	ldr	r0, [pc, #268]	@ (8002f48 <MX_GPIO_Init+0x1bc>)
 8002e3c:	f002 fc51 	bl	80056e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WAVE_A_EN_Pin KEY_CONTROL_Pin */
  GPIO_InitStruct.Pin = WAVE_A_EN_Pin|KEY_CONTROL_Pin;
 8002e40:	2341      	movs	r3, #65	@ 0x41
 8002e42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e44:	2301      	movs	r3, #1
 8002e46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002e48:	2302      	movs	r3, #2
 8002e4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e50:	f107 0310 	add.w	r3, r7, #16
 8002e54:	4619      	mov	r1, r3
 8002e56:	483a      	ldr	r0, [pc, #232]	@ (8002f40 <MX_GPIO_Init+0x1b4>)
 8002e58:	f002 faa8 	bl	80053ac <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_GATE_Pin CONTROL_CLOSE_Pin MPDCDC_EN_Pin WAVE_B_EN_Pin */
  GPIO_InitStruct.Pin = MOTOR_GATE_Pin|CONTROL_CLOSE_Pin|MPDCDC_EN_Pin|WAVE_B_EN_Pin;
 8002e5c:	f249 1308 	movw	r3, #37128	@ 0x9108
 8002e60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e62:	2301      	movs	r3, #1
 8002e64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002e66:	2302      	movs	r3, #2
 8002e68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e6e:	f107 0310 	add.w	r3, r7, #16
 8002e72:	4619      	mov	r1, r3
 8002e74:	4833      	ldr	r0, [pc, #204]	@ (8002f44 <MX_GPIO_Init+0x1b8>)
 8002e76:	f002 fa99 	bl	80053ac <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002e7a:	2304      	movs	r3, #4
 8002e7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002e82:	2302      	movs	r3, #2
 8002e84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e86:	2302      	movs	r3, #2
 8002e88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002e8a:	f107 0310 	add.w	r3, r7, #16
 8002e8e:	4619      	mov	r1, r3
 8002e90:	482d      	ldr	r0, [pc, #180]	@ (8002f48 <MX_GPIO_Init+0x1bc>)
 8002e92:	f002 fa8b 	bl	80053ac <HAL_GPIO_Init>

  /*Configure GPIO pin : CHARGE_STATE_Pin */
  GPIO_InitStruct.Pin = CHARGE_STATE_Pin;
 8002e96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002e9c:	4b2c      	ldr	r3, [pc, #176]	@ (8002f50 <MX_GPIO_Init+0x1c4>)
 8002e9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CHARGE_STATE_GPIO_Port, &GPIO_InitStruct);
 8002ea4:	f107 0310 	add.w	r3, r7, #16
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4825      	ldr	r0, [pc, #148]	@ (8002f40 <MX_GPIO_Init+0x1b4>)
 8002eac:	f002 fa7e 	bl	80053ac <HAL_GPIO_Init>

  /*Configure GPIO pins : B_SCLK_Pin B_SDATA_Pin B_FSYNC_Pin */
  GPIO_InitStruct.Pin = B_SCLK_Pin|B_SDATA_Pin|B_FSYNC_Pin;
 8002eb0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002eb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ec2:	f107 0310 	add.w	r3, r7, #16
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	481d      	ldr	r0, [pc, #116]	@ (8002f40 <MX_GPIO_Init+0x1b4>)
 8002eca:	f002 fa6f 	bl	80053ac <HAL_GPIO_Init>

  /*Configure GPIO pin : A_SCLK_Pin */
  GPIO_InitStruct.Pin = A_SCLK_Pin;
 8002ece:	2304      	movs	r3, #4
 8002ed0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002eda:	2303      	movs	r3, #3
 8002edc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(A_SCLK_GPIO_Port, &GPIO_InitStruct);
 8002ede:	f107 0310 	add.w	r3, r7, #16
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4819      	ldr	r0, [pc, #100]	@ (8002f4c <MX_GPIO_Init+0x1c0>)
 8002ee6:	f002 fa61 	bl	80053ac <HAL_GPIO_Init>

  /*Configure GPIO pins : A_SDATA_Pin A_FSYNC_Pin */
  GPIO_InitStruct.Pin = A_SDATA_Pin|A_FSYNC_Pin;
 8002eea:	2318      	movs	r3, #24
 8002eec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002efa:	f107 0310 	add.w	r3, r7, #16
 8002efe:	4619      	mov	r1, r3
 8002f00:	4811      	ldr	r0, [pc, #68]	@ (8002f48 <MX_GPIO_Init+0x1bc>)
 8002f02:	f002 fa53 	bl	80053ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LTDCDC_EN_Pin */
  GPIO_InitStruct.Pin = LTDCDC_EN_Pin;
 8002f06:	2380      	movs	r3, #128	@ 0x80
 8002f08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002f0e:	2302      	movs	r3, #2
 8002f10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f12:	2303      	movs	r3, #3
 8002f14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LTDCDC_EN_GPIO_Port, &GPIO_InitStruct);
 8002f16:	f107 0310 	add.w	r3, r7, #16
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	480a      	ldr	r0, [pc, #40]	@ (8002f48 <MX_GPIO_Init+0x1bc>)
 8002f1e:	f002 fa45 	bl	80053ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8002f22:	2200      	movs	r2, #0
 8002f24:	2103      	movs	r1, #3
 8002f26:	2017      	movs	r0, #23
 8002f28:	f001 fe0f 	bl	8004b4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002f2c:	2017      	movs	r0, #23
 8002f2e:	f001 fe28 	bl	8004b82 <HAL_NVIC_EnableIRQ>

}
 8002f32:	bf00      	nop
 8002f34:	3720      	adds	r7, #32
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	40011000 	.word	0x40011000
 8002f44:	40010800 	.word	0x40010800
 8002f48:	40010c00 	.word	0x40010c00
 8002f4c:	40011400 	.word	0x40011400
 8002f50:	10310000 	.word	0x10310000

08002f54 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8002f58:	4b09      	ldr	r3, [pc, #36]	@ (8002f80 <MX_IWDG_Init+0x2c>)
 8002f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002f84 <MX_IWDG_Init+0x30>)
 8002f5c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8002f5e:	4b08      	ldr	r3, [pc, #32]	@ (8002f80 <MX_IWDG_Init+0x2c>)
 8002f60:	2206      	movs	r2, #6
 8002f62:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 78;
 8002f64:	4b06      	ldr	r3, [pc, #24]	@ (8002f80 <MX_IWDG_Init+0x2c>)
 8002f66:	224e      	movs	r2, #78	@ 0x4e
 8002f68:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002f6a:	4805      	ldr	r0, [pc, #20]	@ (8002f80 <MX_IWDG_Init+0x2c>)
 8002f6c:	f002 fbea 	bl	8005744 <HAL_IWDG_Init>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <MX_IWDG_Init+0x26>
  {
    Error_Handler();
 8002f76:	f000 f97b 	bl	8003270 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002f7a:	bf00      	nop
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	200007d4 	.word	0x200007d4
 8002f84:	40003000 	.word	0x40003000

08002f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f8e:	f000 ffe7 	bl	8003f60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f92:	f000 f883 	bl	800309c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f96:	f7ff fef9 	bl	8002d8c <MX_GPIO_Init>
  MX_DMA_Init();
 8002f9a:	f7ff fc2b 	bl	80027f4 <MX_DMA_Init>
  MX_TIM3_Init();
 8002f9e:	f000 fc91 	bl	80038c4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8002fa2:	f000 fe61 	bl	8003c68 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002fa6:	f000 fe89 	bl	8003cbc <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8002faa:	f000 fc3f 	bl	800382c <MX_TIM2_Init>
  MX_IWDG_Init();
 8002fae:	f7ff ffd1 	bl	8002f54 <MX_IWDG_Init>
  MX_TIM4_Init();
 8002fb2:	f000 fd09 	bl	80039c8 <MX_TIM4_Init>
  MX_ADC1_Init();
 8002fb6:	f7fe fa29 	bl	800140c <MX_ADC1_Init>
  MX_TIM1_Init();
 8002fba:	f000 fbe7 	bl	800378c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);
 8002fbe:	4b2e      	ldr	r3, [pc, #184]	@ (8003078 <main+0xf0>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68da      	ldr	r2, [r3, #12]
 8002fc4:	4b2c      	ldr	r3, [pc, #176]	@ (8003078 <main+0xf0>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f042 0210 	orr.w	r2, r2, #16
 8002fcc:	60da      	str	r2, [r3, #12]
  __HAL_DMA_ENABLE_IT(&hdma_usart3_tx, DMA_IT_TC);
 8002fce:	4b2b      	ldr	r3, [pc, #172]	@ (800307c <main+0xf4>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	4b29      	ldr	r3, [pc, #164]	@ (800307c <main+0xf4>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f042 0202 	orr.w	r2, r2, #2
 8002fdc:	601a      	str	r2, [r3, #0]
  __HAL_UART_CLEAR_IDLEFLAG(&huart3);
 8002fde:	2300      	movs	r3, #0
 8002fe0:	607b      	str	r3, [r7, #4]
 8002fe2:	4b25      	ldr	r3, [pc, #148]	@ (8003078 <main+0xf0>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	607b      	str	r3, [r7, #4]
 8002fea:	4b23      	ldr	r3, [pc, #140]	@ (8003078 <main+0xf0>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	607b      	str	r3, [r7, #4]
 8002ff2:	687b      	ldr	r3, [r7, #4]
  HAL_UART_Receive_DMA(&huart3, p_IsToReceive, MAX_RX_LEN);
 8002ff4:	4b22      	ldr	r3, [pc, #136]	@ (8003080 <main+0xf8>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2280      	movs	r2, #128	@ 0x80
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	481e      	ldr	r0, [pc, #120]	@ (8003078 <main+0xf0>)
 8002ffe:	f004 faeb 	bl	80075d8 <HAL_UART_Receive_DMA>

  HAL_TIM_Base_Start_IT(&htim1);
 8003002:	4820      	ldr	r0, [pc, #128]	@ (8003084 <main+0xfc>)
 8003004:	f003 fa2e 	bl	8006464 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8003008:	481f      	ldr	r0, [pc, #124]	@ (8003088 <main+0x100>)
 800300a:	f003 fa2b 	bl	8006464 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 800300e:	481f      	ldr	r0, [pc, #124]	@ (800308c <main+0x104>)
 8003010:	f003 f9b8 	bl	8006384 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 8003014:	481e      	ldr	r0, [pc, #120]	@ (8003090 <main+0x108>)
 8003016:	f003 f9b5 	bl	8006384 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800301a:	2100      	movs	r1, #0
 800301c:	481b      	ldr	r0, [pc, #108]	@ (800308c <main+0x104>)
 800301e:	f003 facb 	bl	80065b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003022:	2104      	movs	r1, #4
 8003024:	4819      	ldr	r0, [pc, #100]	@ (800308c <main+0x104>)
 8003026:	f003 fac7 	bl	80065b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800302a:	2108      	movs	r1, #8
 800302c:	4818      	ldr	r0, [pc, #96]	@ (8003090 <main+0x108>)
 800302e:	f003 fac3 	bl	80065b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8003032:	210c      	movs	r1, #12
 8003034:	4816      	ldr	r0, [pc, #88]	@ (8003090 <main+0x108>)
 8003036:	f003 fabf 	bl	80065b8 <HAL_TIM_PWM_Start>


  Encrypt_ApplicaStar();
 800303a:	f7ff fd63 	bl	8002b04 <Encrypt_ApplicaStar>
  ADC1_Init();
 800303e:	f7fe fa8d 	bl	800155c <ADC1_Init>
  System_Init();
 8003042:	f7fe fcfd 	bl	8001a40 <System_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ADC1_GetBatteryVol();
 8003046:	f7fe fa99 	bl	800157c <ADC1_GetBatteryVol>
	  Battery_LevelReceive();
 800304a:	f7fe fba3 	bl	8001794 <Battery_LevelReceive>
	  if(battery_send_intervaltime >= 2)
 800304e:	4b11      	ldr	r3, [pc, #68]	@ (8003094 <main+0x10c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d904      	bls.n	8003060 <main+0xd8>
	  {
		  battery_send_intervaltime = 0;
 8003056:	4b0f      	ldr	r3, [pc, #60]	@ (8003094 <main+0x10c>)
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]
		  Battery_LevelSend();
 800305c:	f7fe fc4c 	bl	80018f8 <Battery_LevelSend>
	  }
	  Usart3_ReceiveData();
 8003060:	f7fe fe80 	bl	8001d64 <Usart3_ReceiveData>
	  Ultra_FourStates();
 8003064:	f7ff f8e0 	bl	8002228 <Ultra_FourStates>
	  Log_Writer2Flash();
 8003068:	f7ff fa84 	bl	8002574 <Log_Writer2Flash>
	  Warning_LowBattery();
 800306c:	f7ff fb0e 	bl	800268c <Warning_LowBattery>
	  HAL_IWDG_Refresh(&hiwdg);
 8003070:	4809      	ldr	r0, [pc, #36]	@ (8003098 <main+0x110>)
 8003072:	f002 fbab 	bl	80057cc <HAL_IWDG_Refresh>
	  ADC1_GetBatteryVol();
 8003076:	e7e6      	b.n	8003046 <main+0xbe>
 8003078:	20000b00 	.word	0x20000b00
 800307c:	20000b8c 	.word	0x20000b8c
 8003080:	20000060 	.word	0x20000060
 8003084:	20000998 	.word	0x20000998
 8003088:	200009e0 	.word	0x200009e0
 800308c:	20000a28 	.word	0x20000a28
 8003090:	20000a70 	.word	0x20000a70
 8003094:	20000980 	.word	0x20000980
 8003098:	200007d4 	.word	0x200007d4

0800309c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b094      	sub	sp, #80	@ 0x50
 80030a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80030a6:	2228      	movs	r2, #40	@ 0x28
 80030a8:	2100      	movs	r1, #0
 80030aa:	4618      	mov	r0, r3
 80030ac:	f006 fa41 	bl	8009532 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030b0:	f107 0314 	add.w	r3, r7, #20
 80030b4:	2200      	movs	r2, #0
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	605a      	str	r2, [r3, #4]
 80030ba:	609a      	str	r2, [r3, #8]
 80030bc:	60da      	str	r2, [r3, #12]
 80030be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030c0:	1d3b      	adds	r3, r7, #4
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	605a      	str	r2, [r3, #4]
 80030c8:	609a      	str	r2, [r3, #8]
 80030ca:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80030cc:	2309      	movs	r3, #9
 80030ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80030d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80030d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80030d6:	2300      	movs	r3, #0
 80030d8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030da:	2301      	movs	r3, #1
 80030dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80030de:	2301      	movs	r3, #1
 80030e0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030e2:	2302      	movs	r3, #2
 80030e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80030ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80030ec:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80030f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80030f6:	4618      	mov	r0, r3
 80030f8:	f002 fb78 	bl	80057ec <HAL_RCC_OscConfig>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8003102:	f000 f8b5 	bl	8003270 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003106:	230f      	movs	r3, #15
 8003108:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800310a:	2302      	movs	r3, #2
 800310c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800310e:	2300      	movs	r3, #0
 8003110:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003112:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003116:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003118:	2300      	movs	r3, #0
 800311a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800311c:	f107 0314 	add.w	r3, r7, #20
 8003120:	2102      	movs	r1, #2
 8003122:	4618      	mov	r0, r3
 8003124:	f002 fde4 	bl	8005cf0 <HAL_RCC_ClockConfig>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800312e:	f000 f89f 	bl	8003270 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003132:	2302      	movs	r3, #2
 8003134:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8003136:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800313a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800313c:	1d3b      	adds	r3, r7, #4
 800313e:	4618      	mov	r0, r3
 8003140:	f002 ff64 	bl	800600c <HAL_RCCEx_PeriphCLKConfig>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800314a:	f000 f891 	bl	8003270 <Error_Handler>
  }
}
 800314e:	bf00      	nop
 8003150:	3750      	adds	r7, #80	@ 0x50
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
	...

08003158 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]

  /* USER CODE END Callback 0 */

  /* USER CODE BEGIN Callback 1 */
	//100us
	if(htim->Instance == TIM2)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003168:	d113      	bne.n	8003192 <HAL_TIM_PeriodElapsedCallback+0x3a>
	{
		receivetime++;
 800316a:	4b2f      	ldr	r3, [pc, #188]	@ (8003228 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	3301      	adds	r3, #1
 8003170:	4a2d      	ldr	r2, [pc, #180]	@ (8003228 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8003172:	6013      	str	r3, [r2, #0]
		tim2_count1++;
 8003174:	4b2d      	ldr	r3, [pc, #180]	@ (800322c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	3301      	adds	r3, #1
 800317a:	4a2c      	ldr	r2, [pc, #176]	@ (800322c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800317c:	6013      	str	r3, [r2, #0]
		ultrasound_worktime++;
 800317e:	4b2c      	ldr	r3, [pc, #176]	@ (8003230 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	3301      	adds	r3, #1
 8003184:	4a2a      	ldr	r2, [pc, #168]	@ (8003230 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8003186:	6013      	str	r3, [r2, #0]
		Motor_Worktime++;
 8003188:	4b2a      	ldr	r3, [pc, #168]	@ (8003234 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	3301      	adds	r3, #1
 800318e:	4a29      	ldr	r2, [pc, #164]	@ (8003234 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8003190:	6013      	str	r3, [r2, #0]
	}

	//10ms
	if(htim->Instance == TIM1)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a28      	ldr	r2, [pc, #160]	@ (8003238 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d13f      	bne.n	800321c <HAL_TIM_PeriodElapsedCallback+0xc4>
	{
		tim4_count1++;
 800319c:	4b27      	ldr	r3, [pc, #156]	@ (800323c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	3301      	adds	r3, #1
 80031a2:	4a26      	ldr	r2, [pc, #152]	@ (800323c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80031a4:	6013      	str	r3, [r2, #0]
		tim4_count2++;
 80031a6:	4b26      	ldr	r3, [pc, #152]	@ (8003240 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	3301      	adds	r3, #1
 80031ac:	4a24      	ldr	r2, [pc, #144]	@ (8003240 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80031ae:	6013      	str	r3, [r2, #0]
		tim4_count3++;
 80031b0:	4b24      	ldr	r3, [pc, #144]	@ (8003244 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	3301      	adds	r3, #1
 80031b6:	4a23      	ldr	r2, [pc, #140]	@ (8003244 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80031b8:	6013      	str	r3, [r2, #0]
		PowerOnCount++;
 80031ba:	4b23      	ldr	r3, [pc, #140]	@ (8003248 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	3301      	adds	r3, #1
 80031c0:	4a21      	ldr	r2, [pc, #132]	@ (8003248 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80031c2:	6013      	str	r3, [r2, #0]
		ShuntDowmCount++;
 80031c4:	4b21      	ldr	r3, [pc, #132]	@ (800324c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	3301      	adds	r3, #1
 80031ca:	4a20      	ldr	r2, [pc, #128]	@ (800324c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80031cc:	6013      	str	r3, [r2, #0]

		if(PowerOnCount > 150)
 80031ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003248 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2b96      	cmp	r3, #150	@ 0x96
 80031d4:	d902      	bls.n	80031dc <HAL_TIM_PeriodElapsedCallback+0x84>
		{

			CompleteFlg = 1;
 80031d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003250 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80031d8:	2201      	movs	r2, #1
 80031da:	701a      	strb	r2, [r3, #0]
		}
		if(WorkStartFlg == 1)
 80031dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003254 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d104      	bne.n	80031ee <HAL_TIM_PeriodElapsedCallback+0x96>
		{
			WorkTime++;
 80031e4:	4b1c      	ldr	r3, [pc, #112]	@ (8003258 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	3301      	adds	r3, #1
 80031ea:	4a1b      	ldr	r2, [pc, #108]	@ (8003258 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80031ec:	6013      	str	r3, [r2, #0]
		}
		if((Low_Battery_Flg == 1) && (battery_level_state < boost_battery_level1))
 80031ee:	4b1b      	ldr	r3, [pc, #108]	@ (800325c <HAL_TIM_PeriodElapsedCallback+0x104>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d108      	bne.n	8003208 <HAL_TIM_PeriodElapsedCallback+0xb0>
 80031f6:	4b1a      	ldr	r3, [pc, #104]	@ (8003260 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	2b05      	cmp	r3, #5
 80031fc:	d804      	bhi.n	8003208 <HAL_TIM_PeriodElapsedCallback+0xb0>
		{
			Charge_Time++;
 80031fe:	4b19      	ldr	r3, [pc, #100]	@ (8003264 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	3301      	adds	r3, #1
 8003204:	4a17      	ldr	r2, [pc, #92]	@ (8003264 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8003206:	6013      	str	r3, [r2, #0]
		}
		ultrasound_standby_time++;
 8003208:	4b17      	ldr	r3, [pc, #92]	@ (8003268 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	3301      	adds	r3, #1
 800320e:	4a16      	ldr	r2, [pc, #88]	@ (8003268 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8003210:	6013      	str	r3, [r2, #0]
		battery_send_intervaltime++;
 8003212:	4b16      	ldr	r3, [pc, #88]	@ (800326c <HAL_TIM_PeriodElapsedCallback+0x114>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	3301      	adds	r3, #1
 8003218:	4a14      	ldr	r2, [pc, #80]	@ (800326c <HAL_TIM_PeriodElapsedCallback+0x114>)
 800321a:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END Callback 1 */
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	bc80      	pop	{r7}
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	20000978 	.word	0x20000978
 800322c:	20000990 	.word	0x20000990
 8003230:	20000994 	.word	0x20000994
 8003234:	200007e0 	.word	0x200007e0
 8003238:	40012c00 	.word	0x40012c00
 800323c:	20000984 	.word	0x20000984
 8003240:	20000988 	.word	0x20000988
 8003244:	2000098c 	.word	0x2000098c
 8003248:	200007e4 	.word	0x200007e4
 800324c:	20000360 	.word	0x20000360
 8003250:	200007e8 	.word	0x200007e8
 8003254:	20000348 	.word	0x20000348
 8003258:	2000034c 	.word	0x2000034c
 800325c:	20000355 	.word	0x20000355
 8003260:	20000026 	.word	0x20000026
 8003264:	20000358 	.word	0x20000358
 8003268:	2000097c 	.word	0x2000097c
 800326c:	20000980 	.word	0x20000980

08003270 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003274:	b672      	cpsid	i
}
 8003276:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003278:	bf00      	nop
 800327a:	e7fd      	b.n	8003278 <Error_Handler+0x8>

0800327c <Mcu_GpioInit>:
********************************************************************************
*/
#include "mcu_gpio.h"

void Mcu_GpioInit(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CONTROL_CLOSE_GPIO_Port, CONTROL_CLOSE_Pin, GPIO_PIN_RESET);
 8003280:	2200      	movs	r2, #0
 8003282:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003286:	4816      	ldr	r0, [pc, #88]	@ (80032e0 <Mcu_GpioInit+0x64>)
 8003288:	f002 fa2b 	bl	80056e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MPDCDC_EN_GPIO_Port, MPDCDC_EN_Pin, GPIO_PIN_SET);
 800328c:	2201      	movs	r2, #1
 800328e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003292:	4813      	ldr	r0, [pc, #76]	@ (80032e0 <Mcu_GpioInit+0x64>)
 8003294:	f002 fa25 	bl	80056e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LTDCDC_EN_GPIO_Port, LTDCDC_EN_Pin, GPIO_PIN_RESET);
 8003298:	2200      	movs	r2, #0
 800329a:	2180      	movs	r1, #128	@ 0x80
 800329c:	4811      	ldr	r0, [pc, #68]	@ (80032e4 <Mcu_GpioInit+0x68>)
 800329e:	f002 fa20 	bl	80056e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_GATE_GPIO_Port, MOTOR_GATE_Pin, GPIO_PIN_RESET);
 80032a2:	2200      	movs	r2, #0
 80032a4:	2108      	movs	r1, #8
 80032a6:	480e      	ldr	r0, [pc, #56]	@ (80032e0 <Mcu_GpioInit+0x64>)
 80032a8:	f002 fa1b 	bl	80056e2 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(WAVE_A_EN_GPIO_Port, WAVE_A_EN_Pin, GPIO_PIN_RESET);
 80032ac:	2200      	movs	r2, #0
 80032ae:	2101      	movs	r1, #1
 80032b0:	480d      	ldr	r0, [pc, #52]	@ (80032e8 <Mcu_GpioInit+0x6c>)
 80032b2:	f002 fa16 	bl	80056e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(WAVE_B_EN_GPIO_Port, WAVE_B_EN_Pin, GPIO_PIN_RESET);
 80032b6:	2200      	movs	r2, #0
 80032b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80032bc:	4808      	ldr	r0, [pc, #32]	@ (80032e0 <Mcu_GpioInit+0x64>)
 80032be:	f002 fa10 	bl	80056e2 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(KEY_CONTROL_GPIO_Port, KEY_CONTROL_Pin, GPIO_PIN_RESET);
 80032c2:	2200      	movs	r2, #0
 80032c4:	2140      	movs	r1, #64	@ 0x40
 80032c6:	4808      	ldr	r0, [pc, #32]	@ (80032e8 <Mcu_GpioInit+0x6c>)
 80032c8:	f002 fa0b 	bl	80056e2 <HAL_GPIO_WritePin>

	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);	//PWM_MOTOR_B
 80032cc:	4b07      	ldr	r3, [pc, #28]	@ (80032ec <Mcu_GpioInit+0x70>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2200      	movs	r2, #0
 80032d2:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 0);	//PWM_MOTOR_A
 80032d4:	4b05      	ldr	r3, [pc, #20]	@ (80032ec <Mcu_GpioInit+0x70>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2200      	movs	r2, #0
 80032da:	639a      	str	r2, [r3, #56]	@ 0x38

}
 80032dc:	bf00      	nop
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40010800 	.word	0x40010800
 80032e4:	40010c00 	.word	0x40010c00
 80032e8:	40011000 	.word	0x40011000
 80032ec:	20000a28 	.word	0x20000a28

080032f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80032f6:	4b16      	ldr	r3, [pc, #88]	@ (8003350 <HAL_MspInit+0x60>)
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	4a15      	ldr	r2, [pc, #84]	@ (8003350 <HAL_MspInit+0x60>)
 80032fc:	f043 0301 	orr.w	r3, r3, #1
 8003300:	6193      	str	r3, [r2, #24]
 8003302:	4b13      	ldr	r3, [pc, #76]	@ (8003350 <HAL_MspInit+0x60>)
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	60bb      	str	r3, [r7, #8]
 800330c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800330e:	4b10      	ldr	r3, [pc, #64]	@ (8003350 <HAL_MspInit+0x60>)
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	4a0f      	ldr	r2, [pc, #60]	@ (8003350 <HAL_MspInit+0x60>)
 8003314:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003318:	61d3      	str	r3, [r2, #28]
 800331a:	4b0d      	ldr	r3, [pc, #52]	@ (8003350 <HAL_MspInit+0x60>)
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003322:	607b      	str	r3, [r7, #4]
 8003324:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8003326:	2005      	movs	r0, #5
 8003328:	f001 fc04 	bl	8004b34 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800332c:	4b09      	ldr	r3, [pc, #36]	@ (8003354 <HAL_MspInit+0x64>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003340:	60fb      	str	r3, [r7, #12]
 8003342:	4a04      	ldr	r2, [pc, #16]	@ (8003354 <HAL_MspInit+0x64>)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003348:	bf00      	nop
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40021000 	.word	0x40021000
 8003354:	40010000 	.word	0x40010000

08003358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800335c:	bf00      	nop
 800335e:	e7fd      	b.n	800335c <NMI_Handler+0x4>

08003360 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003364:	bf00      	nop
 8003366:	e7fd      	b.n	8003364 <HardFault_Handler+0x4>

08003368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800336c:	bf00      	nop
 800336e:	e7fd      	b.n	800336c <MemManage_Handler+0x4>

08003370 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003374:	bf00      	nop
 8003376:	e7fd      	b.n	8003374 <BusFault_Handler+0x4>

08003378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800337c:	bf00      	nop
 800337e:	e7fd      	b.n	800337c <UsageFault_Handler+0x4>

08003380 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003384:	bf00      	nop
 8003386:	46bd      	mov	sp, r7
 8003388:	bc80      	pop	{r7}
 800338a:	4770      	bx	lr

0800338c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003390:	bf00      	nop
 8003392:	46bd      	mov	sp, r7
 8003394:	bc80      	pop	{r7}
 8003396:	4770      	bx	lr

08003398 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800339c:	bf00      	nop
 800339e:	46bd      	mov	sp, r7
 80033a0:	bc80      	pop	{r7}
 80033a2:	4770      	bx	lr

080033a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033a8:	f000 fe20 	bl	8003fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033ac:	bf00      	nop
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80033b4:	4802      	ldr	r0, [pc, #8]	@ (80033c0 <DMA1_Channel1_IRQHandler+0x10>)
 80033b6:	f001 fd6d 	bl	8004e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80033ba:	bf00      	nop
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	200002c8 	.word	0x200002c8

080033c4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */


	if (__HAL_DMA_GET_FLAG(&hdma_usart3_tx, DMA_FLAG_TC4) != RESET) // if data in DMA are sent completely.
 80033ca:	4b13      	ldr	r3, [pc, #76]	@ (8003418 <DMA1_Channel2_IRQHandler+0x54>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d019      	beq.n	800340a <DMA1_Channel2_IRQHandler+0x46>
	  {
	    __HAL_UART_CLEAR_IDLEFLAG(&huart3);
 80033d6:	2300      	movs	r3, #0
 80033d8:	607b      	str	r3, [r7, #4]
 80033da:	4b10      	ldr	r3, [pc, #64]	@ (800341c <DMA1_Channel2_IRQHandler+0x58>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	607b      	str	r3, [r7, #4]
 80033e2:	4b0e      	ldr	r3, [pc, #56]	@ (800341c <DMA1_Channel2_IRQHandler+0x58>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	607b      	str	r3, [r7, #4]
 80033ea:	687b      	ldr	r3, [r7, #4]

	    USART3_TX_FLAG = 0;
 80033ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003420 <DMA1_Channel2_IRQHandler+0x5c>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	701a      	strb	r2, [r3, #0]

	    huart3.gState = HAL_UART_STATE_READY;
 80033f2:	4b0a      	ldr	r3, [pc, #40]	@ (800341c <DMA1_Channel2_IRQHandler+0x58>)
 80033f4:	2220      	movs	r2, #32
 80033f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	    hdma_usart3_tx.State = HAL_DMA_STATE_READY;
 80033fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003424 <DMA1_Channel2_IRQHandler+0x60>)
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	    __HAL_UNLOCK(&hdma_usart3_tx);
 8003402:	4b08      	ldr	r3, [pc, #32]	@ (8003424 <DMA1_Channel2_IRQHandler+0x60>)
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2020 	strb.w	r2, [r3, #32]

	  }


  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800340a:	4806      	ldr	r0, [pc, #24]	@ (8003424 <DMA1_Channel2_IRQHandler+0x60>)
 800340c:	f001 fd42 	bl	8004e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003410:	bf00      	nop
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40020000 	.word	0x40020000
 800341c:	20000b00 	.word	0x20000b00
 8003420:	2000086e 	.word	0x2000086e
 8003424:	20000b8c 	.word	0x20000b8c

08003428 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800342c:	4802      	ldr	r0, [pc, #8]	@ (8003438 <DMA1_Channel3_IRQHandler+0x10>)
 800342e:	f001 fd31 	bl	8004e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003432:	bf00      	nop
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	20000b48 	.word	0x20000b48

0800343c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CHARGE_STATE_Pin);
 8003440:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003444:	f002 f966 	bl	8005714 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003448:	bf00      	nop
 800344a:	bd80      	pop	{r7, pc}

0800344c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003450:	4802      	ldr	r0, [pc, #8]	@ (800345c <TIM1_UP_IRQHandler+0x10>)
 8003452:	f003 f9b7 	bl	80067c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003456:	bf00      	nop
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	20000998 	.word	0x20000998

08003460 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003464:	4802      	ldr	r0, [pc, #8]	@ (8003470 <TIM2_IRQHandler+0x10>)
 8003466:	f003 f9ad 	bl	80067c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800346a:	bf00      	nop
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	200009e0 	.word	0x200009e0

08003474 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003478:	4802      	ldr	r0, [pc, #8]	@ (8003484 <TIM3_IRQHandler+0x10>)
 800347a:	f003 f9a3 	bl	80067c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800347e:	bf00      	nop
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	20000a28 	.word	0x20000a28

08003488 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800348c:	4802      	ldr	r0, [pc, #8]	@ (8003498 <TIM4_IRQHandler+0x10>)
 800348e:	f003 f999 	bl	80067c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003492:	bf00      	nop
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	20000a70 	.word	0x20000a70

0800349c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80034a0:	4802      	ldr	r0, [pc, #8]	@ (80034ac <USART1_IRQHandler+0x10>)
 80034a2:	f004 f93d 	bl	8007720 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80034a6:	bf00      	nop
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20000ab8 	.word	0x20000ab8

080034b0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

	if(RESET != __HAL_UART_GET_FLAG(&huart3, UART_FLAG_IDLE))
 80034b4:	4b2d      	ldr	r3, [pc, #180]	@ (800356c <USART3_IRQHandler+0xbc>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0310 	and.w	r3, r3, #16
 80034be:	2b10      	cmp	r3, #16
 80034c0:	d147      	bne.n	8003552 <USART3_IRQHandler+0xa2>
	  {

		HAL_UART_DMAStop(&huart3);
 80034c2:	482a      	ldr	r0, [pc, #168]	@ (800356c <USART3_IRQHandler+0xbc>)
 80034c4:	f004 f8ad 	bl	8007622 <HAL_UART_DMAStop>
		data_length = MAX_RX_LEN - __HAL_DMA_GET_COUNTER(&hdma_usart3_rx);
 80034c8:	4b29      	ldr	r3, [pc, #164]	@ (8003570 <USART3_IRQHandler+0xc0>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 80034d4:	1a9b      	subs	r3, r3, r2
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	4b26      	ldr	r3, [pc, #152]	@ (8003574 <USART3_IRQHandler+0xc4>)
 80034da:	701a      	strb	r2, [r3, #0]
		if (WhichBufIsReady)
 80034dc:	4b26      	ldr	r3, [pc, #152]	@ (8003578 <USART3_IRQHandler+0xc8>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d009      	beq.n	80034f8 <USART3_IRQHandler+0x48>
		{
		  p_IsOK = u2rxbuf;
 80034e4:	4b25      	ldr	r3, [pc, #148]	@ (800357c <USART3_IRQHandler+0xcc>)
 80034e6:	4a26      	ldr	r2, [pc, #152]	@ (8003580 <USART3_IRQHandler+0xd0>)
 80034e8:	601a      	str	r2, [r3, #0]
		  p_IsToReceive = u1rxbuf;
 80034ea:	4b26      	ldr	r3, [pc, #152]	@ (8003584 <USART3_IRQHandler+0xd4>)
 80034ec:	4a26      	ldr	r2, [pc, #152]	@ (8003588 <USART3_IRQHandler+0xd8>)
 80034ee:	601a      	str	r2, [r3, #0]
		  WhichBufIsReady = 0;
 80034f0:	4b21      	ldr	r3, [pc, #132]	@ (8003578 <USART3_IRQHandler+0xc8>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	701a      	strb	r2, [r3, #0]
 80034f6:	e008      	b.n	800350a <USART3_IRQHandler+0x5a>
		}
		else
		{
		  p_IsOK = u1rxbuf;
 80034f8:	4b20      	ldr	r3, [pc, #128]	@ (800357c <USART3_IRQHandler+0xcc>)
 80034fa:	4a23      	ldr	r2, [pc, #140]	@ (8003588 <USART3_IRQHandler+0xd8>)
 80034fc:	601a      	str	r2, [r3, #0]
		  p_IsToReceive = u2rxbuf;
 80034fe:	4b21      	ldr	r3, [pc, #132]	@ (8003584 <USART3_IRQHandler+0xd4>)
 8003500:	4a1f      	ldr	r2, [pc, #124]	@ (8003580 <USART3_IRQHandler+0xd0>)
 8003502:	601a      	str	r2, [r3, #0]
		  WhichBufIsReady = 1;
 8003504:	4b1c      	ldr	r3, [pc, #112]	@ (8003578 <USART3_IRQHandler+0xc8>)
 8003506:	2201      	movs	r2, #1
 8003508:	701a      	strb	r2, [r3, #0]
		}
		if(USART3_RX_FLAG == 0)
 800350a:	4b20      	ldr	r3, [pc, #128]	@ (800358c <USART3_IRQHandler+0xdc>)
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	d117      	bne.n	8003544 <USART3_IRQHandler+0x94>
		{
			if(WhichBufIsReady == 0)
 8003514:	4b18      	ldr	r3, [pc, #96]	@ (8003578 <USART3_IRQHandler+0xc8>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d108      	bne.n	800352e <USART3_IRQHandler+0x7e>
			{
				 memcpy(USART3_RX_BUF, u2rxbuf, data_length);
 800351c:	4b15      	ldr	r3, [pc, #84]	@ (8003574 <USART3_IRQHandler+0xc4>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	b2db      	uxtb	r3, r3
 8003522:	461a      	mov	r2, r3
 8003524:	4916      	ldr	r1, [pc, #88]	@ (8003580 <USART3_IRQHandler+0xd0>)
 8003526:	481a      	ldr	r0, [pc, #104]	@ (8003590 <USART3_IRQHandler+0xe0>)
 8003528:	f006 f891 	bl	800964e <memcpy>
 800352c:	e007      	b.n	800353e <USART3_IRQHandler+0x8e>
			}

			else
			{
				memcpy(USART3_RX_BUF, u1rxbuf, data_length);
 800352e:	4b11      	ldr	r3, [pc, #68]	@ (8003574 <USART3_IRQHandler+0xc4>)
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	b2db      	uxtb	r3, r3
 8003534:	461a      	mov	r2, r3
 8003536:	4914      	ldr	r1, [pc, #80]	@ (8003588 <USART3_IRQHandler+0xd8>)
 8003538:	4815      	ldr	r0, [pc, #84]	@ (8003590 <USART3_IRQHandler+0xe0>)
 800353a:	f006 f888 	bl	800964e <memcpy>
			}
			USART3_RX_FLAG = 1;
 800353e:	4b13      	ldr	r3, [pc, #76]	@ (800358c <USART3_IRQHandler+0xdc>)
 8003540:	2201      	movs	r2, #1
 8003542:	701a      	strb	r2, [r3, #0]
		}
		memset((uint8_t *)p_IsToReceive, 0, MAX_RX_LEN);
 8003544:	4b0f      	ldr	r3, [pc, #60]	@ (8003584 <USART3_IRQHandler+0xd4>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2280      	movs	r2, #128	@ 0x80
 800354a:	2100      	movs	r1, #0
 800354c:	4618      	mov	r0, r3
 800354e:	f005 fff0 	bl	8009532 <memset>
	  }


  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003552:	4806      	ldr	r0, [pc, #24]	@ (800356c <USART3_IRQHandler+0xbc>)
 8003554:	f004 f8e4 	bl	8007720 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  HAL_UART_Receive_DMA(&huart3, p_IsToReceive, MAX_RX_LEN);
 8003558:	4b0a      	ldr	r3, [pc, #40]	@ (8003584 <USART3_IRQHandler+0xd4>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2280      	movs	r2, #128	@ 0x80
 800355e:	4619      	mov	r1, r3
 8003560:	4802      	ldr	r0, [pc, #8]	@ (800356c <USART3_IRQHandler+0xbc>)
 8003562:	f004 f839 	bl	80075d8 <HAL_UART_Receive_DMA>
  /* USER CODE END USART3_IRQn 1 */
}
 8003566:	bf00      	nop
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	20000b00 	.word	0x20000b00
 8003570:	20000b48 	.word	0x20000b48
 8003574:	2000086c 	.word	0x2000086c
 8003578:	20000970 	.word	0x20000970
 800357c:	2000005c 	.word	0x2000005c
 8003580:	200008f0 	.word	0x200008f0
 8003584:	20000060 	.word	0x20000060
 8003588:	20000870 	.word	0x20000870
 800358c:	2000086d 	.word	0x2000086d
 8003590:	200007ec 	.word	0x200007ec

08003594 <DMA_USART3_Tx_Data>:
/* USER CODE BEGIN 1 */



void DMA_USART3_Tx_Data(uint8_t *buffer, uint16_t size)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	460b      	mov	r3, r1
 800359e:	807b      	strh	r3, [r7, #2]
  USART3_TX_Wait();
 80035a0:	f000 f812 	bl	80035c8 <USART3_TX_Wait>
  USART3_TX_FLAG = 1;
 80035a4:	4b06      	ldr	r3, [pc, #24]	@ (80035c0 <DMA_USART3_Tx_Data+0x2c>)
 80035a6:	2201      	movs	r2, #1
 80035a8:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit_DMA(&huart3, buffer, size);
 80035aa:	887b      	ldrh	r3, [r7, #2]
 80035ac:	461a      	mov	r2, r3
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	4804      	ldr	r0, [pc, #16]	@ (80035c4 <DMA_USART3_Tx_Data+0x30>)
 80035b2:	f003 ffa1 	bl	80074f8 <HAL_UART_Transmit_DMA>
}
 80035b6:	bf00      	nop
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	2000086e 	.word	0x2000086e
 80035c4:	20000b00 	.word	0x20000b00

080035c8 <USART3_TX_Wait>:

void USART3_TX_Wait(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
  uint16_t delay = 2000;
 80035ce:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80035d2:	80fb      	strh	r3, [r7, #6]
  while (USART3_TX_FLAG)
 80035d4:	e005      	b.n	80035e2 <USART3_TX_Wait+0x1a>
  {
    delay--;
 80035d6:	88fb      	ldrh	r3, [r7, #6]
 80035d8:	3b01      	subs	r3, #1
 80035da:	80fb      	strh	r3, [r7, #6]
    if (delay == 0)
 80035dc:	88fb      	ldrh	r3, [r7, #6]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d005      	beq.n	80035ee <USART3_TX_Wait+0x26>
  while (USART3_TX_FLAG)
 80035e2:	4b05      	ldr	r3, [pc, #20]	@ (80035f8 <USART3_TX_Wait+0x30>)
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1f4      	bne.n	80035d6 <USART3_TX_Wait+0xe>
 80035ec:	e000      	b.n	80035f0 <USART3_TX_Wait+0x28>
      return;
 80035ee:	bf00      	nop
  }
}
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr
 80035f8:	2000086e 	.word	0x2000086e

080035fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  return 1;
 8003600:	2301      	movs	r3, #1
}
 8003602:	4618      	mov	r0, r3
 8003604:	46bd      	mov	sp, r7
 8003606:	bc80      	pop	{r7}
 8003608:	4770      	bx	lr

0800360a <_kill>:

int _kill(int pid, int sig)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b082      	sub	sp, #8
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
 8003612:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003614:	f005 ffe0 	bl	80095d8 <__errno>
 8003618:	4603      	mov	r3, r0
 800361a:	2216      	movs	r2, #22
 800361c:	601a      	str	r2, [r3, #0]
  return -1;
 800361e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003622:	4618      	mov	r0, r3
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <_exit>:

void _exit (int status)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003632:	f04f 31ff 	mov.w	r1, #4294967295
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7ff ffe7 	bl	800360a <_kill>
  while (1) {}    /* Make sure we hang here */
 800363c:	bf00      	nop
 800363e:	e7fd      	b.n	800363c <_exit+0x12>

08003640 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800364c:	2300      	movs	r3, #0
 800364e:	617b      	str	r3, [r7, #20]
 8003650:	e00a      	b.n	8003668 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003652:	f3af 8000 	nop.w
 8003656:	4601      	mov	r1, r0
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	1c5a      	adds	r2, r3, #1
 800365c:	60ba      	str	r2, [r7, #8]
 800365e:	b2ca      	uxtb	r2, r1
 8003660:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	3301      	adds	r3, #1
 8003666:	617b      	str	r3, [r7, #20]
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	429a      	cmp	r2, r3
 800366e:	dbf0      	blt.n	8003652 <_read+0x12>
  }

  return len;
 8003670:	687b      	ldr	r3, [r7, #4]
}
 8003672:	4618      	mov	r0, r3
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b086      	sub	sp, #24
 800367e:	af00      	add	r7, sp, #0
 8003680:	60f8      	str	r0, [r7, #12]
 8003682:	60b9      	str	r1, [r7, #8]
 8003684:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003686:	2300      	movs	r3, #0
 8003688:	617b      	str	r3, [r7, #20]
 800368a:	e009      	b.n	80036a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	60ba      	str	r2, [r7, #8]
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	4618      	mov	r0, r3
 8003696:	f000 fc2b 	bl	8003ef0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	3301      	adds	r3, #1
 800369e:	617b      	str	r3, [r7, #20]
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	dbf1      	blt.n	800368c <_write+0x12>
  }
  return len;
 80036a8:	687b      	ldr	r3, [r7, #4]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <_close>:

int _close(int file)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b083      	sub	sp, #12
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80036ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036be:	4618      	mov	r0, r3
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bc80      	pop	{r7}
 80036c6:	4770      	bx	lr

080036c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80036d8:	605a      	str	r2, [r3, #4]
  return 0;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bc80      	pop	{r7}
 80036e4:	4770      	bx	lr

080036e6 <_isatty>:

int _isatty(int file)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80036ee:	2301      	movs	r3, #1
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bc80      	pop	{r7}
 80036f8:	4770      	bx	lr

080036fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b085      	sub	sp, #20
 80036fe:	af00      	add	r7, sp, #0
 8003700:	60f8      	str	r0, [r7, #12]
 8003702:	60b9      	str	r1, [r7, #8]
 8003704:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	bc80      	pop	{r7}
 8003710:	4770      	bx	lr
	...

08003714 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800371c:	4a14      	ldr	r2, [pc, #80]	@ (8003770 <_sbrk+0x5c>)
 800371e:	4b15      	ldr	r3, [pc, #84]	@ (8003774 <_sbrk+0x60>)
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003728:	4b13      	ldr	r3, [pc, #76]	@ (8003778 <_sbrk+0x64>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d102      	bne.n	8003736 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003730:	4b11      	ldr	r3, [pc, #68]	@ (8003778 <_sbrk+0x64>)
 8003732:	4a12      	ldr	r2, [pc, #72]	@ (800377c <_sbrk+0x68>)
 8003734:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003736:	4b10      	ldr	r3, [pc, #64]	@ (8003778 <_sbrk+0x64>)
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4413      	add	r3, r2
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	429a      	cmp	r2, r3
 8003742:	d207      	bcs.n	8003754 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003744:	f005 ff48 	bl	80095d8 <__errno>
 8003748:	4603      	mov	r3, r0
 800374a:	220c      	movs	r2, #12
 800374c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800374e:	f04f 33ff 	mov.w	r3, #4294967295
 8003752:	e009      	b.n	8003768 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003754:	4b08      	ldr	r3, [pc, #32]	@ (8003778 <_sbrk+0x64>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800375a:	4b07      	ldr	r3, [pc, #28]	@ (8003778 <_sbrk+0x64>)
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4413      	add	r3, r2
 8003762:	4a05      	ldr	r2, [pc, #20]	@ (8003778 <_sbrk+0x64>)
 8003764:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003766:	68fb      	ldr	r3, [r7, #12]
}
 8003768:	4618      	mov	r0, r3
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	20005000 	.word	0x20005000
 8003774:	00000400 	.word	0x00000400
 8003778:	20000974 	.word	0x20000974
 800377c:	20000d48 	.word	0x20000d48

08003780 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003784:	bf00      	nop
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr

0800378c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003792:	f107 0308 	add.w	r3, r7, #8
 8003796:	2200      	movs	r2, #0
 8003798:	601a      	str	r2, [r3, #0]
 800379a:	605a      	str	r2, [r3, #4]
 800379c:	609a      	str	r2, [r3, #8]
 800379e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037a0:	463b      	mov	r3, r7
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
 80037a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80037a8:	4b1e      	ldr	r3, [pc, #120]	@ (8003824 <MX_TIM1_Init+0x98>)
 80037aa:	4a1f      	ldr	r2, [pc, #124]	@ (8003828 <MX_TIM1_Init+0x9c>)
 80037ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80037ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003824 <MX_TIM1_Init+0x98>)
 80037b0:	2247      	movs	r2, #71	@ 0x47
 80037b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003824 <MX_TIM1_Init+0x98>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 80037ba:	4b1a      	ldr	r3, [pc, #104]	@ (8003824 <MX_TIM1_Init+0x98>)
 80037bc:	f242 720f 	movw	r2, #9999	@ 0x270f
 80037c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037c2:	4b18      	ldr	r3, [pc, #96]	@ (8003824 <MX_TIM1_Init+0x98>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80037c8:	4b16      	ldr	r3, [pc, #88]	@ (8003824 <MX_TIM1_Init+0x98>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037ce:	4b15      	ldr	r3, [pc, #84]	@ (8003824 <MX_TIM1_Init+0x98>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80037d4:	4813      	ldr	r0, [pc, #76]	@ (8003824 <MX_TIM1_Init+0x98>)
 80037d6:	f002 fd85 	bl	80062e4 <HAL_TIM_Base_Init>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80037e0:	f7ff fd46 	bl	8003270 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80037e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80037ea:	f107 0308 	add.w	r3, r7, #8
 80037ee:	4619      	mov	r1, r3
 80037f0:	480c      	ldr	r0, [pc, #48]	@ (8003824 <MX_TIM1_Init+0x98>)
 80037f2:	f003 f999 	bl	8006b28 <HAL_TIM_ConfigClockSource>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80037fc:	f7ff fd38 	bl	8003270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003800:	2300      	movs	r3, #0
 8003802:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003804:	2300      	movs	r3, #0
 8003806:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003808:	463b      	mov	r3, r7
 800380a:	4619      	mov	r1, r3
 800380c:	4805      	ldr	r0, [pc, #20]	@ (8003824 <MX_TIM1_Init+0x98>)
 800380e:	f003 fd27 	bl	8007260 <HAL_TIMEx_MasterConfigSynchronization>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003818:	f7ff fd2a 	bl	8003270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800381c:	bf00      	nop
 800381e:	3718      	adds	r7, #24
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	20000998 	.word	0x20000998
 8003828:	40012c00 	.word	0x40012c00

0800382c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003832:	f107 0308 	add.w	r3, r7, #8
 8003836:	2200      	movs	r2, #0
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	605a      	str	r2, [r3, #4]
 800383c:	609a      	str	r2, [r3, #8]
 800383e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003840:	463b      	mov	r3, r7
 8003842:	2200      	movs	r2, #0
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003848:	4b1d      	ldr	r3, [pc, #116]	@ (80038c0 <MX_TIM2_Init+0x94>)
 800384a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800384e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8003850:	4b1b      	ldr	r3, [pc, #108]	@ (80038c0 <MX_TIM2_Init+0x94>)
 8003852:	2247      	movs	r2, #71	@ 0x47
 8003854:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003856:	4b1a      	ldr	r3, [pc, #104]	@ (80038c0 <MX_TIM2_Init+0x94>)
 8003858:	2200      	movs	r2, #0
 800385a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800385c:	4b18      	ldr	r3, [pc, #96]	@ (80038c0 <MX_TIM2_Init+0x94>)
 800385e:	2263      	movs	r2, #99	@ 0x63
 8003860:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003862:	4b17      	ldr	r3, [pc, #92]	@ (80038c0 <MX_TIM2_Init+0x94>)
 8003864:	2200      	movs	r2, #0
 8003866:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003868:	4b15      	ldr	r3, [pc, #84]	@ (80038c0 <MX_TIM2_Init+0x94>)
 800386a:	2200      	movs	r2, #0
 800386c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800386e:	4814      	ldr	r0, [pc, #80]	@ (80038c0 <MX_TIM2_Init+0x94>)
 8003870:	f002 fd38 	bl	80062e4 <HAL_TIM_Base_Init>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800387a:	f7ff fcf9 	bl	8003270 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800387e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003882:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003884:	f107 0308 	add.w	r3, r7, #8
 8003888:	4619      	mov	r1, r3
 800388a:	480d      	ldr	r0, [pc, #52]	@ (80038c0 <MX_TIM2_Init+0x94>)
 800388c:	f003 f94c 	bl	8006b28 <HAL_TIM_ConfigClockSource>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8003896:	f7ff fceb 	bl	8003270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800389a:	2300      	movs	r3, #0
 800389c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800389e:	2300      	movs	r3, #0
 80038a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80038a2:	463b      	mov	r3, r7
 80038a4:	4619      	mov	r1, r3
 80038a6:	4806      	ldr	r0, [pc, #24]	@ (80038c0 <MX_TIM2_Init+0x94>)
 80038a8:	f003 fcda 	bl	8007260 <HAL_TIMEx_MasterConfigSynchronization>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80038b2:	f7ff fcdd 	bl	8003270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80038b6:	bf00      	nop
 80038b8:	3718      	adds	r7, #24
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	200009e0 	.word	0x200009e0

080038c4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b08e      	sub	sp, #56	@ 0x38
 80038c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80038ce:	2200      	movs	r2, #0
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	605a      	str	r2, [r3, #4]
 80038d4:	609a      	str	r2, [r3, #8]
 80038d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038d8:	f107 0320 	add.w	r3, r7, #32
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038e2:	1d3b      	adds	r3, r7, #4
 80038e4:	2200      	movs	r2, #0
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	605a      	str	r2, [r3, #4]
 80038ea:	609a      	str	r2, [r3, #8]
 80038ec:	60da      	str	r2, [r3, #12]
 80038ee:	611a      	str	r2, [r3, #16]
 80038f0:	615a      	str	r2, [r3, #20]
 80038f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80038f4:	4b32      	ldr	r3, [pc, #200]	@ (80039c0 <MX_TIM3_Init+0xfc>)
 80038f6:	4a33      	ldr	r2, [pc, #204]	@ (80039c4 <MX_TIM3_Init+0x100>)
 80038f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80038fa:	4b31      	ldr	r3, [pc, #196]	@ (80039c0 <MX_TIM3_Init+0xfc>)
 80038fc:	2247      	movs	r2, #71	@ 0x47
 80038fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003900:	4b2f      	ldr	r3, [pc, #188]	@ (80039c0 <MX_TIM3_Init+0xfc>)
 8003902:	2200      	movs	r2, #0
 8003904:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3999;
 8003906:	4b2e      	ldr	r3, [pc, #184]	@ (80039c0 <MX_TIM3_Init+0xfc>)
 8003908:	f640 729f 	movw	r2, #3999	@ 0xf9f
 800390c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800390e:	4b2c      	ldr	r3, [pc, #176]	@ (80039c0 <MX_TIM3_Init+0xfc>)
 8003910:	2200      	movs	r2, #0
 8003912:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003914:	4b2a      	ldr	r3, [pc, #168]	@ (80039c0 <MX_TIM3_Init+0xfc>)
 8003916:	2200      	movs	r2, #0
 8003918:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800391a:	4829      	ldr	r0, [pc, #164]	@ (80039c0 <MX_TIM3_Init+0xfc>)
 800391c:	f002 fce2 	bl	80062e4 <HAL_TIM_Base_Init>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003926:	f7ff fca3 	bl	8003270 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800392a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800392e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003930:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003934:	4619      	mov	r1, r3
 8003936:	4822      	ldr	r0, [pc, #136]	@ (80039c0 <MX_TIM3_Init+0xfc>)
 8003938:	f003 f8f6 	bl	8006b28 <HAL_TIM_ConfigClockSource>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003942:	f7ff fc95 	bl	8003270 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003946:	481e      	ldr	r0, [pc, #120]	@ (80039c0 <MX_TIM3_Init+0xfc>)
 8003948:	f002 fdde 	bl	8006508 <HAL_TIM_PWM_Init>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003952:	f7ff fc8d 	bl	8003270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003956:	2300      	movs	r3, #0
 8003958:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800395a:	2300      	movs	r3, #0
 800395c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800395e:	f107 0320 	add.w	r3, r7, #32
 8003962:	4619      	mov	r1, r3
 8003964:	4816      	ldr	r0, [pc, #88]	@ (80039c0 <MX_TIM3_Init+0xfc>)
 8003966:	f003 fc7b 	bl	8007260 <HAL_TIMEx_MasterConfigSynchronization>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003970:	f7ff fc7e 	bl	8003270 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003974:	2360      	movs	r3, #96	@ 0x60
 8003976:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003978:	2300      	movs	r3, #0
 800397a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800397c:	2300      	movs	r3, #0
 800397e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003980:	2300      	movs	r3, #0
 8003982:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003984:	1d3b      	adds	r3, r7, #4
 8003986:	2200      	movs	r2, #0
 8003988:	4619      	mov	r1, r3
 800398a:	480d      	ldr	r0, [pc, #52]	@ (80039c0 <MX_TIM3_Init+0xfc>)
 800398c:	f003 f80a 	bl	80069a4 <HAL_TIM_PWM_ConfigChannel>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8003996:	f7ff fc6b 	bl	8003270 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800399a:	1d3b      	adds	r3, r7, #4
 800399c:	2204      	movs	r2, #4
 800399e:	4619      	mov	r1, r3
 80039a0:	4807      	ldr	r0, [pc, #28]	@ (80039c0 <MX_TIM3_Init+0xfc>)
 80039a2:	f002 ffff 	bl	80069a4 <HAL_TIM_PWM_ConfigChannel>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80039ac:	f7ff fc60 	bl	8003270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80039b0:	4803      	ldr	r0, [pc, #12]	@ (80039c0 <MX_TIM3_Init+0xfc>)
 80039b2:	f000 f903 	bl	8003bbc <HAL_TIM_MspPostInit>

}
 80039b6:	bf00      	nop
 80039b8:	3738      	adds	r7, #56	@ 0x38
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	20000a28 	.word	0x20000a28
 80039c4:	40000400 	.word	0x40000400

080039c8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b08e      	sub	sp, #56	@ 0x38
 80039cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80039d2:	2200      	movs	r2, #0
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	605a      	str	r2, [r3, #4]
 80039d8:	609a      	str	r2, [r3, #8]
 80039da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039dc:	f107 0320 	add.w	r3, r7, #32
 80039e0:	2200      	movs	r2, #0
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039e6:	1d3b      	adds	r3, r7, #4
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	605a      	str	r2, [r3, #4]
 80039ee:	609a      	str	r2, [r3, #8]
 80039f0:	60da      	str	r2, [r3, #12]
 80039f2:	611a      	str	r2, [r3, #16]
 80039f4:	615a      	str	r2, [r3, #20]
 80039f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80039f8:	4b32      	ldr	r3, [pc, #200]	@ (8003ac4 <MX_TIM4_Init+0xfc>)
 80039fa:	4a33      	ldr	r2, [pc, #204]	@ (8003ac8 <MX_TIM4_Init+0x100>)
 80039fc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 80039fe:	4b31      	ldr	r3, [pc, #196]	@ (8003ac4 <MX_TIM4_Init+0xfc>)
 8003a00:	2247      	movs	r2, #71	@ 0x47
 8003a02:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a04:	4b2f      	ldr	r3, [pc, #188]	@ (8003ac4 <MX_TIM4_Init+0xfc>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2500;
 8003a0a:	4b2e      	ldr	r3, [pc, #184]	@ (8003ac4 <MX_TIM4_Init+0xfc>)
 8003a0c:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8003a10:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a12:	4b2c      	ldr	r3, [pc, #176]	@ (8003ac4 <MX_TIM4_Init+0xfc>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a18:	4b2a      	ldr	r3, [pc, #168]	@ (8003ac4 <MX_TIM4_Init+0xfc>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003a1e:	4829      	ldr	r0, [pc, #164]	@ (8003ac4 <MX_TIM4_Init+0xfc>)
 8003a20:	f002 fc60 	bl	80062e4 <HAL_TIM_Base_Init>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8003a2a:	f7ff fc21 	bl	8003270 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a32:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003a34:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4822      	ldr	r0, [pc, #136]	@ (8003ac4 <MX_TIM4_Init+0xfc>)
 8003a3c:	f003 f874 	bl	8006b28 <HAL_TIM_ConfigClockSource>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8003a46:	f7ff fc13 	bl	8003270 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003a4a:	481e      	ldr	r0, [pc, #120]	@ (8003ac4 <MX_TIM4_Init+0xfc>)
 8003a4c:	f002 fd5c 	bl	8006508 <HAL_TIM_PWM_Init>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8003a56:	f7ff fc0b 	bl	8003270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003a62:	f107 0320 	add.w	r3, r7, #32
 8003a66:	4619      	mov	r1, r3
 8003a68:	4816      	ldr	r0, [pc, #88]	@ (8003ac4 <MX_TIM4_Init+0xfc>)
 8003a6a:	f003 fbf9 	bl	8007260 <HAL_TIMEx_MasterConfigSynchronization>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8003a74:	f7ff fbfc 	bl	8003270 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a78:	2360      	movs	r3, #96	@ 0x60
 8003a7a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a80:	2300      	movs	r3, #0
 8003a82:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003a84:	2304      	movs	r3, #4
 8003a86:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003a88:	1d3b      	adds	r3, r7, #4
 8003a8a:	2208      	movs	r2, #8
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	480d      	ldr	r0, [pc, #52]	@ (8003ac4 <MX_TIM4_Init+0xfc>)
 8003a90:	f002 ff88 	bl	80069a4 <HAL_TIM_PWM_ConfigChannel>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8003a9a:	f7ff fbe9 	bl	8003270 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003a9e:	1d3b      	adds	r3, r7, #4
 8003aa0:	220c      	movs	r2, #12
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	4807      	ldr	r0, [pc, #28]	@ (8003ac4 <MX_TIM4_Init+0xfc>)
 8003aa6:	f002 ff7d 	bl	80069a4 <HAL_TIM_PWM_ConfigChannel>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8003ab0:	f7ff fbde 	bl	8003270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003ab4:	4803      	ldr	r0, [pc, #12]	@ (8003ac4 <MX_TIM4_Init+0xfc>)
 8003ab6:	f000 f881 	bl	8003bbc <HAL_TIM_MspPostInit>

}
 8003aba:	bf00      	nop
 8003abc:	3738      	adds	r7, #56	@ 0x38
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20000a70 	.word	0x20000a70
 8003ac8:	40000800 	.word	0x40000800

08003acc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a34      	ldr	r2, [pc, #208]	@ (8003bac <HAL_TIM_Base_MspInit+0xe0>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d114      	bne.n	8003b08 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003ade:	4b34      	ldr	r3, [pc, #208]	@ (8003bb0 <HAL_TIM_Base_MspInit+0xe4>)
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	4a33      	ldr	r2, [pc, #204]	@ (8003bb0 <HAL_TIM_Base_MspInit+0xe4>)
 8003ae4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003ae8:	6193      	str	r3, [r2, #24]
 8003aea:	4b31      	ldr	r3, [pc, #196]	@ (8003bb0 <HAL_TIM_Base_MspInit+0xe4>)
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003af2:	617b      	str	r3, [r7, #20]
 8003af4:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 3, 0);
 8003af6:	2200      	movs	r2, #0
 8003af8:	2103      	movs	r1, #3
 8003afa:	2019      	movs	r0, #25
 8003afc:	f001 f825 	bl	8004b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003b00:	2019      	movs	r0, #25
 8003b02:	f001 f83e 	bl	8004b82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003b06:	e04c      	b.n	8003ba2 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM2)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b10:	d114      	bne.n	8003b3c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b12:	4b27      	ldr	r3, [pc, #156]	@ (8003bb0 <HAL_TIM_Base_MspInit+0xe4>)
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	4a26      	ldr	r2, [pc, #152]	@ (8003bb0 <HAL_TIM_Base_MspInit+0xe4>)
 8003b18:	f043 0301 	orr.w	r3, r3, #1
 8003b1c:	61d3      	str	r3, [r2, #28]
 8003b1e:	4b24      	ldr	r3, [pc, #144]	@ (8003bb0 <HAL_TIM_Base_MspInit+0xe4>)
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	613b      	str	r3, [r7, #16]
 8003b28:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	201c      	movs	r0, #28
 8003b30:	f001 f80b 	bl	8004b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003b34:	201c      	movs	r0, #28
 8003b36:	f001 f824 	bl	8004b82 <HAL_NVIC_EnableIRQ>
}
 8003b3a:	e032      	b.n	8003ba2 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM3)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a1c      	ldr	r2, [pc, #112]	@ (8003bb4 <HAL_TIM_Base_MspInit+0xe8>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d114      	bne.n	8003b70 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b46:	4b1a      	ldr	r3, [pc, #104]	@ (8003bb0 <HAL_TIM_Base_MspInit+0xe4>)
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	4a19      	ldr	r2, [pc, #100]	@ (8003bb0 <HAL_TIM_Base_MspInit+0xe4>)
 8003b4c:	f043 0302 	orr.w	r3, r3, #2
 8003b50:	61d3      	str	r3, [r2, #28]
 8003b52:	4b17      	ldr	r3, [pc, #92]	@ (8003bb0 <HAL_TIM_Base_MspInit+0xe4>)
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003b5e:	2200      	movs	r2, #0
 8003b60:	2100      	movs	r1, #0
 8003b62:	201d      	movs	r0, #29
 8003b64:	f000 fff1 	bl	8004b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003b68:	201d      	movs	r0, #29
 8003b6a:	f001 f80a 	bl	8004b82 <HAL_NVIC_EnableIRQ>
}
 8003b6e:	e018      	b.n	8003ba2 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a10      	ldr	r2, [pc, #64]	@ (8003bb8 <HAL_TIM_Base_MspInit+0xec>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d113      	bne.n	8003ba2 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003bb0 <HAL_TIM_Base_MspInit+0xe4>)
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	4a0c      	ldr	r2, [pc, #48]	@ (8003bb0 <HAL_TIM_Base_MspInit+0xe4>)
 8003b80:	f043 0304 	orr.w	r3, r3, #4
 8003b84:	61d3      	str	r3, [r2, #28]
 8003b86:	4b0a      	ldr	r3, [pc, #40]	@ (8003bb0 <HAL_TIM_Base_MspInit+0xe4>)
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	f003 0304 	and.w	r3, r3, #4
 8003b8e:	60bb      	str	r3, [r7, #8]
 8003b90:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003b92:	2200      	movs	r2, #0
 8003b94:	2100      	movs	r1, #0
 8003b96:	201e      	movs	r0, #30
 8003b98:	f000 ffd7 	bl	8004b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003b9c:	201e      	movs	r0, #30
 8003b9e:	f000 fff0 	bl	8004b82 <HAL_NVIC_EnableIRQ>
}
 8003ba2:	bf00      	nop
 8003ba4:	3718      	adds	r7, #24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	40012c00 	.word	0x40012c00
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	40000400 	.word	0x40000400
 8003bb8:	40000800 	.word	0x40000800

08003bbc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b088      	sub	sp, #32
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bc4:	f107 0310 	add.w	r3, r7, #16
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	605a      	str	r2, [r3, #4]
 8003bce:	609a      	str	r2, [r3, #8]
 8003bd0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a1f      	ldr	r2, [pc, #124]	@ (8003c54 <HAL_TIM_MspPostInit+0x98>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d118      	bne.n	8003c0e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bdc:	4b1e      	ldr	r3, [pc, #120]	@ (8003c58 <HAL_TIM_MspPostInit+0x9c>)
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	4a1d      	ldr	r2, [pc, #116]	@ (8003c58 <HAL_TIM_MspPostInit+0x9c>)
 8003be2:	f043 0304 	orr.w	r3, r3, #4
 8003be6:	6193      	str	r3, [r2, #24]
 8003be8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c58 <HAL_TIM_MspPostInit+0x9c>)
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	60fb      	str	r3, [r7, #12]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWM_MOTOR_B_Pin|PWM_MOTOR_A_Pin;
 8003bf4:	23c0      	movs	r3, #192	@ 0xc0
 8003bf6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c00:	f107 0310 	add.w	r3, r7, #16
 8003c04:	4619      	mov	r1, r3
 8003c06:	4815      	ldr	r0, [pc, #84]	@ (8003c5c <HAL_TIM_MspPostInit+0xa0>)
 8003c08:	f001 fbd0 	bl	80053ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003c0c:	e01d      	b.n	8003c4a <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM4)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a13      	ldr	r2, [pc, #76]	@ (8003c60 <HAL_TIM_MspPostInit+0xa4>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d118      	bne.n	8003c4a <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c18:	4b0f      	ldr	r3, [pc, #60]	@ (8003c58 <HAL_TIM_MspPostInit+0x9c>)
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	4a0e      	ldr	r2, [pc, #56]	@ (8003c58 <HAL_TIM_MspPostInit+0x9c>)
 8003c1e:	f043 0308 	orr.w	r3, r3, #8
 8003c22:	6193      	str	r3, [r2, #24]
 8003c24:	4b0c      	ldr	r3, [pc, #48]	@ (8003c58 <HAL_TIM_MspPostInit+0x9c>)
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	f003 0308 	and.w	r3, r3, #8
 8003c2c:	60bb      	str	r3, [r7, #8]
 8003c2e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = WAVE_BCH_EN_Pin|WAVE_ACH_EN_Pin;
 8003c30:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003c34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c36:	2302      	movs	r3, #2
 8003c38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c3e:	f107 0310 	add.w	r3, r7, #16
 8003c42:	4619      	mov	r1, r3
 8003c44:	4807      	ldr	r0, [pc, #28]	@ (8003c64 <HAL_TIM_MspPostInit+0xa8>)
 8003c46:	f001 fbb1 	bl	80053ac <HAL_GPIO_Init>
}
 8003c4a:	bf00      	nop
 8003c4c:	3720      	adds	r7, #32
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40000400 	.word	0x40000400
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	40010800 	.word	0x40010800
 8003c60:	40000800 	.word	0x40000800
 8003c64:	40010c00 	.word	0x40010c00

08003c68 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003c6c:	4b11      	ldr	r3, [pc, #68]	@ (8003cb4 <MX_USART1_UART_Init+0x4c>)
 8003c6e:	4a12      	ldr	r2, [pc, #72]	@ (8003cb8 <MX_USART1_UART_Init+0x50>)
 8003c70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8003c72:	4b10      	ldr	r3, [pc, #64]	@ (8003cb4 <MX_USART1_UART_Init+0x4c>)
 8003c74:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 8003c78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8003cb4 <MX_USART1_UART_Init+0x4c>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003c80:	4b0c      	ldr	r3, [pc, #48]	@ (8003cb4 <MX_USART1_UART_Init+0x4c>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003c86:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb4 <MX_USART1_UART_Init+0x4c>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003c8c:	4b09      	ldr	r3, [pc, #36]	@ (8003cb4 <MX_USART1_UART_Init+0x4c>)
 8003c8e:	220c      	movs	r2, #12
 8003c90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c92:	4b08      	ldr	r3, [pc, #32]	@ (8003cb4 <MX_USART1_UART_Init+0x4c>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c98:	4b06      	ldr	r3, [pc, #24]	@ (8003cb4 <MX_USART1_UART_Init+0x4c>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c9e:	4805      	ldr	r0, [pc, #20]	@ (8003cb4 <MX_USART1_UART_Init+0x4c>)
 8003ca0:	f003 fb4e 	bl	8007340 <HAL_UART_Init>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003caa:	f7ff fae1 	bl	8003270 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003cae:	bf00      	nop
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	20000ab8 	.word	0x20000ab8
 8003cb8:	40013800 	.word	0x40013800

08003cbc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003cc0:	4b11      	ldr	r3, [pc, #68]	@ (8003d08 <MX_USART3_UART_Init+0x4c>)
 8003cc2:	4a12      	ldr	r2, [pc, #72]	@ (8003d0c <MX_USART3_UART_Init+0x50>)
 8003cc4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 8003cc6:	4b10      	ldr	r3, [pc, #64]	@ (8003d08 <MX_USART3_UART_Init+0x4c>)
 8003cc8:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8003ccc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003cce:	4b0e      	ldr	r3, [pc, #56]	@ (8003d08 <MX_USART3_UART_Init+0x4c>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8003d08 <MX_USART3_UART_Init+0x4c>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003cda:	4b0b      	ldr	r3, [pc, #44]	@ (8003d08 <MX_USART3_UART_Init+0x4c>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003ce0:	4b09      	ldr	r3, [pc, #36]	@ (8003d08 <MX_USART3_UART_Init+0x4c>)
 8003ce2:	220c      	movs	r2, #12
 8003ce4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ce6:	4b08      	ldr	r3, [pc, #32]	@ (8003d08 <MX_USART3_UART_Init+0x4c>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cec:	4b06      	ldr	r3, [pc, #24]	@ (8003d08 <MX_USART3_UART_Init+0x4c>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003cf2:	4805      	ldr	r0, [pc, #20]	@ (8003d08 <MX_USART3_UART_Init+0x4c>)
 8003cf4:	f003 fb24 	bl	8007340 <HAL_UART_Init>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003cfe:	f7ff fab7 	bl	8003270 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003d02:	bf00      	nop
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	20000b00 	.word	0x20000b00
 8003d0c:	40004800 	.word	0x40004800

08003d10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b08a      	sub	sp, #40	@ 0x28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d18:	f107 0318 	add.w	r3, r7, #24
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	605a      	str	r2, [r3, #4]
 8003d22:	609a      	str	r2, [r3, #8]
 8003d24:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a68      	ldr	r2, [pc, #416]	@ (8003ecc <HAL_UART_MspInit+0x1bc>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d13a      	bne.n	8003da6 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d30:	4b67      	ldr	r3, [pc, #412]	@ (8003ed0 <HAL_UART_MspInit+0x1c0>)
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	4a66      	ldr	r2, [pc, #408]	@ (8003ed0 <HAL_UART_MspInit+0x1c0>)
 8003d36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d3a:	6193      	str	r3, [r2, #24]
 8003d3c:	4b64      	ldr	r3, [pc, #400]	@ (8003ed0 <HAL_UART_MspInit+0x1c0>)
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d44:	617b      	str	r3, [r7, #20]
 8003d46:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d48:	4b61      	ldr	r3, [pc, #388]	@ (8003ed0 <HAL_UART_MspInit+0x1c0>)
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	4a60      	ldr	r2, [pc, #384]	@ (8003ed0 <HAL_UART_MspInit+0x1c0>)
 8003d4e:	f043 0304 	orr.w	r3, r3, #4
 8003d52:	6193      	str	r3, [r2, #24]
 8003d54:	4b5e      	ldr	r3, [pc, #376]	@ (8003ed0 <HAL_UART_MspInit+0x1c0>)
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	613b      	str	r3, [r7, #16]
 8003d5e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin;
 8003d60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d66:	2302      	movs	r3, #2
 8003d68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8003d6e:	f107 0318 	add.w	r3, r7, #24
 8003d72:	4619      	mov	r1, r3
 8003d74:	4857      	ldr	r0, [pc, #348]	@ (8003ed4 <HAL_UART_MspInit+0x1c4>)
 8003d76:	f001 fb19 	bl	80053ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART1_RX_Pin;
 8003d7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d80:	2300      	movs	r3, #0
 8003d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d84:	2300      	movs	r3, #0
 8003d86:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(USART1_RX_GPIO_Port, &GPIO_InitStruct);
 8003d88:	f107 0318 	add.w	r3, r7, #24
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	4851      	ldr	r0, [pc, #324]	@ (8003ed4 <HAL_UART_MspInit+0x1c4>)
 8003d90:	f001 fb0c 	bl	80053ac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003d94:	2200      	movs	r2, #0
 8003d96:	2100      	movs	r1, #0
 8003d98:	2025      	movs	r0, #37	@ 0x25
 8003d9a:	f000 fed6 	bl	8004b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003d9e:	2025      	movs	r0, #37	@ 0x25
 8003da0:	f000 feef 	bl	8004b82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003da4:	e08d      	b.n	8003ec2 <HAL_UART_MspInit+0x1b2>
  else if(uartHandle->Instance==USART3)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a4b      	ldr	r2, [pc, #300]	@ (8003ed8 <HAL_UART_MspInit+0x1c8>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	f040 8088 	bne.w	8003ec2 <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003db2:	4b47      	ldr	r3, [pc, #284]	@ (8003ed0 <HAL_UART_MspInit+0x1c0>)
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	4a46      	ldr	r2, [pc, #280]	@ (8003ed0 <HAL_UART_MspInit+0x1c0>)
 8003db8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003dbc:	61d3      	str	r3, [r2, #28]
 8003dbe:	4b44      	ldr	r3, [pc, #272]	@ (8003ed0 <HAL_UART_MspInit+0x1c0>)
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003dc6:	60fb      	str	r3, [r7, #12]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dca:	4b41      	ldr	r3, [pc, #260]	@ (8003ed0 <HAL_UART_MspInit+0x1c0>)
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	4a40      	ldr	r2, [pc, #256]	@ (8003ed0 <HAL_UART_MspInit+0x1c0>)
 8003dd0:	f043 0308 	orr.w	r3, r3, #8
 8003dd4:	6193      	str	r3, [r2, #24]
 8003dd6:	4b3e      	ldr	r3, [pc, #248]	@ (8003ed0 <HAL_UART_MspInit+0x1c0>)
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	f003 0308 	and.w	r3, r3, #8
 8003dde:	60bb      	str	r3, [r7, #8]
 8003de0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART3_TX_Pin;
 8003de2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003de8:	2302      	movs	r3, #2
 8003dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003dec:	2303      	movs	r3, #3
 8003dee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(USART3_TX_GPIO_Port, &GPIO_InitStruct);
 8003df0:	f107 0318 	add.w	r3, r7, #24
 8003df4:	4619      	mov	r1, r3
 8003df6:	4839      	ldr	r0, [pc, #228]	@ (8003edc <HAL_UART_MspInit+0x1cc>)
 8003df8:	f001 fad8 	bl	80053ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART3_RX_Pin;
 8003dfc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e02:	2300      	movs	r3, #0
 8003e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e06:	2300      	movs	r3, #0
 8003e08:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(USART3_RX_GPIO_Port, &GPIO_InitStruct);
 8003e0a:	f107 0318 	add.w	r3, r7, #24
 8003e0e:	4619      	mov	r1, r3
 8003e10:	4832      	ldr	r0, [pc, #200]	@ (8003edc <HAL_UART_MspInit+0x1cc>)
 8003e12:	f001 facb 	bl	80053ac <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8003e16:	4b32      	ldr	r3, [pc, #200]	@ (8003ee0 <HAL_UART_MspInit+0x1d0>)
 8003e18:	4a32      	ldr	r2, [pc, #200]	@ (8003ee4 <HAL_UART_MspInit+0x1d4>)
 8003e1a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e1c:	4b30      	ldr	r3, [pc, #192]	@ (8003ee0 <HAL_UART_MspInit+0x1d0>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e22:	4b2f      	ldr	r3, [pc, #188]	@ (8003ee0 <HAL_UART_MspInit+0x1d0>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e28:	4b2d      	ldr	r3, [pc, #180]	@ (8003ee0 <HAL_UART_MspInit+0x1d0>)
 8003e2a:	2280      	movs	r2, #128	@ 0x80
 8003e2c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e2e:	4b2c      	ldr	r3, [pc, #176]	@ (8003ee0 <HAL_UART_MspInit+0x1d0>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e34:	4b2a      	ldr	r3, [pc, #168]	@ (8003ee0 <HAL_UART_MspInit+0x1d0>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003e3a:	4b29      	ldr	r3, [pc, #164]	@ (8003ee0 <HAL_UART_MspInit+0x1d0>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003e40:	4b27      	ldr	r3, [pc, #156]	@ (8003ee0 <HAL_UART_MspInit+0x1d0>)
 8003e42:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e46:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003e48:	4825      	ldr	r0, [pc, #148]	@ (8003ee0 <HAL_UART_MspInit+0x1d0>)
 8003e4a:	f000 feb5 	bl	8004bb8 <HAL_DMA_Init>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <HAL_UART_MspInit+0x148>
      Error_Handler();
 8003e54:	f7ff fa0c 	bl	8003270 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a21      	ldr	r2, [pc, #132]	@ (8003ee0 <HAL_UART_MspInit+0x1d0>)
 8003e5c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003e5e:	4a20      	ldr	r2, [pc, #128]	@ (8003ee0 <HAL_UART_MspInit+0x1d0>)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8003e64:	4b20      	ldr	r3, [pc, #128]	@ (8003ee8 <HAL_UART_MspInit+0x1d8>)
 8003e66:	4a21      	ldr	r2, [pc, #132]	@ (8003eec <HAL_UART_MspInit+0x1dc>)
 8003e68:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e6a:	4b1f      	ldr	r3, [pc, #124]	@ (8003ee8 <HAL_UART_MspInit+0x1d8>)
 8003e6c:	2210      	movs	r2, #16
 8003e6e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e70:	4b1d      	ldr	r3, [pc, #116]	@ (8003ee8 <HAL_UART_MspInit+0x1d8>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003e76:	4b1c      	ldr	r3, [pc, #112]	@ (8003ee8 <HAL_UART_MspInit+0x1d8>)
 8003e78:	2280      	movs	r2, #128	@ 0x80
 8003e7a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ee8 <HAL_UART_MspInit+0x1d8>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e82:	4b19      	ldr	r3, [pc, #100]	@ (8003ee8 <HAL_UART_MspInit+0x1d8>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003e88:	4b17      	ldr	r3, [pc, #92]	@ (8003ee8 <HAL_UART_MspInit+0x1d8>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003e8e:	4b16      	ldr	r3, [pc, #88]	@ (8003ee8 <HAL_UART_MspInit+0x1d8>)
 8003e90:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003e94:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003e96:	4814      	ldr	r0, [pc, #80]	@ (8003ee8 <HAL_UART_MspInit+0x1d8>)
 8003e98:	f000 fe8e 	bl	8004bb8 <HAL_DMA_Init>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <HAL_UART_MspInit+0x196>
      Error_Handler();
 8003ea2:	f7ff f9e5 	bl	8003270 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a0f      	ldr	r2, [pc, #60]	@ (8003ee8 <HAL_UART_MspInit+0x1d8>)
 8003eaa:	639a      	str	r2, [r3, #56]	@ 0x38
 8003eac:	4a0e      	ldr	r2, [pc, #56]	@ (8003ee8 <HAL_UART_MspInit+0x1d8>)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 2);
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	2027      	movs	r0, #39	@ 0x27
 8003eb8:	f000 fe47 	bl	8004b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003ebc:	2027      	movs	r0, #39	@ 0x27
 8003ebe:	f000 fe60 	bl	8004b82 <HAL_NVIC_EnableIRQ>
}
 8003ec2:	bf00      	nop
 8003ec4:	3728      	adds	r7, #40	@ 0x28
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	40013800 	.word	0x40013800
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	40010800 	.word	0x40010800
 8003ed8:	40004800 	.word	0x40004800
 8003edc:	40010c00 	.word	0x40010c00
 8003ee0:	20000b48 	.word	0x20000b48
 8003ee4:	40020030 	.word	0x40020030
 8003ee8:	20000b8c 	.word	0x20000b8c
 8003eec:	4002001c 	.word	0x4002001c

08003ef0 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch,1,HAL_MAX_DELAY);
 8003ef8:	1d39      	adds	r1, r7, #4
 8003efa:	f04f 33ff 	mov.w	r3, #4294967295
 8003efe:	2201      	movs	r2, #1
 8003f00:	4803      	ldr	r0, [pc, #12]	@ (8003f10 <__io_putchar+0x20>)
 8003f02:	f003 fa6d 	bl	80073e0 <HAL_UART_Transmit>
    return ch;
 8003f06:	687b      	ldr	r3, [r7, #4]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3708      	adds	r7, #8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	20000ab8 	.word	0x20000ab8

08003f14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003f14:	f7ff fc34 	bl	8003780 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f18:	480b      	ldr	r0, [pc, #44]	@ (8003f48 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003f1a:	490c      	ldr	r1, [pc, #48]	@ (8003f4c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003f1c:	4a0c      	ldr	r2, [pc, #48]	@ (8003f50 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f20:	e002      	b.n	8003f28 <LoopCopyDataInit>

08003f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f26:	3304      	adds	r3, #4

08003f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f2c:	d3f9      	bcc.n	8003f22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f2e:	4a09      	ldr	r2, [pc, #36]	@ (8003f54 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003f30:	4c09      	ldr	r4, [pc, #36]	@ (8003f58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f34:	e001      	b.n	8003f3a <LoopFillZerobss>

08003f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f38:	3204      	adds	r2, #4

08003f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f3c:	d3fb      	bcc.n	8003f36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f3e:	f005 fb51 	bl	80095e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003f42:	f7ff f821 	bl	8002f88 <main>
  bx lr
 8003f46:	4770      	bx	lr
  ldr r0, =_sdata
 8003f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f4c:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 8003f50:	0800d170 	.word	0x0800d170
  ldr r2, =_sbss
 8003f54:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8003f58:	20000d44 	.word	0x20000d44

08003f5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003f5c:	e7fe      	b.n	8003f5c <ADC1_2_IRQHandler>
	...

08003f60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f64:	4b08      	ldr	r3, [pc, #32]	@ (8003f88 <HAL_Init+0x28>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a07      	ldr	r2, [pc, #28]	@ (8003f88 <HAL_Init+0x28>)
 8003f6a:	f043 0310 	orr.w	r3, r3, #16
 8003f6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f70:	2003      	movs	r0, #3
 8003f72:	f000 fddf 	bl	8004b34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f76:	2000      	movs	r0, #0
 8003f78:	f000 f808 	bl	8003f8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f7c:	f7ff f9b8 	bl	80032f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	40022000 	.word	0x40022000

08003f8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f94:	4b12      	ldr	r3, [pc, #72]	@ (8003fe0 <HAL_InitTick+0x54>)
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	4b12      	ldr	r3, [pc, #72]	@ (8003fe4 <HAL_InitTick+0x58>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 fdf7 	bl	8004b9e <HAL_SYSTICK_Config>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e00e      	b.n	8003fd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b0f      	cmp	r3, #15
 8003fbe:	d80a      	bhi.n	8003fd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc8:	f000 fdbf 	bl	8004b4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003fcc:	4a06      	ldr	r2, [pc, #24]	@ (8003fe8 <HAL_InitTick+0x5c>)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	e000      	b.n	8003fd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	20000064 	.word	0x20000064
 8003fe4:	2000006c 	.word	0x2000006c
 8003fe8:	20000068 	.word	0x20000068

08003fec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ff0:	4b05      	ldr	r3, [pc, #20]	@ (8004008 <HAL_IncTick+0x1c>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	4b05      	ldr	r3, [pc, #20]	@ (800400c <HAL_IncTick+0x20>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	4a03      	ldr	r2, [pc, #12]	@ (800400c <HAL_IncTick+0x20>)
 8003ffe:	6013      	str	r3, [r2, #0]
}
 8004000:	bf00      	nop
 8004002:	46bd      	mov	sp, r7
 8004004:	bc80      	pop	{r7}
 8004006:	4770      	bx	lr
 8004008:	2000006c 	.word	0x2000006c
 800400c:	20000bd0 	.word	0x20000bd0

08004010 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
  return uwTick;
 8004014:	4b02      	ldr	r3, [pc, #8]	@ (8004020 <HAL_GetTick+0x10>)
 8004016:	681b      	ldr	r3, [r3, #0]
}
 8004018:	4618      	mov	r0, r3
 800401a:	46bd      	mov	sp, r7
 800401c:	bc80      	pop	{r7}
 800401e:	4770      	bx	lr
 8004020:	20000bd0 	.word	0x20000bd0

08004024 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800402c:	f7ff fff0 	bl	8004010 <HAL_GetTick>
 8004030:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800403c:	d005      	beq.n	800404a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800403e:	4b0a      	ldr	r3, [pc, #40]	@ (8004068 <HAL_Delay+0x44>)
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	461a      	mov	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4413      	add	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800404a:	bf00      	nop
 800404c:	f7ff ffe0 	bl	8004010 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	429a      	cmp	r2, r3
 800405a:	d8f7      	bhi.n	800404c <HAL_Delay+0x28>
  {
  }
}
 800405c:	bf00      	nop
 800405e:	bf00      	nop
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	2000006c 	.word	0x2000006c

0800406c <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 8004070:	4b02      	ldr	r3, [pc, #8]	@ (800407c <HAL_GetUIDw0+0x10>)
 8004072:	681b      	ldr	r3, [r3, #0]
}
 8004074:	4618      	mov	r0, r3
 8004076:	46bd      	mov	sp, r7
 8004078:	bc80      	pop	{r7}
 800407a:	4770      	bx	lr
 800407c:	1ffff7e8 	.word	0x1ffff7e8

08004080 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8004084:	4b02      	ldr	r3, [pc, #8]	@ (8004090 <HAL_GetUIDw1+0x10>)
 8004086:	681b      	ldr	r3, [r3, #0]
}
 8004088:	4618      	mov	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	bc80      	pop	{r7}
 800408e:	4770      	bx	lr
 8004090:	1ffff7ec 	.word	0x1ffff7ec

08004094 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8004098:	4b02      	ldr	r3, [pc, #8]	@ (80040a4 <HAL_GetUIDw2+0x10>)
 800409a:	681b      	ldr	r3, [r3, #0]
}
 800409c:	4618      	mov	r0, r3
 800409e:	46bd      	mov	sp, r7
 80040a0:	bc80      	pop	{r7}
 80040a2:	4770      	bx	lr
 80040a4:	1ffff7f0 	.word	0x1ffff7f0

080040a8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040b0:	2300      	movs	r3, #0
 80040b2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80040b4:	2300      	movs	r3, #0
 80040b6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80040b8:	2300      	movs	r3, #0
 80040ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e0be      	b.n	8004248 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d109      	bne.n	80040ec <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7fd f9ce 	bl	8001488 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 faff 	bl	80046f0 <ADC_ConversionStop_Disable>
 80040f2:	4603      	mov	r3, r0
 80040f4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040fa:	f003 0310 	and.w	r3, r3, #16
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f040 8099 	bne.w	8004236 <HAL_ADC_Init+0x18e>
 8004104:	7dfb      	ldrb	r3, [r7, #23]
 8004106:	2b00      	cmp	r3, #0
 8004108:	f040 8095 	bne.w	8004236 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004110:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004114:	f023 0302 	bic.w	r3, r3, #2
 8004118:	f043 0202 	orr.w	r2, r3, #2
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004128:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	7b1b      	ldrb	r3, [r3, #12]
 800412e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004130:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	4313      	orrs	r3, r2
 8004136:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004140:	d003      	beq.n	800414a <HAL_ADC_Init+0xa2>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d102      	bne.n	8004150 <HAL_ADC_Init+0xa8>
 800414a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800414e:	e000      	b.n	8004152 <HAL_ADC_Init+0xaa>
 8004150:	2300      	movs	r3, #0
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	4313      	orrs	r3, r2
 8004156:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	7d1b      	ldrb	r3, [r3, #20]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d119      	bne.n	8004194 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	7b1b      	ldrb	r3, [r3, #12]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d109      	bne.n	800417c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	3b01      	subs	r3, #1
 800416e:	035a      	lsls	r2, r3, #13
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	4313      	orrs	r3, r2
 8004174:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004178:	613b      	str	r3, [r7, #16]
 800417a:	e00b      	b.n	8004194 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004180:	f043 0220 	orr.w	r2, r3, #32
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800418c:	f043 0201 	orr.w	r2, r3, #1
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689a      	ldr	r2, [r3, #8]
 80041ae:	4b28      	ldr	r3, [pc, #160]	@ (8004250 <HAL_ADC_Init+0x1a8>)
 80041b0:	4013      	ands	r3, r2
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	6812      	ldr	r2, [r2, #0]
 80041b6:	68b9      	ldr	r1, [r7, #8]
 80041b8:	430b      	orrs	r3, r1
 80041ba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041c4:	d003      	beq.n	80041ce <HAL_ADC_Init+0x126>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d104      	bne.n	80041d8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	3b01      	subs	r3, #1
 80041d4:	051b      	lsls	r3, r3, #20
 80041d6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041de:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	4b18      	ldr	r3, [pc, #96]	@ (8004254 <HAL_ADC_Init+0x1ac>)
 80041f4:	4013      	ands	r3, r2
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d10b      	bne.n	8004214 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004206:	f023 0303 	bic.w	r3, r3, #3
 800420a:	f043 0201 	orr.w	r2, r3, #1
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004212:	e018      	b.n	8004246 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004218:	f023 0312 	bic.w	r3, r3, #18
 800421c:	f043 0210 	orr.w	r2, r3, #16
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004228:	f043 0201 	orr.w	r2, r3, #1
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004234:	e007      	b.n	8004246 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800423a:	f043 0210 	orr.w	r2, r3, #16
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004246:	7dfb      	ldrb	r3, [r7, #23]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3718      	adds	r7, #24
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	ffe1f7fd 	.word	0xffe1f7fd
 8004254:	ff1f0efe 	.word	0xff1f0efe

08004258 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004264:	2300      	movs	r3, #0
 8004266:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a64      	ldr	r2, [pc, #400]	@ (8004400 <HAL_ADC_Start_DMA+0x1a8>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d004      	beq.n	800427c <HAL_ADC_Start_DMA+0x24>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a63      	ldr	r2, [pc, #396]	@ (8004404 <HAL_ADC_Start_DMA+0x1ac>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d106      	bne.n	800428a <HAL_ADC_Start_DMA+0x32>
 800427c:	4b60      	ldr	r3, [pc, #384]	@ (8004400 <HAL_ADC_Start_DMA+0x1a8>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8004284:	2b00      	cmp	r3, #0
 8004286:	f040 80b3 	bne.w	80043f0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004290:	2b01      	cmp	r3, #1
 8004292:	d101      	bne.n	8004298 <HAL_ADC_Start_DMA+0x40>
 8004294:	2302      	movs	r3, #2
 8004296:	e0ae      	b.n	80043f6 <HAL_ADC_Start_DMA+0x19e>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f000 f9cb 	bl	800463c <ADC_Enable>
 80042a6:	4603      	mov	r3, r0
 80042a8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80042aa:	7dfb      	ldrb	r3, [r7, #23]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f040 809a 	bne.w	80043e6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80042ba:	f023 0301 	bic.w	r3, r3, #1
 80042be:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a4e      	ldr	r2, [pc, #312]	@ (8004404 <HAL_ADC_Start_DMA+0x1ac>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d105      	bne.n	80042dc <HAL_ADC_Start_DMA+0x84>
 80042d0:	4b4b      	ldr	r3, [pc, #300]	@ (8004400 <HAL_ADC_Start_DMA+0x1a8>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d115      	bne.n	8004308 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d026      	beq.n	8004344 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042fa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80042fe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004306:	e01d      	b.n	8004344 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800430c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a39      	ldr	r2, [pc, #228]	@ (8004400 <HAL_ADC_Start_DMA+0x1a8>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d004      	beq.n	8004328 <HAL_ADC_Start_DMA+0xd0>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a38      	ldr	r2, [pc, #224]	@ (8004404 <HAL_ADC_Start_DMA+0x1ac>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d10d      	bne.n	8004344 <HAL_ADC_Start_DMA+0xec>
 8004328:	4b35      	ldr	r3, [pc, #212]	@ (8004400 <HAL_ADC_Start_DMA+0x1a8>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004330:	2b00      	cmp	r3, #0
 8004332:	d007      	beq.n	8004344 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004338:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800433c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004348:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d006      	beq.n	800435e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004354:	f023 0206 	bic.w	r2, r3, #6
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800435c:	e002      	b.n	8004364 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	4a25      	ldr	r2, [pc, #148]	@ (8004408 <HAL_ADC_Start_DMA+0x1b0>)
 8004372:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	4a24      	ldr	r2, [pc, #144]	@ (800440c <HAL_ADC_Start_DMA+0x1b4>)
 800437a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	4a23      	ldr	r2, [pc, #140]	@ (8004410 <HAL_ADC_Start_DMA+0x1b8>)
 8004382:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f06f 0202 	mvn.w	r2, #2
 800438c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800439c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6a18      	ldr	r0, [r3, #32]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	334c      	adds	r3, #76	@ 0x4c
 80043a8:	4619      	mov	r1, r3
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f000 fc5d 	bl	8004c6c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80043bc:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80043c0:	d108      	bne.n	80043d4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	689a      	ldr	r2, [r3, #8]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80043d0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80043d2:	e00f      	b.n	80043f4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689a      	ldr	r2, [r3, #8]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80043e2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80043e4:	e006      	b.n	80043f4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 80043ee:	e001      	b.n	80043f4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80043f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3718      	adds	r7, #24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	40012400 	.word	0x40012400
 8004404:	40012800 	.word	0x40012800
 8004408:	08004773 	.word	0x08004773
 800440c:	080047ef 	.word	0x080047ef
 8004410:	0800480b 	.word	0x0800480b

08004414 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	bc80      	pop	{r7}
 8004424:	4770      	bx	lr

08004426 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004426:	b480      	push	{r7}
 8004428:	b083      	sub	sp, #12
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800442e:	bf00      	nop
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	bc80      	pop	{r7}
 8004436:	4770      	bx	lr

08004438 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	bc80      	pop	{r7}
 8004448:	4770      	bx	lr
	...

0800444c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004456:	2300      	movs	r3, #0
 8004458:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800445a:	2300      	movs	r3, #0
 800445c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004464:	2b01      	cmp	r3, #1
 8004466:	d101      	bne.n	800446c <HAL_ADC_ConfigChannel+0x20>
 8004468:	2302      	movs	r3, #2
 800446a:	e0dc      	b.n	8004626 <HAL_ADC_ConfigChannel+0x1da>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	2b06      	cmp	r3, #6
 800447a:	d81c      	bhi.n	80044b6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	4613      	mov	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4413      	add	r3, r2
 800448c:	3b05      	subs	r3, #5
 800448e:	221f      	movs	r2, #31
 8004490:	fa02 f303 	lsl.w	r3, r2, r3
 8004494:	43db      	mvns	r3, r3
 8004496:	4019      	ands	r1, r3
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	6818      	ldr	r0, [r3, #0]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	4613      	mov	r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	4413      	add	r3, r2
 80044a6:	3b05      	subs	r3, #5
 80044a8:	fa00 f203 	lsl.w	r2, r0, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	635a      	str	r2, [r3, #52]	@ 0x34
 80044b4:	e03c      	b.n	8004530 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2b0c      	cmp	r3, #12
 80044bc:	d81c      	bhi.n	80044f8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	4613      	mov	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4413      	add	r3, r2
 80044ce:	3b23      	subs	r3, #35	@ 0x23
 80044d0:	221f      	movs	r2, #31
 80044d2:	fa02 f303 	lsl.w	r3, r2, r3
 80044d6:	43db      	mvns	r3, r3
 80044d8:	4019      	ands	r1, r3
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	6818      	ldr	r0, [r3, #0]
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	4613      	mov	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4413      	add	r3, r2
 80044e8:	3b23      	subs	r3, #35	@ 0x23
 80044ea:	fa00 f203 	lsl.w	r2, r0, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	430a      	orrs	r2, r1
 80044f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80044f6:	e01b      	b.n	8004530 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	4613      	mov	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4413      	add	r3, r2
 8004508:	3b41      	subs	r3, #65	@ 0x41
 800450a:	221f      	movs	r2, #31
 800450c:	fa02 f303 	lsl.w	r3, r2, r3
 8004510:	43db      	mvns	r3, r3
 8004512:	4019      	ands	r1, r3
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	6818      	ldr	r0, [r3, #0]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	4613      	mov	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4413      	add	r3, r2
 8004522:	3b41      	subs	r3, #65	@ 0x41
 8004524:	fa00 f203 	lsl.w	r2, r0, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	430a      	orrs	r2, r1
 800452e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b09      	cmp	r3, #9
 8004536:	d91c      	bls.n	8004572 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68d9      	ldr	r1, [r3, #12]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	4613      	mov	r3, r2
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	4413      	add	r3, r2
 8004548:	3b1e      	subs	r3, #30
 800454a:	2207      	movs	r2, #7
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	43db      	mvns	r3, r3
 8004552:	4019      	ands	r1, r3
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	6898      	ldr	r0, [r3, #8]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	4613      	mov	r3, r2
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	4413      	add	r3, r2
 8004562:	3b1e      	subs	r3, #30
 8004564:	fa00 f203 	lsl.w	r2, r0, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	430a      	orrs	r2, r1
 800456e:	60da      	str	r2, [r3, #12]
 8004570:	e019      	b.n	80045a6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6919      	ldr	r1, [r3, #16]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	4613      	mov	r3, r2
 800457e:	005b      	lsls	r3, r3, #1
 8004580:	4413      	add	r3, r2
 8004582:	2207      	movs	r2, #7
 8004584:	fa02 f303 	lsl.w	r3, r2, r3
 8004588:	43db      	mvns	r3, r3
 800458a:	4019      	ands	r1, r3
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	6898      	ldr	r0, [r3, #8]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	4613      	mov	r3, r2
 8004596:	005b      	lsls	r3, r3, #1
 8004598:	4413      	add	r3, r2
 800459a:	fa00 f203 	lsl.w	r2, r0, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	430a      	orrs	r2, r1
 80045a4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b10      	cmp	r3, #16
 80045ac:	d003      	beq.n	80045b6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80045b2:	2b11      	cmp	r3, #17
 80045b4:	d132      	bne.n	800461c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a1d      	ldr	r2, [pc, #116]	@ (8004630 <HAL_ADC_ConfigChannel+0x1e4>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d125      	bne.n	800460c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d126      	bne.n	800461c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80045dc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b10      	cmp	r3, #16
 80045e4:	d11a      	bne.n	800461c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80045e6:	4b13      	ldr	r3, [pc, #76]	@ (8004634 <HAL_ADC_ConfigChannel+0x1e8>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a13      	ldr	r2, [pc, #76]	@ (8004638 <HAL_ADC_ConfigChannel+0x1ec>)
 80045ec:	fba2 2303 	umull	r2, r3, r2, r3
 80045f0:	0c9a      	lsrs	r2, r3, #18
 80045f2:	4613      	mov	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4413      	add	r3, r2
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80045fc:	e002      	b.n	8004604 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	3b01      	subs	r3, #1
 8004602:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1f9      	bne.n	80045fe <HAL_ADC_ConfigChannel+0x1b2>
 800460a:	e007      	b.n	800461c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004610:	f043 0220 	orr.w	r2, r3, #32
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004624:	7bfb      	ldrb	r3, [r7, #15]
}
 8004626:	4618      	mov	r0, r3
 8004628:	3714      	adds	r7, #20
 800462a:	46bd      	mov	sp, r7
 800462c:	bc80      	pop	{r7}
 800462e:	4770      	bx	lr
 8004630:	40012400 	.word	0x40012400
 8004634:	20000064 	.word	0x20000064
 8004638:	431bde83 	.word	0x431bde83

0800463c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004644:	2300      	movs	r3, #0
 8004646:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004648:	2300      	movs	r3, #0
 800464a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b01      	cmp	r3, #1
 8004658:	d040      	beq.n	80046dc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f042 0201 	orr.w	r2, r2, #1
 8004668:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800466a:	4b1f      	ldr	r3, [pc, #124]	@ (80046e8 <ADC_Enable+0xac>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a1f      	ldr	r2, [pc, #124]	@ (80046ec <ADC_Enable+0xb0>)
 8004670:	fba2 2303 	umull	r2, r3, r2, r3
 8004674:	0c9b      	lsrs	r3, r3, #18
 8004676:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004678:	e002      	b.n	8004680 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	3b01      	subs	r3, #1
 800467e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1f9      	bne.n	800467a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004686:	f7ff fcc3 	bl	8004010 <HAL_GetTick>
 800468a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800468c:	e01f      	b.n	80046ce <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800468e:	f7ff fcbf 	bl	8004010 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	2b02      	cmp	r3, #2
 800469a:	d918      	bls.n	80046ce <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d011      	beq.n	80046ce <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ae:	f043 0210 	orr.w	r2, r3, #16
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ba:	f043 0201 	orr.w	r2, r3, #1
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e007      	b.n	80046de <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d1d8      	bne.n	800468e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	20000064 	.word	0x20000064
 80046ec:	431bde83 	.word	0x431bde83

080046f0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046f8:	2300      	movs	r3, #0
 80046fa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b01      	cmp	r3, #1
 8004708:	d12e      	bne.n	8004768 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 0201 	bic.w	r2, r2, #1
 8004718:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800471a:	f7ff fc79 	bl	8004010 <HAL_GetTick>
 800471e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004720:	e01b      	b.n	800475a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004722:	f7ff fc75 	bl	8004010 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d914      	bls.n	800475a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b01      	cmp	r3, #1
 800473c:	d10d      	bne.n	800475a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004742:	f043 0210 	orr.w	r2, r3, #16
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474e:	f043 0201 	orr.w	r2, r3, #1
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e007      	b.n	800476a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b01      	cmp	r3, #1
 8004766:	d0dc      	beq.n	8004722 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b084      	sub	sp, #16
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004784:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004788:	2b00      	cmp	r3, #0
 800478a:	d127      	bne.n	80047dc <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004790:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80047a2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80047a6:	d115      	bne.n	80047d4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d111      	bne.n	80047d4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d105      	bne.n	80047d4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047cc:	f043 0201 	orr.w	r2, r3, #1
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f7ff fe1d 	bl	8004414 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80047da:	e004      	b.n	80047e6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	4798      	blx	r3
}
 80047e6:	bf00      	nop
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b084      	sub	sp, #16
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fa:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f7ff fe12 	bl	8004426 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004802:	bf00      	nop
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b084      	sub	sp, #16
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004816:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800481c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004828:	f043 0204 	orr.w	r2, r3, #4
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f7ff fe01 	bl	8004438 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004836:	bf00      	nop
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
	...

08004840 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8004840:	b590      	push	{r4, r7, lr}
 8004842:	b087      	sub	sp, #28
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004848:	2300      	movs	r3, #0
 800484a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800484c:	2300      	movs	r3, #0
 800484e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004856:	2b01      	cmp	r3, #1
 8004858:	d101      	bne.n	800485e <HAL_ADCEx_Calibration_Start+0x1e>
 800485a:	2302      	movs	r3, #2
 800485c:	e097      	b.n	800498e <HAL_ADCEx_Calibration_Start+0x14e>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7ff ff42 	bl	80046f0 <ADC_ConversionStop_Disable>
 800486c:	4603      	mov	r3, r0
 800486e:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f7ff fee3 	bl	800463c <ADC_Enable>
 8004876:	4603      	mov	r3, r0
 8004878:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800487a:	7dfb      	ldrb	r3, [r7, #23]
 800487c:	2b00      	cmp	r3, #0
 800487e:	f040 8081 	bne.w	8004984 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004886:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800488a:	f023 0302 	bic.w	r3, r3, #2
 800488e:	f043 0202 	orr.w	r2, r3, #2
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004896:	4b40      	ldr	r3, [pc, #256]	@ (8004998 <HAL_ADCEx_Calibration_Start+0x158>)
 8004898:	681c      	ldr	r4, [r3, #0]
 800489a:	2002      	movs	r0, #2
 800489c:	f001 fc6c 	bl	8006178 <HAL_RCCEx_GetPeriphCLKFreq>
 80048a0:	4603      	mov	r3, r0
 80048a2:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80048a6:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80048a8:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80048aa:	e002      	b.n	80048b2 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	3b01      	subs	r3, #1
 80048b0:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1f9      	bne.n	80048ac <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689a      	ldr	r2, [r3, #8]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f042 0208 	orr.w	r2, r2, #8
 80048c6:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80048c8:	f7ff fba2 	bl	8004010 <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80048ce:	e01b      	b.n	8004908 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80048d0:	f7ff fb9e 	bl	8004010 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b0a      	cmp	r3, #10
 80048dc:	d914      	bls.n	8004908 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f003 0308 	and.w	r3, r3, #8
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00d      	beq.n	8004908 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f0:	f023 0312 	bic.w	r3, r3, #18
 80048f4:	f043 0210 	orr.w	r2, r3, #16
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e042      	b.n	800498e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f003 0308 	and.w	r3, r3, #8
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1dc      	bne.n	80048d0 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f042 0204 	orr.w	r2, r2, #4
 8004924:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8004926:	f7ff fb73 	bl	8004010 <HAL_GetTick>
 800492a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800492c:	e01b      	b.n	8004966 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800492e:	f7ff fb6f 	bl	8004010 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b0a      	cmp	r3, #10
 800493a:	d914      	bls.n	8004966 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f003 0304 	and.w	r3, r3, #4
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00d      	beq.n	8004966 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800494e:	f023 0312 	bic.w	r3, r3, #18
 8004952:	f043 0210 	orr.w	r2, r3, #16
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e013      	b.n	800498e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f003 0304 	and.w	r3, r3, #4
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1dc      	bne.n	800492e <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004978:	f023 0303 	bic.w	r3, r3, #3
 800497c:	f043 0201 	orr.w	r2, r3, #1
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800498c:	7dfb      	ldrb	r3, [r7, #23]
}
 800498e:	4618      	mov	r0, r3
 8004990:	371c      	adds	r7, #28
 8004992:	46bd      	mov	sp, r7
 8004994:	bd90      	pop	{r4, r7, pc}
 8004996:	bf00      	nop
 8004998:	20000064 	.word	0x20000064

0800499c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049ac:	4b0c      	ldr	r3, [pc, #48]	@ (80049e0 <__NVIC_SetPriorityGrouping+0x44>)
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80049b8:	4013      	ands	r3, r2
 80049ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80049c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049ce:	4a04      	ldr	r2, [pc, #16]	@ (80049e0 <__NVIC_SetPriorityGrouping+0x44>)
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	60d3      	str	r3, [r2, #12]
}
 80049d4:	bf00      	nop
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	bc80      	pop	{r7}
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	e000ed00 	.word	0xe000ed00

080049e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049e8:	4b04      	ldr	r3, [pc, #16]	@ (80049fc <__NVIC_GetPriorityGrouping+0x18>)
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	0a1b      	lsrs	r3, r3, #8
 80049ee:	f003 0307 	and.w	r3, r3, #7
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bc80      	pop	{r7}
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	e000ed00 	.word	0xe000ed00

08004a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	4603      	mov	r3, r0
 8004a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	db0b      	blt.n	8004a2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a12:	79fb      	ldrb	r3, [r7, #7]
 8004a14:	f003 021f 	and.w	r2, r3, #31
 8004a18:	4906      	ldr	r1, [pc, #24]	@ (8004a34 <__NVIC_EnableIRQ+0x34>)
 8004a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a1e:	095b      	lsrs	r3, r3, #5
 8004a20:	2001      	movs	r0, #1
 8004a22:	fa00 f202 	lsl.w	r2, r0, r2
 8004a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a2a:	bf00      	nop
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bc80      	pop	{r7}
 8004a32:	4770      	bx	lr
 8004a34:	e000e100 	.word	0xe000e100

08004a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	4603      	mov	r3, r0
 8004a40:	6039      	str	r1, [r7, #0]
 8004a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	db0a      	blt.n	8004a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	b2da      	uxtb	r2, r3
 8004a50:	490c      	ldr	r1, [pc, #48]	@ (8004a84 <__NVIC_SetPriority+0x4c>)
 8004a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a56:	0112      	lsls	r2, r2, #4
 8004a58:	b2d2      	uxtb	r2, r2
 8004a5a:	440b      	add	r3, r1
 8004a5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a60:	e00a      	b.n	8004a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	b2da      	uxtb	r2, r3
 8004a66:	4908      	ldr	r1, [pc, #32]	@ (8004a88 <__NVIC_SetPriority+0x50>)
 8004a68:	79fb      	ldrb	r3, [r7, #7]
 8004a6a:	f003 030f 	and.w	r3, r3, #15
 8004a6e:	3b04      	subs	r3, #4
 8004a70:	0112      	lsls	r2, r2, #4
 8004a72:	b2d2      	uxtb	r2, r2
 8004a74:	440b      	add	r3, r1
 8004a76:	761a      	strb	r2, [r3, #24]
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bc80      	pop	{r7}
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	e000e100 	.word	0xe000e100
 8004a88:	e000ed00 	.word	0xe000ed00

08004a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b089      	sub	sp, #36	@ 0x24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f003 0307 	and.w	r3, r3, #7
 8004a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	f1c3 0307 	rsb	r3, r3, #7
 8004aa6:	2b04      	cmp	r3, #4
 8004aa8:	bf28      	it	cs
 8004aaa:	2304      	movcs	r3, #4
 8004aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	3304      	adds	r3, #4
 8004ab2:	2b06      	cmp	r3, #6
 8004ab4:	d902      	bls.n	8004abc <NVIC_EncodePriority+0x30>
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	3b03      	subs	r3, #3
 8004aba:	e000      	b.n	8004abe <NVIC_EncodePriority+0x32>
 8004abc:	2300      	movs	r3, #0
 8004abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aca:	43da      	mvns	r2, r3
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	401a      	ands	r2, r3
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	fa01 f303 	lsl.w	r3, r1, r3
 8004ade:	43d9      	mvns	r1, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ae4:	4313      	orrs	r3, r2
         );
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3724      	adds	r7, #36	@ 0x24
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bc80      	pop	{r7}
 8004aee:	4770      	bx	lr

08004af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	3b01      	subs	r3, #1
 8004afc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b00:	d301      	bcc.n	8004b06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b02:	2301      	movs	r3, #1
 8004b04:	e00f      	b.n	8004b26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b06:	4a0a      	ldr	r2, [pc, #40]	@ (8004b30 <SysTick_Config+0x40>)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b0e:	210f      	movs	r1, #15
 8004b10:	f04f 30ff 	mov.w	r0, #4294967295
 8004b14:	f7ff ff90 	bl	8004a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b18:	4b05      	ldr	r3, [pc, #20]	@ (8004b30 <SysTick_Config+0x40>)
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b1e:	4b04      	ldr	r3, [pc, #16]	@ (8004b30 <SysTick_Config+0x40>)
 8004b20:	2207      	movs	r2, #7
 8004b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3708      	adds	r7, #8
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	e000e010 	.word	0xe000e010

08004b34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f7ff ff2d 	bl	800499c <__NVIC_SetPriorityGrouping>
}
 8004b42:	bf00      	nop
 8004b44:	3708      	adds	r7, #8
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b086      	sub	sp, #24
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	4603      	mov	r3, r0
 8004b52:	60b9      	str	r1, [r7, #8]
 8004b54:	607a      	str	r2, [r7, #4]
 8004b56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b5c:	f7ff ff42 	bl	80049e4 <__NVIC_GetPriorityGrouping>
 8004b60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	68b9      	ldr	r1, [r7, #8]
 8004b66:	6978      	ldr	r0, [r7, #20]
 8004b68:	f7ff ff90 	bl	8004a8c <NVIC_EncodePriority>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b72:	4611      	mov	r1, r2
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7ff ff5f 	bl	8004a38 <__NVIC_SetPriority>
}
 8004b7a:	bf00      	nop
 8004b7c:	3718      	adds	r7, #24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b082      	sub	sp, #8
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	4603      	mov	r3, r0
 8004b8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7ff ff35 	bl	8004a00 <__NVIC_EnableIRQ>
}
 8004b96:	bf00      	nop
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b082      	sub	sp, #8
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7ff ffa2 	bl	8004af0 <SysTick_Config>
 8004bac:	4603      	mov	r3, r0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3708      	adds	r7, #8
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
	...

08004bb8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e043      	b.n	8004c56 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	4b22      	ldr	r3, [pc, #136]	@ (8004c60 <HAL_DMA_Init+0xa8>)
 8004bd6:	4413      	add	r3, r2
 8004bd8:	4a22      	ldr	r2, [pc, #136]	@ (8004c64 <HAL_DMA_Init+0xac>)
 8004bda:	fba2 2303 	umull	r2, r3, r2, r3
 8004bde:	091b      	lsrs	r3, r3, #4
 8004be0:	009a      	lsls	r2, r3, #2
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a1f      	ldr	r2, [pc, #124]	@ (8004c68 <HAL_DMA_Init+0xb0>)
 8004bea:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2202      	movs	r2, #2
 8004bf0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004c02:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004c06:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004c10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3714      	adds	r7, #20
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bc80      	pop	{r7}
 8004c5e:	4770      	bx	lr
 8004c60:	bffdfff8 	.word	0xbffdfff8
 8004c64:	cccccccd 	.word	0xcccccccd
 8004c68:	40020000 	.word	0x40020000

08004c6c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
 8004c78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d101      	bne.n	8004c8c <HAL_DMA_Start_IT+0x20>
 8004c88:	2302      	movs	r3, #2
 8004c8a:	e04b      	b.n	8004d24 <HAL_DMA_Start_IT+0xb8>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d13a      	bne.n	8004d16 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f022 0201 	bic.w	r2, r2, #1
 8004cbc:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	68b9      	ldr	r1, [r7, #8]
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f000 f9eb 	bl	80050a0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d008      	beq.n	8004ce4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f042 020e 	orr.w	r2, r2, #14
 8004ce0:	601a      	str	r2, [r3, #0]
 8004ce2:	e00f      	b.n	8004d04 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 0204 	bic.w	r2, r2, #4
 8004cf2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 020a 	orr.w	r2, r2, #10
 8004d02:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f042 0201 	orr.w	r2, r2, #1
 8004d12:	601a      	str	r2, [r3, #0]
 8004d14:	e005      	b.n	8004d22 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004d1e:	2302      	movs	r3, #2
 8004d20:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3718      	adds	r7, #24
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d34:	2300      	movs	r3, #0
 8004d36:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d008      	beq.n	8004d56 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2204      	movs	r2, #4
 8004d48:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e020      	b.n	8004d98 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f022 020e 	bic.w	r2, r2, #14
 8004d64:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 0201 	bic.w	r2, r2, #1
 8004d74:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d7e:	2101      	movs	r1, #1
 8004d80:	fa01 f202 	lsl.w	r2, r1, r2
 8004d84:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bc80      	pop	{r7}
 8004da0:	4770      	bx	lr
	...

08004da4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dac:	2300      	movs	r3, #0
 8004dae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d005      	beq.n	8004dc8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2204      	movs	r2, #4
 8004dc0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	73fb      	strb	r3, [r7, #15]
 8004dc6:	e051      	b.n	8004e6c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f022 020e 	bic.w	r2, r2, #14
 8004dd6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 0201 	bic.w	r2, r2, #1
 8004de6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a22      	ldr	r2, [pc, #136]	@ (8004e78 <HAL_DMA_Abort_IT+0xd4>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d029      	beq.n	8004e46 <HAL_DMA_Abort_IT+0xa2>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a21      	ldr	r2, [pc, #132]	@ (8004e7c <HAL_DMA_Abort_IT+0xd8>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d022      	beq.n	8004e42 <HAL_DMA_Abort_IT+0x9e>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a1f      	ldr	r2, [pc, #124]	@ (8004e80 <HAL_DMA_Abort_IT+0xdc>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d01a      	beq.n	8004e3c <HAL_DMA_Abort_IT+0x98>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a1e      	ldr	r2, [pc, #120]	@ (8004e84 <HAL_DMA_Abort_IT+0xe0>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d012      	beq.n	8004e36 <HAL_DMA_Abort_IT+0x92>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a1c      	ldr	r2, [pc, #112]	@ (8004e88 <HAL_DMA_Abort_IT+0xe4>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d00a      	beq.n	8004e30 <HAL_DMA_Abort_IT+0x8c>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a1b      	ldr	r2, [pc, #108]	@ (8004e8c <HAL_DMA_Abort_IT+0xe8>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d102      	bne.n	8004e2a <HAL_DMA_Abort_IT+0x86>
 8004e24:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004e28:	e00e      	b.n	8004e48 <HAL_DMA_Abort_IT+0xa4>
 8004e2a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e2e:	e00b      	b.n	8004e48 <HAL_DMA_Abort_IT+0xa4>
 8004e30:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004e34:	e008      	b.n	8004e48 <HAL_DMA_Abort_IT+0xa4>
 8004e36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e3a:	e005      	b.n	8004e48 <HAL_DMA_Abort_IT+0xa4>
 8004e3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004e40:	e002      	b.n	8004e48 <HAL_DMA_Abort_IT+0xa4>
 8004e42:	2310      	movs	r3, #16
 8004e44:	e000      	b.n	8004e48 <HAL_DMA_Abort_IT+0xa4>
 8004e46:	2301      	movs	r3, #1
 8004e48:	4a11      	ldr	r2, [pc, #68]	@ (8004e90 <HAL_DMA_Abort_IT+0xec>)
 8004e4a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d003      	beq.n	8004e6c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	4798      	blx	r3
    } 
  }
  return status;
 8004e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	40020008 	.word	0x40020008
 8004e7c:	4002001c 	.word	0x4002001c
 8004e80:	40020030 	.word	0x40020030
 8004e84:	40020044 	.word	0x40020044
 8004e88:	40020058 	.word	0x40020058
 8004e8c:	4002006c 	.word	0x4002006c
 8004e90:	40020000 	.word	0x40020000

08004e94 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb0:	2204      	movs	r2, #4
 8004eb2:	409a      	lsls	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d04f      	beq.n	8004f5c <HAL_DMA_IRQHandler+0xc8>
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	f003 0304 	and.w	r3, r3, #4
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d04a      	beq.n	8004f5c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0320 	and.w	r3, r3, #32
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d107      	bne.n	8004ee4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f022 0204 	bic.w	r2, r2, #4
 8004ee2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a66      	ldr	r2, [pc, #408]	@ (8005084 <HAL_DMA_IRQHandler+0x1f0>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d029      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xae>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a65      	ldr	r2, [pc, #404]	@ (8005088 <HAL_DMA_IRQHandler+0x1f4>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d022      	beq.n	8004f3e <HAL_DMA_IRQHandler+0xaa>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a63      	ldr	r2, [pc, #396]	@ (800508c <HAL_DMA_IRQHandler+0x1f8>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d01a      	beq.n	8004f38 <HAL_DMA_IRQHandler+0xa4>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a62      	ldr	r2, [pc, #392]	@ (8005090 <HAL_DMA_IRQHandler+0x1fc>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d012      	beq.n	8004f32 <HAL_DMA_IRQHandler+0x9e>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a60      	ldr	r2, [pc, #384]	@ (8005094 <HAL_DMA_IRQHandler+0x200>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d00a      	beq.n	8004f2c <HAL_DMA_IRQHandler+0x98>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a5f      	ldr	r2, [pc, #380]	@ (8005098 <HAL_DMA_IRQHandler+0x204>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d102      	bne.n	8004f26 <HAL_DMA_IRQHandler+0x92>
 8004f20:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004f24:	e00e      	b.n	8004f44 <HAL_DMA_IRQHandler+0xb0>
 8004f26:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004f2a:	e00b      	b.n	8004f44 <HAL_DMA_IRQHandler+0xb0>
 8004f2c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004f30:	e008      	b.n	8004f44 <HAL_DMA_IRQHandler+0xb0>
 8004f32:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004f36:	e005      	b.n	8004f44 <HAL_DMA_IRQHandler+0xb0>
 8004f38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f3c:	e002      	b.n	8004f44 <HAL_DMA_IRQHandler+0xb0>
 8004f3e:	2340      	movs	r3, #64	@ 0x40
 8004f40:	e000      	b.n	8004f44 <HAL_DMA_IRQHandler+0xb0>
 8004f42:	2304      	movs	r3, #4
 8004f44:	4a55      	ldr	r2, [pc, #340]	@ (800509c <HAL_DMA_IRQHandler+0x208>)
 8004f46:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f000 8094 	beq.w	800507a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004f5a:	e08e      	b.n	800507a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f60:	2202      	movs	r2, #2
 8004f62:	409a      	lsls	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	4013      	ands	r3, r2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d056      	beq.n	800501a <HAL_DMA_IRQHandler+0x186>
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d051      	beq.n	800501a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0320 	and.w	r3, r3, #32
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d10b      	bne.n	8004f9c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 020a 	bic.w	r2, r2, #10
 8004f92:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a38      	ldr	r2, [pc, #224]	@ (8005084 <HAL_DMA_IRQHandler+0x1f0>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d029      	beq.n	8004ffa <HAL_DMA_IRQHandler+0x166>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a37      	ldr	r2, [pc, #220]	@ (8005088 <HAL_DMA_IRQHandler+0x1f4>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d022      	beq.n	8004ff6 <HAL_DMA_IRQHandler+0x162>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a35      	ldr	r2, [pc, #212]	@ (800508c <HAL_DMA_IRQHandler+0x1f8>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d01a      	beq.n	8004ff0 <HAL_DMA_IRQHandler+0x15c>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a34      	ldr	r2, [pc, #208]	@ (8005090 <HAL_DMA_IRQHandler+0x1fc>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d012      	beq.n	8004fea <HAL_DMA_IRQHandler+0x156>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a32      	ldr	r2, [pc, #200]	@ (8005094 <HAL_DMA_IRQHandler+0x200>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d00a      	beq.n	8004fe4 <HAL_DMA_IRQHandler+0x150>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a31      	ldr	r2, [pc, #196]	@ (8005098 <HAL_DMA_IRQHandler+0x204>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d102      	bne.n	8004fde <HAL_DMA_IRQHandler+0x14a>
 8004fd8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004fdc:	e00e      	b.n	8004ffc <HAL_DMA_IRQHandler+0x168>
 8004fde:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004fe2:	e00b      	b.n	8004ffc <HAL_DMA_IRQHandler+0x168>
 8004fe4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004fe8:	e008      	b.n	8004ffc <HAL_DMA_IRQHandler+0x168>
 8004fea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004fee:	e005      	b.n	8004ffc <HAL_DMA_IRQHandler+0x168>
 8004ff0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ff4:	e002      	b.n	8004ffc <HAL_DMA_IRQHandler+0x168>
 8004ff6:	2320      	movs	r3, #32
 8004ff8:	e000      	b.n	8004ffc <HAL_DMA_IRQHandler+0x168>
 8004ffa:	2302      	movs	r3, #2
 8004ffc:	4a27      	ldr	r2, [pc, #156]	@ (800509c <HAL_DMA_IRQHandler+0x208>)
 8004ffe:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800500c:	2b00      	cmp	r3, #0
 800500e:	d034      	beq.n	800507a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005018:	e02f      	b.n	800507a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501e:	2208      	movs	r2, #8
 8005020:	409a      	lsls	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	4013      	ands	r3, r2
 8005026:	2b00      	cmp	r3, #0
 8005028:	d028      	beq.n	800507c <HAL_DMA_IRQHandler+0x1e8>
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	f003 0308 	and.w	r3, r3, #8
 8005030:	2b00      	cmp	r3, #0
 8005032:	d023      	beq.n	800507c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 020e 	bic.w	r2, r2, #14
 8005042:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800504c:	2101      	movs	r1, #1
 800504e:	fa01 f202 	lsl.w	r2, r1, r2
 8005052:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800506e:	2b00      	cmp	r3, #0
 8005070:	d004      	beq.n	800507c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	4798      	blx	r3
    }
  }
  return;
 800507a:	bf00      	nop
 800507c:	bf00      	nop
}
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	40020008 	.word	0x40020008
 8005088:	4002001c 	.word	0x4002001c
 800508c:	40020030 	.word	0x40020030
 8005090:	40020044 	.word	0x40020044
 8005094:	40020058 	.word	0x40020058
 8005098:	4002006c 	.word	0x4002006c
 800509c:	40020000 	.word	0x40020000

080050a0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
 80050ac:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050b6:	2101      	movs	r1, #1
 80050b8:	fa01 f202 	lsl.w	r2, r1, r2
 80050bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	2b10      	cmp	r3, #16
 80050cc:	d108      	bne.n	80050e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80050de:	e007      	b.n	80050f0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	60da      	str	r2, [r3, #12]
}
 80050f0:	bf00      	nop
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bc80      	pop	{r7}
 80050f8:	4770      	bx	lr
	...

080050fc <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80050fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800510e:	2300      	movs	r3, #0
 8005110:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8005112:	2300      	movs	r3, #0
 8005114:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005116:	4b2f      	ldr	r3, [pc, #188]	@ (80051d4 <HAL_FLASH_Program+0xd8>)
 8005118:	7e1b      	ldrb	r3, [r3, #24]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d101      	bne.n	8005122 <HAL_FLASH_Program+0x26>
 800511e:	2302      	movs	r3, #2
 8005120:	e054      	b.n	80051cc <HAL_FLASH_Program+0xd0>
 8005122:	4b2c      	ldr	r3, [pc, #176]	@ (80051d4 <HAL_FLASH_Program+0xd8>)
 8005124:	2201      	movs	r2, #1
 8005126:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005128:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800512c:	f000 f8a8 	bl	8005280 <FLASH_WaitForLastOperation>
 8005130:	4603      	mov	r3, r0
 8005132:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8005134:	7dfb      	ldrb	r3, [r7, #23]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d144      	bne.n	80051c4 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d102      	bne.n	8005146 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8005140:	2301      	movs	r3, #1
 8005142:	757b      	strb	r3, [r7, #21]
 8005144:	e007      	b.n	8005156 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2b02      	cmp	r3, #2
 800514a:	d102      	bne.n	8005152 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800514c:	2302      	movs	r3, #2
 800514e:	757b      	strb	r3, [r7, #21]
 8005150:	e001      	b.n	8005156 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8005152:	2304      	movs	r3, #4
 8005154:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8005156:	2300      	movs	r3, #0
 8005158:	75bb      	strb	r3, [r7, #22]
 800515a:	e02d      	b.n	80051b8 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800515c:	7dbb      	ldrb	r3, [r7, #22]
 800515e:	005a      	lsls	r2, r3, #1
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	eb02 0c03 	add.w	ip, r2, r3
 8005166:	7dbb      	ldrb	r3, [r7, #22]
 8005168:	0119      	lsls	r1, r3, #4
 800516a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800516e:	f1c1 0620 	rsb	r6, r1, #32
 8005172:	f1a1 0020 	sub.w	r0, r1, #32
 8005176:	fa22 f401 	lsr.w	r4, r2, r1
 800517a:	fa03 f606 	lsl.w	r6, r3, r6
 800517e:	4334      	orrs	r4, r6
 8005180:	fa23 f000 	lsr.w	r0, r3, r0
 8005184:	4304      	orrs	r4, r0
 8005186:	fa23 f501 	lsr.w	r5, r3, r1
 800518a:	b2a3      	uxth	r3, r4
 800518c:	4619      	mov	r1, r3
 800518e:	4660      	mov	r0, ip
 8005190:	f000 f85a 	bl	8005248 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005194:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005198:	f000 f872 	bl	8005280 <FLASH_WaitForLastOperation>
 800519c:	4603      	mov	r3, r0
 800519e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80051a0:	4b0d      	ldr	r3, [pc, #52]	@ (80051d8 <HAL_FLASH_Program+0xdc>)
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	4a0c      	ldr	r2, [pc, #48]	@ (80051d8 <HAL_FLASH_Program+0xdc>)
 80051a6:	f023 0301 	bic.w	r3, r3, #1
 80051aa:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80051ac:	7dfb      	ldrb	r3, [r7, #23]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d107      	bne.n	80051c2 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80051b2:	7dbb      	ldrb	r3, [r7, #22]
 80051b4:	3301      	adds	r3, #1
 80051b6:	75bb      	strb	r3, [r7, #22]
 80051b8:	7dba      	ldrb	r2, [r7, #22]
 80051ba:	7d7b      	ldrb	r3, [r7, #21]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d3cd      	bcc.n	800515c <HAL_FLASH_Program+0x60>
 80051c0:	e000      	b.n	80051c4 <HAL_FLASH_Program+0xc8>
      {
        break;
 80051c2:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80051c4:	4b03      	ldr	r3, [pc, #12]	@ (80051d4 <HAL_FLASH_Program+0xd8>)
 80051c6:	2200      	movs	r2, #0
 80051c8:	761a      	strb	r2, [r3, #24]

  return status;
 80051ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	371c      	adds	r7, #28
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051d4:	20000bd8 	.word	0x20000bd8
 80051d8:	40022000 	.word	0x40022000

080051dc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80051e2:	2300      	movs	r3, #0
 80051e4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80051e6:	4b0d      	ldr	r3, [pc, #52]	@ (800521c <HAL_FLASH_Unlock+0x40>)
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00d      	beq.n	800520e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80051f2:	4b0a      	ldr	r3, [pc, #40]	@ (800521c <HAL_FLASH_Unlock+0x40>)
 80051f4:	4a0a      	ldr	r2, [pc, #40]	@ (8005220 <HAL_FLASH_Unlock+0x44>)
 80051f6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80051f8:	4b08      	ldr	r3, [pc, #32]	@ (800521c <HAL_FLASH_Unlock+0x40>)
 80051fa:	4a0a      	ldr	r2, [pc, #40]	@ (8005224 <HAL_FLASH_Unlock+0x48>)
 80051fc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80051fe:	4b07      	ldr	r3, [pc, #28]	@ (800521c <HAL_FLASH_Unlock+0x40>)
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800520e:	79fb      	ldrb	r3, [r7, #7]
}
 8005210:	4618      	mov	r0, r3
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	bc80      	pop	{r7}
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	40022000 	.word	0x40022000
 8005220:	45670123 	.word	0x45670123
 8005224:	cdef89ab 	.word	0xcdef89ab

08005228 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005228:	b480      	push	{r7}
 800522a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800522c:	4b05      	ldr	r3, [pc, #20]	@ (8005244 <HAL_FLASH_Lock+0x1c>)
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	4a04      	ldr	r2, [pc, #16]	@ (8005244 <HAL_FLASH_Lock+0x1c>)
 8005232:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005236:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	46bd      	mov	sp, r7
 800523e:	bc80      	pop	{r7}
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	40022000 	.word	0x40022000

08005248 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	460b      	mov	r3, r1
 8005252:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005254:	4b08      	ldr	r3, [pc, #32]	@ (8005278 <FLASH_Program_HalfWord+0x30>)
 8005256:	2200      	movs	r2, #0
 8005258:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800525a:	4b08      	ldr	r3, [pc, #32]	@ (800527c <FLASH_Program_HalfWord+0x34>)
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	4a07      	ldr	r2, [pc, #28]	@ (800527c <FLASH_Program_HalfWord+0x34>)
 8005260:	f043 0301 	orr.w	r3, r3, #1
 8005264:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	887a      	ldrh	r2, [r7, #2]
 800526a:	801a      	strh	r2, [r3, #0]
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	bc80      	pop	{r7}
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	20000bd8 	.word	0x20000bd8
 800527c:	40022000 	.word	0x40022000

08005280 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8005288:	f7fe fec2 	bl	8004010 <HAL_GetTick>
 800528c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800528e:	e010      	b.n	80052b2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005296:	d00c      	beq.n	80052b2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d007      	beq.n	80052ae <FLASH_WaitForLastOperation+0x2e>
 800529e:	f7fe feb7 	bl	8004010 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d201      	bcs.n	80052b2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e025      	b.n	80052fe <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80052b2:	4b15      	ldr	r3, [pc, #84]	@ (8005308 <FLASH_WaitForLastOperation+0x88>)
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1e8      	bne.n	8005290 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80052be:	4b12      	ldr	r3, [pc, #72]	@ (8005308 <FLASH_WaitForLastOperation+0x88>)
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	f003 0320 	and.w	r3, r3, #32
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d002      	beq.n	80052d0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80052ca:	4b0f      	ldr	r3, [pc, #60]	@ (8005308 <FLASH_WaitForLastOperation+0x88>)
 80052cc:	2220      	movs	r2, #32
 80052ce:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80052d0:	4b0d      	ldr	r3, [pc, #52]	@ (8005308 <FLASH_WaitForLastOperation+0x88>)
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	f003 0310 	and.w	r3, r3, #16
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10b      	bne.n	80052f4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80052dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005308 <FLASH_WaitForLastOperation+0x88>)
 80052de:	69db      	ldr	r3, [r3, #28]
 80052e0:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d105      	bne.n	80052f4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80052e8:	4b07      	ldr	r3, [pc, #28]	@ (8005308 <FLASH_WaitForLastOperation+0x88>)
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d003      	beq.n	80052fc <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80052f4:	f000 f80a 	bl	800530c <FLASH_SetErrorCode>
    return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e000      	b.n	80052fe <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	40022000 	.word	0x40022000

0800530c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8005312:	2300      	movs	r3, #0
 8005314:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8005316:	4b23      	ldr	r3, [pc, #140]	@ (80053a4 <FLASH_SetErrorCode+0x98>)
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	f003 0310 	and.w	r3, r3, #16
 800531e:	2b00      	cmp	r3, #0
 8005320:	d009      	beq.n	8005336 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005322:	4b21      	ldr	r3, [pc, #132]	@ (80053a8 <FLASH_SetErrorCode+0x9c>)
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	f043 0302 	orr.w	r3, r3, #2
 800532a:	4a1f      	ldr	r2, [pc, #124]	@ (80053a8 <FLASH_SetErrorCode+0x9c>)
 800532c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f043 0310 	orr.w	r3, r3, #16
 8005334:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005336:	4b1b      	ldr	r3, [pc, #108]	@ (80053a4 <FLASH_SetErrorCode+0x98>)
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	f003 0304 	and.w	r3, r3, #4
 800533e:	2b00      	cmp	r3, #0
 8005340:	d009      	beq.n	8005356 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8005342:	4b19      	ldr	r3, [pc, #100]	@ (80053a8 <FLASH_SetErrorCode+0x9c>)
 8005344:	69db      	ldr	r3, [r3, #28]
 8005346:	f043 0301 	orr.w	r3, r3, #1
 800534a:	4a17      	ldr	r2, [pc, #92]	@ (80053a8 <FLASH_SetErrorCode+0x9c>)
 800534c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f043 0304 	orr.w	r3, r3, #4
 8005354:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8005356:	4b13      	ldr	r3, [pc, #76]	@ (80053a4 <FLASH_SetErrorCode+0x98>)
 8005358:	69db      	ldr	r3, [r3, #28]
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00b      	beq.n	800537a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8005362:	4b11      	ldr	r3, [pc, #68]	@ (80053a8 <FLASH_SetErrorCode+0x9c>)
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	f043 0304 	orr.w	r3, r3, #4
 800536a:	4a0f      	ldr	r2, [pc, #60]	@ (80053a8 <FLASH_SetErrorCode+0x9c>)
 800536c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800536e:	4b0d      	ldr	r3, [pc, #52]	@ (80053a4 <FLASH_SetErrorCode+0x98>)
 8005370:	69db      	ldr	r3, [r3, #28]
 8005372:	4a0c      	ldr	r2, [pc, #48]	@ (80053a4 <FLASH_SetErrorCode+0x98>)
 8005374:	f023 0301 	bic.w	r3, r3, #1
 8005378:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f240 1201 	movw	r2, #257	@ 0x101
 8005380:	4293      	cmp	r3, r2
 8005382:	d106      	bne.n	8005392 <FLASH_SetErrorCode+0x86>
 8005384:	4b07      	ldr	r3, [pc, #28]	@ (80053a4 <FLASH_SetErrorCode+0x98>)
 8005386:	69db      	ldr	r3, [r3, #28]
 8005388:	4a06      	ldr	r2, [pc, #24]	@ (80053a4 <FLASH_SetErrorCode+0x98>)
 800538a:	f023 0301 	bic.w	r3, r3, #1
 800538e:	61d3      	str	r3, [r2, #28]
}  
 8005390:	e002      	b.n	8005398 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005392:	4a04      	ldr	r2, [pc, #16]	@ (80053a4 <FLASH_SetErrorCode+0x98>)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	60d3      	str	r3, [r2, #12]
}  
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	bc80      	pop	{r7}
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	40022000 	.word	0x40022000
 80053a8:	20000bd8 	.word	0x20000bd8

080053ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b08b      	sub	sp, #44	@ 0x2c
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80053b6:	2300      	movs	r3, #0
 80053b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80053ba:	2300      	movs	r3, #0
 80053bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80053be:	e169      	b.n	8005694 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80053c0:	2201      	movs	r2, #1
 80053c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c4:	fa02 f303 	lsl.w	r3, r2, r3
 80053c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	69fa      	ldr	r2, [r7, #28]
 80053d0:	4013      	ands	r3, r2
 80053d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80053d4:	69ba      	ldr	r2, [r7, #24]
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	429a      	cmp	r2, r3
 80053da:	f040 8158 	bne.w	800568e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	4a9a      	ldr	r2, [pc, #616]	@ (800564c <HAL_GPIO_Init+0x2a0>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d05e      	beq.n	80054a6 <HAL_GPIO_Init+0xfa>
 80053e8:	4a98      	ldr	r2, [pc, #608]	@ (800564c <HAL_GPIO_Init+0x2a0>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d875      	bhi.n	80054da <HAL_GPIO_Init+0x12e>
 80053ee:	4a98      	ldr	r2, [pc, #608]	@ (8005650 <HAL_GPIO_Init+0x2a4>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d058      	beq.n	80054a6 <HAL_GPIO_Init+0xfa>
 80053f4:	4a96      	ldr	r2, [pc, #600]	@ (8005650 <HAL_GPIO_Init+0x2a4>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d86f      	bhi.n	80054da <HAL_GPIO_Init+0x12e>
 80053fa:	4a96      	ldr	r2, [pc, #600]	@ (8005654 <HAL_GPIO_Init+0x2a8>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d052      	beq.n	80054a6 <HAL_GPIO_Init+0xfa>
 8005400:	4a94      	ldr	r2, [pc, #592]	@ (8005654 <HAL_GPIO_Init+0x2a8>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d869      	bhi.n	80054da <HAL_GPIO_Init+0x12e>
 8005406:	4a94      	ldr	r2, [pc, #592]	@ (8005658 <HAL_GPIO_Init+0x2ac>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d04c      	beq.n	80054a6 <HAL_GPIO_Init+0xfa>
 800540c:	4a92      	ldr	r2, [pc, #584]	@ (8005658 <HAL_GPIO_Init+0x2ac>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d863      	bhi.n	80054da <HAL_GPIO_Init+0x12e>
 8005412:	4a92      	ldr	r2, [pc, #584]	@ (800565c <HAL_GPIO_Init+0x2b0>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d046      	beq.n	80054a6 <HAL_GPIO_Init+0xfa>
 8005418:	4a90      	ldr	r2, [pc, #576]	@ (800565c <HAL_GPIO_Init+0x2b0>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d85d      	bhi.n	80054da <HAL_GPIO_Init+0x12e>
 800541e:	2b12      	cmp	r3, #18
 8005420:	d82a      	bhi.n	8005478 <HAL_GPIO_Init+0xcc>
 8005422:	2b12      	cmp	r3, #18
 8005424:	d859      	bhi.n	80054da <HAL_GPIO_Init+0x12e>
 8005426:	a201      	add	r2, pc, #4	@ (adr r2, 800542c <HAL_GPIO_Init+0x80>)
 8005428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800542c:	080054a7 	.word	0x080054a7
 8005430:	08005481 	.word	0x08005481
 8005434:	08005493 	.word	0x08005493
 8005438:	080054d5 	.word	0x080054d5
 800543c:	080054db 	.word	0x080054db
 8005440:	080054db 	.word	0x080054db
 8005444:	080054db 	.word	0x080054db
 8005448:	080054db 	.word	0x080054db
 800544c:	080054db 	.word	0x080054db
 8005450:	080054db 	.word	0x080054db
 8005454:	080054db 	.word	0x080054db
 8005458:	080054db 	.word	0x080054db
 800545c:	080054db 	.word	0x080054db
 8005460:	080054db 	.word	0x080054db
 8005464:	080054db 	.word	0x080054db
 8005468:	080054db 	.word	0x080054db
 800546c:	080054db 	.word	0x080054db
 8005470:	08005489 	.word	0x08005489
 8005474:	0800549d 	.word	0x0800549d
 8005478:	4a79      	ldr	r2, [pc, #484]	@ (8005660 <HAL_GPIO_Init+0x2b4>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d013      	beq.n	80054a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800547e:	e02c      	b.n	80054da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	623b      	str	r3, [r7, #32]
          break;
 8005486:	e029      	b.n	80054dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	3304      	adds	r3, #4
 800548e:	623b      	str	r3, [r7, #32]
          break;
 8005490:	e024      	b.n	80054dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	3308      	adds	r3, #8
 8005498:	623b      	str	r3, [r7, #32]
          break;
 800549a:	e01f      	b.n	80054dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	330c      	adds	r3, #12
 80054a2:	623b      	str	r3, [r7, #32]
          break;
 80054a4:	e01a      	b.n	80054dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d102      	bne.n	80054b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80054ae:	2304      	movs	r3, #4
 80054b0:	623b      	str	r3, [r7, #32]
          break;
 80054b2:	e013      	b.n	80054dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d105      	bne.n	80054c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80054bc:	2308      	movs	r3, #8
 80054be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	69fa      	ldr	r2, [r7, #28]
 80054c4:	611a      	str	r2, [r3, #16]
          break;
 80054c6:	e009      	b.n	80054dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80054c8:	2308      	movs	r3, #8
 80054ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	69fa      	ldr	r2, [r7, #28]
 80054d0:	615a      	str	r2, [r3, #20]
          break;
 80054d2:	e003      	b.n	80054dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80054d4:	2300      	movs	r3, #0
 80054d6:	623b      	str	r3, [r7, #32]
          break;
 80054d8:	e000      	b.n	80054dc <HAL_GPIO_Init+0x130>
          break;
 80054da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	2bff      	cmp	r3, #255	@ 0xff
 80054e0:	d801      	bhi.n	80054e6 <HAL_GPIO_Init+0x13a>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	e001      	b.n	80054ea <HAL_GPIO_Init+0x13e>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	3304      	adds	r3, #4
 80054ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	2bff      	cmp	r3, #255	@ 0xff
 80054f0:	d802      	bhi.n	80054f8 <HAL_GPIO_Init+0x14c>
 80054f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	e002      	b.n	80054fe <HAL_GPIO_Init+0x152>
 80054f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fa:	3b08      	subs	r3, #8
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	210f      	movs	r1, #15
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	fa01 f303 	lsl.w	r3, r1, r3
 800550c:	43db      	mvns	r3, r3
 800550e:	401a      	ands	r2, r3
 8005510:	6a39      	ldr	r1, [r7, #32]
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	fa01 f303 	lsl.w	r3, r1, r3
 8005518:	431a      	orrs	r2, r3
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005526:	2b00      	cmp	r3, #0
 8005528:	f000 80b1 	beq.w	800568e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800552c:	4b4d      	ldr	r3, [pc, #308]	@ (8005664 <HAL_GPIO_Init+0x2b8>)
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	4a4c      	ldr	r2, [pc, #304]	@ (8005664 <HAL_GPIO_Init+0x2b8>)
 8005532:	f043 0301 	orr.w	r3, r3, #1
 8005536:	6193      	str	r3, [r2, #24]
 8005538:	4b4a      	ldr	r3, [pc, #296]	@ (8005664 <HAL_GPIO_Init+0x2b8>)
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	60bb      	str	r3, [r7, #8]
 8005542:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005544:	4a48      	ldr	r2, [pc, #288]	@ (8005668 <HAL_GPIO_Init+0x2bc>)
 8005546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005548:	089b      	lsrs	r3, r3, #2
 800554a:	3302      	adds	r3, #2
 800554c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005550:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005554:	f003 0303 	and.w	r3, r3, #3
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	220f      	movs	r2, #15
 800555c:	fa02 f303 	lsl.w	r3, r2, r3
 8005560:	43db      	mvns	r3, r3
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	4013      	ands	r3, r2
 8005566:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a40      	ldr	r2, [pc, #256]	@ (800566c <HAL_GPIO_Init+0x2c0>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d013      	beq.n	8005598 <HAL_GPIO_Init+0x1ec>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a3f      	ldr	r2, [pc, #252]	@ (8005670 <HAL_GPIO_Init+0x2c4>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d00d      	beq.n	8005594 <HAL_GPIO_Init+0x1e8>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a3e      	ldr	r2, [pc, #248]	@ (8005674 <HAL_GPIO_Init+0x2c8>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d007      	beq.n	8005590 <HAL_GPIO_Init+0x1e4>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a3d      	ldr	r2, [pc, #244]	@ (8005678 <HAL_GPIO_Init+0x2cc>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d101      	bne.n	800558c <HAL_GPIO_Init+0x1e0>
 8005588:	2303      	movs	r3, #3
 800558a:	e006      	b.n	800559a <HAL_GPIO_Init+0x1ee>
 800558c:	2304      	movs	r3, #4
 800558e:	e004      	b.n	800559a <HAL_GPIO_Init+0x1ee>
 8005590:	2302      	movs	r3, #2
 8005592:	e002      	b.n	800559a <HAL_GPIO_Init+0x1ee>
 8005594:	2301      	movs	r3, #1
 8005596:	e000      	b.n	800559a <HAL_GPIO_Init+0x1ee>
 8005598:	2300      	movs	r3, #0
 800559a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800559c:	f002 0203 	and.w	r2, r2, #3
 80055a0:	0092      	lsls	r2, r2, #2
 80055a2:	4093      	lsls	r3, r2
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80055aa:	492f      	ldr	r1, [pc, #188]	@ (8005668 <HAL_GPIO_Init+0x2bc>)
 80055ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ae:	089b      	lsrs	r3, r3, #2
 80055b0:	3302      	adds	r3, #2
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d006      	beq.n	80055d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80055c4:	4b2d      	ldr	r3, [pc, #180]	@ (800567c <HAL_GPIO_Init+0x2d0>)
 80055c6:	689a      	ldr	r2, [r3, #8]
 80055c8:	492c      	ldr	r1, [pc, #176]	@ (800567c <HAL_GPIO_Init+0x2d0>)
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	608b      	str	r3, [r1, #8]
 80055d0:	e006      	b.n	80055e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80055d2:	4b2a      	ldr	r3, [pc, #168]	@ (800567c <HAL_GPIO_Init+0x2d0>)
 80055d4:	689a      	ldr	r2, [r3, #8]
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	43db      	mvns	r3, r3
 80055da:	4928      	ldr	r1, [pc, #160]	@ (800567c <HAL_GPIO_Init+0x2d0>)
 80055dc:	4013      	ands	r3, r2
 80055de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d006      	beq.n	80055fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80055ec:	4b23      	ldr	r3, [pc, #140]	@ (800567c <HAL_GPIO_Init+0x2d0>)
 80055ee:	68da      	ldr	r2, [r3, #12]
 80055f0:	4922      	ldr	r1, [pc, #136]	@ (800567c <HAL_GPIO_Init+0x2d0>)
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	60cb      	str	r3, [r1, #12]
 80055f8:	e006      	b.n	8005608 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80055fa:	4b20      	ldr	r3, [pc, #128]	@ (800567c <HAL_GPIO_Init+0x2d0>)
 80055fc:	68da      	ldr	r2, [r3, #12]
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	43db      	mvns	r3, r3
 8005602:	491e      	ldr	r1, [pc, #120]	@ (800567c <HAL_GPIO_Init+0x2d0>)
 8005604:	4013      	ands	r3, r2
 8005606:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d006      	beq.n	8005622 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005614:	4b19      	ldr	r3, [pc, #100]	@ (800567c <HAL_GPIO_Init+0x2d0>)
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	4918      	ldr	r1, [pc, #96]	@ (800567c <HAL_GPIO_Init+0x2d0>)
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	4313      	orrs	r3, r2
 800561e:	604b      	str	r3, [r1, #4]
 8005620:	e006      	b.n	8005630 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005622:	4b16      	ldr	r3, [pc, #88]	@ (800567c <HAL_GPIO_Init+0x2d0>)
 8005624:	685a      	ldr	r2, [r3, #4]
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	43db      	mvns	r3, r3
 800562a:	4914      	ldr	r1, [pc, #80]	@ (800567c <HAL_GPIO_Init+0x2d0>)
 800562c:	4013      	ands	r3, r2
 800562e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d021      	beq.n	8005680 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800563c:	4b0f      	ldr	r3, [pc, #60]	@ (800567c <HAL_GPIO_Init+0x2d0>)
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	490e      	ldr	r1, [pc, #56]	@ (800567c <HAL_GPIO_Init+0x2d0>)
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	4313      	orrs	r3, r2
 8005646:	600b      	str	r3, [r1, #0]
 8005648:	e021      	b.n	800568e <HAL_GPIO_Init+0x2e2>
 800564a:	bf00      	nop
 800564c:	10320000 	.word	0x10320000
 8005650:	10310000 	.word	0x10310000
 8005654:	10220000 	.word	0x10220000
 8005658:	10210000 	.word	0x10210000
 800565c:	10120000 	.word	0x10120000
 8005660:	10110000 	.word	0x10110000
 8005664:	40021000 	.word	0x40021000
 8005668:	40010000 	.word	0x40010000
 800566c:	40010800 	.word	0x40010800
 8005670:	40010c00 	.word	0x40010c00
 8005674:	40011000 	.word	0x40011000
 8005678:	40011400 	.word	0x40011400
 800567c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005680:	4b0b      	ldr	r3, [pc, #44]	@ (80056b0 <HAL_GPIO_Init+0x304>)
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	43db      	mvns	r3, r3
 8005688:	4909      	ldr	r1, [pc, #36]	@ (80056b0 <HAL_GPIO_Init+0x304>)
 800568a:	4013      	ands	r3, r2
 800568c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800568e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005690:	3301      	adds	r3, #1
 8005692:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569a:	fa22 f303 	lsr.w	r3, r2, r3
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f47f ae8e 	bne.w	80053c0 <HAL_GPIO_Init+0x14>
  }
}
 80056a4:	bf00      	nop
 80056a6:	bf00      	nop
 80056a8:	372c      	adds	r7, #44	@ 0x2c
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bc80      	pop	{r7}
 80056ae:	4770      	bx	lr
 80056b0:	40010400 	.word	0x40010400

080056b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	460b      	mov	r3, r1
 80056be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	689a      	ldr	r2, [r3, #8]
 80056c4:	887b      	ldrh	r3, [r7, #2]
 80056c6:	4013      	ands	r3, r2
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d002      	beq.n	80056d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80056cc:	2301      	movs	r3, #1
 80056ce:	73fb      	strb	r3, [r7, #15]
 80056d0:	e001      	b.n	80056d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80056d2:	2300      	movs	r3, #0
 80056d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80056d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	bc80      	pop	{r7}
 80056e0:	4770      	bx	lr

080056e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b083      	sub	sp, #12
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
 80056ea:	460b      	mov	r3, r1
 80056ec:	807b      	strh	r3, [r7, #2]
 80056ee:	4613      	mov	r3, r2
 80056f0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80056f2:	787b      	ldrb	r3, [r7, #1]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d003      	beq.n	8005700 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80056f8:	887a      	ldrh	r2, [r7, #2]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80056fe:	e003      	b.n	8005708 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005700:	887b      	ldrh	r3, [r7, #2]
 8005702:	041a      	lsls	r2, r3, #16
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	611a      	str	r2, [r3, #16]
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	bc80      	pop	{r7}
 8005710:	4770      	bx	lr
	...

08005714 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	4603      	mov	r3, r0
 800571c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800571e:	4b08      	ldr	r3, [pc, #32]	@ (8005740 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005720:	695a      	ldr	r2, [r3, #20]
 8005722:	88fb      	ldrh	r3, [r7, #6]
 8005724:	4013      	ands	r3, r2
 8005726:	2b00      	cmp	r3, #0
 8005728:	d006      	beq.n	8005738 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800572a:	4a05      	ldr	r2, [pc, #20]	@ (8005740 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800572c:	88fb      	ldrh	r3, [r7, #6]
 800572e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005730:	88fb      	ldrh	r3, [r7, #6]
 8005732:	4618      	mov	r0, r3
 8005734:	f7fd fa3a 	bl	8002bac <HAL_GPIO_EXTI_Callback>
  }
}
 8005738:	bf00      	nop
 800573a:	3708      	adds	r7, #8
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	40010400 	.word	0x40010400

08005744 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d101      	bne.n	8005756 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e036      	b.n	80057c4 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 800575e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f245 5255 	movw	r2, #21845	@ 0x5555
 8005768:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	6852      	ldr	r2, [r2, #4]
 8005772:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	6892      	ldr	r2, [r2, #8]
 800577c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800577e:	f7fe fc47 	bl	8004010 <HAL_GetTick>
 8005782:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005784:	e011      	b.n	80057aa <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8005786:	f7fe fc43 	bl	8004010 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	f241 323c 	movw	r2, #4924	@ 0x133c
 8005794:	4293      	cmp	r3, r2
 8005796:	d908      	bls.n	80057aa <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	f003 0303 	and.w	r3, r3, #3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d001      	beq.n	80057aa <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e00c      	b.n	80057c4 <HAL_IWDG_Init+0x80>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	f003 0303 	and.w	r3, r3, #3
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1e6      	bne.n	8005786 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80057c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80057c2:	2300      	movs	r3, #0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80057dc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bc80      	pop	{r7}
 80057e8:	4770      	bx	lr
	...

080057ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e272      	b.n	8005ce4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	2b00      	cmp	r3, #0
 8005808:	f000 8087 	beq.w	800591a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800580c:	4b92      	ldr	r3, [pc, #584]	@ (8005a58 <HAL_RCC_OscConfig+0x26c>)
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f003 030c 	and.w	r3, r3, #12
 8005814:	2b04      	cmp	r3, #4
 8005816:	d00c      	beq.n	8005832 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005818:	4b8f      	ldr	r3, [pc, #572]	@ (8005a58 <HAL_RCC_OscConfig+0x26c>)
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f003 030c 	and.w	r3, r3, #12
 8005820:	2b08      	cmp	r3, #8
 8005822:	d112      	bne.n	800584a <HAL_RCC_OscConfig+0x5e>
 8005824:	4b8c      	ldr	r3, [pc, #560]	@ (8005a58 <HAL_RCC_OscConfig+0x26c>)
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800582c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005830:	d10b      	bne.n	800584a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005832:	4b89      	ldr	r3, [pc, #548]	@ (8005a58 <HAL_RCC_OscConfig+0x26c>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d06c      	beq.n	8005918 <HAL_RCC_OscConfig+0x12c>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d168      	bne.n	8005918 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e24c      	b.n	8005ce4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005852:	d106      	bne.n	8005862 <HAL_RCC_OscConfig+0x76>
 8005854:	4b80      	ldr	r3, [pc, #512]	@ (8005a58 <HAL_RCC_OscConfig+0x26c>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a7f      	ldr	r2, [pc, #508]	@ (8005a58 <HAL_RCC_OscConfig+0x26c>)
 800585a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800585e:	6013      	str	r3, [r2, #0]
 8005860:	e02e      	b.n	80058c0 <HAL_RCC_OscConfig+0xd4>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10c      	bne.n	8005884 <HAL_RCC_OscConfig+0x98>
 800586a:	4b7b      	ldr	r3, [pc, #492]	@ (8005a58 <HAL_RCC_OscConfig+0x26c>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a7a      	ldr	r2, [pc, #488]	@ (8005a58 <HAL_RCC_OscConfig+0x26c>)
 8005870:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005874:	6013      	str	r3, [r2, #0]
 8005876:	4b78      	ldr	r3, [pc, #480]	@ (8005a58 <HAL_RCC_OscConfig+0x26c>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a77      	ldr	r2, [pc, #476]	@ (8005a58 <HAL_RCC_OscConfig+0x26c>)
 800587c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005880:	6013      	str	r3, [r2, #0]
 8005882:	e01d      	b.n	80058c0 <HAL_RCC_OscConfig+0xd4>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800588c:	d10c      	bne.n	80058a8 <HAL_RCC_OscConfig+0xbc>
 800588e:	4b72      	ldr	r3, [pc, #456]	@ (8005a58 <HAL_RCC_OscConfig+0x26c>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a71      	ldr	r2, [pc, #452]	@ (8005a58 <HAL_RCC_OscConfig+0x26c>)
 8005894:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005898:	6013      	str	r3, [r2, #0]
 800589a:	4b6f      	ldr	r3, [pc, #444]	@ (8005a58 <HAL_RCC_OscConfig+0x26c>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a6e      	ldr	r2, [pc, #440]	@ (8005a58 <HAL_RCC_OscConfig+0x26c>)
 80058a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058a4:	6013      	str	r3, [r2, #0]
 80058a6:	e00b      	b.n	80058c0 <HAL_RCC_OscConfig+0xd4>
 80058a8:	4b6b      	ldr	r3, [pc, #428]	@ (8005a58 <HAL_RCC_OscConfig+0x26c>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a6a      	ldr	r2, [pc, #424]	@ (8005a58 <HAL_RCC_OscConfig+0x26c>)
 80058ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058b2:	6013      	str	r3, [r2, #0]
 80058b4:	4b68      	ldr	r3, [pc, #416]	@ (8005a58 <HAL_RCC_OscConfig+0x26c>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a67      	ldr	r2, [pc, #412]	@ (8005a58 <HAL_RCC_OscConfig+0x26c>)
 80058ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80058be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d013      	beq.n	80058f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058c8:	f7fe fba2 	bl	8004010 <HAL_GetTick>
 80058cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058ce:	e008      	b.n	80058e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058d0:	f7fe fb9e 	bl	8004010 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b64      	cmp	r3, #100	@ 0x64
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e200      	b.n	8005ce4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058e2:	4b5d      	ldr	r3, [pc, #372]	@ (8005a58 <HAL_RCC_OscConfig+0x26c>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d0f0      	beq.n	80058d0 <HAL_RCC_OscConfig+0xe4>
 80058ee:	e014      	b.n	800591a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058f0:	f7fe fb8e 	bl	8004010 <HAL_GetTick>
 80058f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058f6:	e008      	b.n	800590a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058f8:	f7fe fb8a 	bl	8004010 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	2b64      	cmp	r3, #100	@ 0x64
 8005904:	d901      	bls.n	800590a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e1ec      	b.n	8005ce4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800590a:	4b53      	ldr	r3, [pc, #332]	@ (8005a58 <HAL_RCC_OscConfig+0x26c>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1f0      	bne.n	80058f8 <HAL_RCC_OscConfig+0x10c>
 8005916:	e000      	b.n	800591a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005918:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0302 	and.w	r3, r3, #2
 8005922:	2b00      	cmp	r3, #0
 8005924:	d063      	beq.n	80059ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005926:	4b4c      	ldr	r3, [pc, #304]	@ (8005a58 <HAL_RCC_OscConfig+0x26c>)
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f003 030c 	and.w	r3, r3, #12
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00b      	beq.n	800594a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005932:	4b49      	ldr	r3, [pc, #292]	@ (8005a58 <HAL_RCC_OscConfig+0x26c>)
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f003 030c 	and.w	r3, r3, #12
 800593a:	2b08      	cmp	r3, #8
 800593c:	d11c      	bne.n	8005978 <HAL_RCC_OscConfig+0x18c>
 800593e:	4b46      	ldr	r3, [pc, #280]	@ (8005a58 <HAL_RCC_OscConfig+0x26c>)
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d116      	bne.n	8005978 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800594a:	4b43      	ldr	r3, [pc, #268]	@ (8005a58 <HAL_RCC_OscConfig+0x26c>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d005      	beq.n	8005962 <HAL_RCC_OscConfig+0x176>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	2b01      	cmp	r3, #1
 800595c:	d001      	beq.n	8005962 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e1c0      	b.n	8005ce4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005962:	4b3d      	ldr	r3, [pc, #244]	@ (8005a58 <HAL_RCC_OscConfig+0x26c>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	00db      	lsls	r3, r3, #3
 8005970:	4939      	ldr	r1, [pc, #228]	@ (8005a58 <HAL_RCC_OscConfig+0x26c>)
 8005972:	4313      	orrs	r3, r2
 8005974:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005976:	e03a      	b.n	80059ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d020      	beq.n	80059c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005980:	4b36      	ldr	r3, [pc, #216]	@ (8005a5c <HAL_RCC_OscConfig+0x270>)
 8005982:	2201      	movs	r2, #1
 8005984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005986:	f7fe fb43 	bl	8004010 <HAL_GetTick>
 800598a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800598c:	e008      	b.n	80059a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800598e:	f7fe fb3f 	bl	8004010 <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	2b02      	cmp	r3, #2
 800599a:	d901      	bls.n	80059a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e1a1      	b.n	8005ce4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059a0:	4b2d      	ldr	r3, [pc, #180]	@ (8005a58 <HAL_RCC_OscConfig+0x26c>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d0f0      	beq.n	800598e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059ac:	4b2a      	ldr	r3, [pc, #168]	@ (8005a58 <HAL_RCC_OscConfig+0x26c>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	695b      	ldr	r3, [r3, #20]
 80059b8:	00db      	lsls	r3, r3, #3
 80059ba:	4927      	ldr	r1, [pc, #156]	@ (8005a58 <HAL_RCC_OscConfig+0x26c>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	600b      	str	r3, [r1, #0]
 80059c0:	e015      	b.n	80059ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059c2:	4b26      	ldr	r3, [pc, #152]	@ (8005a5c <HAL_RCC_OscConfig+0x270>)
 80059c4:	2200      	movs	r2, #0
 80059c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059c8:	f7fe fb22 	bl	8004010 <HAL_GetTick>
 80059cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059ce:	e008      	b.n	80059e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059d0:	f7fe fb1e 	bl	8004010 <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d901      	bls.n	80059e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e180      	b.n	8005ce4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059e2:	4b1d      	ldr	r3, [pc, #116]	@ (8005a58 <HAL_RCC_OscConfig+0x26c>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0302 	and.w	r3, r3, #2
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1f0      	bne.n	80059d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0308 	and.w	r3, r3, #8
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d03a      	beq.n	8005a70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d019      	beq.n	8005a36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a02:	4b17      	ldr	r3, [pc, #92]	@ (8005a60 <HAL_RCC_OscConfig+0x274>)
 8005a04:	2201      	movs	r2, #1
 8005a06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a08:	f7fe fb02 	bl	8004010 <HAL_GetTick>
 8005a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a0e:	e008      	b.n	8005a22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a10:	f7fe fafe 	bl	8004010 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d901      	bls.n	8005a22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e160      	b.n	8005ce4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a22:	4b0d      	ldr	r3, [pc, #52]	@ (8005a58 <HAL_RCC_OscConfig+0x26c>)
 8005a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d0f0      	beq.n	8005a10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005a2e:	2001      	movs	r0, #1
 8005a30:	f000 face 	bl	8005fd0 <RCC_Delay>
 8005a34:	e01c      	b.n	8005a70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a36:	4b0a      	ldr	r3, [pc, #40]	@ (8005a60 <HAL_RCC_OscConfig+0x274>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a3c:	f7fe fae8 	bl	8004010 <HAL_GetTick>
 8005a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a42:	e00f      	b.n	8005a64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a44:	f7fe fae4 	bl	8004010 <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d908      	bls.n	8005a64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e146      	b.n	8005ce4 <HAL_RCC_OscConfig+0x4f8>
 8005a56:	bf00      	nop
 8005a58:	40021000 	.word	0x40021000
 8005a5c:	42420000 	.word	0x42420000
 8005a60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a64:	4b92      	ldr	r3, [pc, #584]	@ (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a68:	f003 0302 	and.w	r3, r3, #2
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1e9      	bne.n	8005a44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0304 	and.w	r3, r3, #4
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f000 80a6 	beq.w	8005bca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a82:	4b8b      	ldr	r3, [pc, #556]	@ (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005a84:	69db      	ldr	r3, [r3, #28]
 8005a86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10d      	bne.n	8005aaa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a8e:	4b88      	ldr	r3, [pc, #544]	@ (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005a90:	69db      	ldr	r3, [r3, #28]
 8005a92:	4a87      	ldr	r2, [pc, #540]	@ (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005a94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a98:	61d3      	str	r3, [r2, #28]
 8005a9a:	4b85      	ldr	r3, [pc, #532]	@ (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005a9c:	69db      	ldr	r3, [r3, #28]
 8005a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005aa2:	60bb      	str	r3, [r7, #8]
 8005aa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aaa:	4b82      	ldr	r3, [pc, #520]	@ (8005cb4 <HAL_RCC_OscConfig+0x4c8>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d118      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ab6:	4b7f      	ldr	r3, [pc, #508]	@ (8005cb4 <HAL_RCC_OscConfig+0x4c8>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a7e      	ldr	r2, [pc, #504]	@ (8005cb4 <HAL_RCC_OscConfig+0x4c8>)
 8005abc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ac0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ac2:	f7fe faa5 	bl	8004010 <HAL_GetTick>
 8005ac6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ac8:	e008      	b.n	8005adc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aca:	f7fe faa1 	bl	8004010 <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	2b64      	cmp	r3, #100	@ 0x64
 8005ad6:	d901      	bls.n	8005adc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e103      	b.n	8005ce4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005adc:	4b75      	ldr	r3, [pc, #468]	@ (8005cb4 <HAL_RCC_OscConfig+0x4c8>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d0f0      	beq.n	8005aca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d106      	bne.n	8005afe <HAL_RCC_OscConfig+0x312>
 8005af0:	4b6f      	ldr	r3, [pc, #444]	@ (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005af2:	6a1b      	ldr	r3, [r3, #32]
 8005af4:	4a6e      	ldr	r2, [pc, #440]	@ (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005af6:	f043 0301 	orr.w	r3, r3, #1
 8005afa:	6213      	str	r3, [r2, #32]
 8005afc:	e02d      	b.n	8005b5a <HAL_RCC_OscConfig+0x36e>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10c      	bne.n	8005b20 <HAL_RCC_OscConfig+0x334>
 8005b06:	4b6a      	ldr	r3, [pc, #424]	@ (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	4a69      	ldr	r2, [pc, #420]	@ (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005b0c:	f023 0301 	bic.w	r3, r3, #1
 8005b10:	6213      	str	r3, [r2, #32]
 8005b12:	4b67      	ldr	r3, [pc, #412]	@ (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	4a66      	ldr	r2, [pc, #408]	@ (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005b18:	f023 0304 	bic.w	r3, r3, #4
 8005b1c:	6213      	str	r3, [r2, #32]
 8005b1e:	e01c      	b.n	8005b5a <HAL_RCC_OscConfig+0x36e>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	2b05      	cmp	r3, #5
 8005b26:	d10c      	bne.n	8005b42 <HAL_RCC_OscConfig+0x356>
 8005b28:	4b61      	ldr	r3, [pc, #388]	@ (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005b2a:	6a1b      	ldr	r3, [r3, #32]
 8005b2c:	4a60      	ldr	r2, [pc, #384]	@ (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005b2e:	f043 0304 	orr.w	r3, r3, #4
 8005b32:	6213      	str	r3, [r2, #32]
 8005b34:	4b5e      	ldr	r3, [pc, #376]	@ (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005b36:	6a1b      	ldr	r3, [r3, #32]
 8005b38:	4a5d      	ldr	r2, [pc, #372]	@ (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005b3a:	f043 0301 	orr.w	r3, r3, #1
 8005b3e:	6213      	str	r3, [r2, #32]
 8005b40:	e00b      	b.n	8005b5a <HAL_RCC_OscConfig+0x36e>
 8005b42:	4b5b      	ldr	r3, [pc, #364]	@ (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	4a5a      	ldr	r2, [pc, #360]	@ (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005b48:	f023 0301 	bic.w	r3, r3, #1
 8005b4c:	6213      	str	r3, [r2, #32]
 8005b4e:	4b58      	ldr	r3, [pc, #352]	@ (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	4a57      	ldr	r2, [pc, #348]	@ (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005b54:	f023 0304 	bic.w	r3, r3, #4
 8005b58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d015      	beq.n	8005b8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b62:	f7fe fa55 	bl	8004010 <HAL_GetTick>
 8005b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b68:	e00a      	b.n	8005b80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b6a:	f7fe fa51 	bl	8004010 <HAL_GetTick>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d901      	bls.n	8005b80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e0b1      	b.n	8005ce4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b80:	4b4b      	ldr	r3, [pc, #300]	@ (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005b82:	6a1b      	ldr	r3, [r3, #32]
 8005b84:	f003 0302 	and.w	r3, r3, #2
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d0ee      	beq.n	8005b6a <HAL_RCC_OscConfig+0x37e>
 8005b8c:	e014      	b.n	8005bb8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b8e:	f7fe fa3f 	bl	8004010 <HAL_GetTick>
 8005b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b94:	e00a      	b.n	8005bac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b96:	f7fe fa3b 	bl	8004010 <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d901      	bls.n	8005bac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e09b      	b.n	8005ce4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bac:	4b40      	ldr	r3, [pc, #256]	@ (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005bae:	6a1b      	ldr	r3, [r3, #32]
 8005bb0:	f003 0302 	and.w	r3, r3, #2
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1ee      	bne.n	8005b96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005bb8:	7dfb      	ldrb	r3, [r7, #23]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d105      	bne.n	8005bca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bbe:	4b3c      	ldr	r3, [pc, #240]	@ (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005bc0:	69db      	ldr	r3, [r3, #28]
 8005bc2:	4a3b      	ldr	r2, [pc, #236]	@ (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005bc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bc8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	69db      	ldr	r3, [r3, #28]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f000 8087 	beq.w	8005ce2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bd4:	4b36      	ldr	r3, [pc, #216]	@ (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f003 030c 	and.w	r3, r3, #12
 8005bdc:	2b08      	cmp	r3, #8
 8005bde:	d061      	beq.n	8005ca4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	69db      	ldr	r3, [r3, #28]
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d146      	bne.n	8005c76 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005be8:	4b33      	ldr	r3, [pc, #204]	@ (8005cb8 <HAL_RCC_OscConfig+0x4cc>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bee:	f7fe fa0f 	bl	8004010 <HAL_GetTick>
 8005bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bf4:	e008      	b.n	8005c08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bf6:	f7fe fa0b 	bl	8004010 <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d901      	bls.n	8005c08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e06d      	b.n	8005ce4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c08:	4b29      	ldr	r3, [pc, #164]	@ (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1f0      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a1b      	ldr	r3, [r3, #32]
 8005c18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c1c:	d108      	bne.n	8005c30 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005c1e:	4b24      	ldr	r3, [pc, #144]	@ (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	4921      	ldr	r1, [pc, #132]	@ (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c30:	4b1f      	ldr	r3, [pc, #124]	@ (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a19      	ldr	r1, [r3, #32]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c40:	430b      	orrs	r3, r1
 8005c42:	491b      	ldr	r1, [pc, #108]	@ (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005c44:	4313      	orrs	r3, r2
 8005c46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c48:	4b1b      	ldr	r3, [pc, #108]	@ (8005cb8 <HAL_RCC_OscConfig+0x4cc>)
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c4e:	f7fe f9df 	bl	8004010 <HAL_GetTick>
 8005c52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c54:	e008      	b.n	8005c68 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c56:	f7fe f9db 	bl	8004010 <HAL_GetTick>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d901      	bls.n	8005c68 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e03d      	b.n	8005ce4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c68:	4b11      	ldr	r3, [pc, #68]	@ (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d0f0      	beq.n	8005c56 <HAL_RCC_OscConfig+0x46a>
 8005c74:	e035      	b.n	8005ce2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c76:	4b10      	ldr	r3, [pc, #64]	@ (8005cb8 <HAL_RCC_OscConfig+0x4cc>)
 8005c78:	2200      	movs	r2, #0
 8005c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c7c:	f7fe f9c8 	bl	8004010 <HAL_GetTick>
 8005c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c82:	e008      	b.n	8005c96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c84:	f7fe f9c4 	bl	8004010 <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d901      	bls.n	8005c96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e026      	b.n	8005ce4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c96:	4b06      	ldr	r3, [pc, #24]	@ (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1f0      	bne.n	8005c84 <HAL_RCC_OscConfig+0x498>
 8005ca2:	e01e      	b.n	8005ce2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	69db      	ldr	r3, [r3, #28]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d107      	bne.n	8005cbc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e019      	b.n	8005ce4 <HAL_RCC_OscConfig+0x4f8>
 8005cb0:	40021000 	.word	0x40021000
 8005cb4:	40007000 	.word	0x40007000
 8005cb8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8005cec <HAL_RCC_OscConfig+0x500>)
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a1b      	ldr	r3, [r3, #32]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d106      	bne.n	8005cde <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d001      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e000      	b.n	8005ce4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3718      	adds	r7, #24
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	40021000 	.word	0x40021000

08005cf0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d101      	bne.n	8005d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e0d0      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d04:	4b6a      	ldr	r3, [pc, #424]	@ (8005eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0307 	and.w	r3, r3, #7
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d910      	bls.n	8005d34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d12:	4b67      	ldr	r3, [pc, #412]	@ (8005eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f023 0207 	bic.w	r2, r3, #7
 8005d1a:	4965      	ldr	r1, [pc, #404]	@ (8005eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d22:	4b63      	ldr	r3, [pc, #396]	@ (8005eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0307 	and.w	r3, r3, #7
 8005d2a:	683a      	ldr	r2, [r7, #0]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d001      	beq.n	8005d34 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e0b8      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0302 	and.w	r3, r3, #2
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d020      	beq.n	8005d82 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0304 	and.w	r3, r3, #4
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d005      	beq.n	8005d58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d4c:	4b59      	ldr	r3, [pc, #356]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	4a58      	ldr	r2, [pc, #352]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d52:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005d56:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0308 	and.w	r3, r3, #8
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d005      	beq.n	8005d70 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d64:	4b53      	ldr	r3, [pc, #332]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	4a52      	ldr	r2, [pc, #328]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d6a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005d6e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d70:	4b50      	ldr	r3, [pc, #320]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	494d      	ldr	r1, [pc, #308]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d040      	beq.n	8005e10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d107      	bne.n	8005da6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d96:	4b47      	ldr	r3, [pc, #284]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d115      	bne.n	8005dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e07f      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d107      	bne.n	8005dbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dae:	4b41      	ldr	r3, [pc, #260]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d109      	bne.n	8005dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e073      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dbe:	4b3d      	ldr	r3, [pc, #244]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e06b      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005dce:	4b39      	ldr	r3, [pc, #228]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f023 0203 	bic.w	r2, r3, #3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	4936      	ldr	r1, [pc, #216]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005de0:	f7fe f916 	bl	8004010 <HAL_GetTick>
 8005de4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005de6:	e00a      	b.n	8005dfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005de8:	f7fe f912 	bl	8004010 <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d901      	bls.n	8005dfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e053      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dfe:	4b2d      	ldr	r3, [pc, #180]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	f003 020c 	and.w	r2, r3, #12
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d1eb      	bne.n	8005de8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e10:	4b27      	ldr	r3, [pc, #156]	@ (8005eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0307 	and.w	r3, r3, #7
 8005e18:	683a      	ldr	r2, [r7, #0]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d210      	bcs.n	8005e40 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e1e:	4b24      	ldr	r3, [pc, #144]	@ (8005eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f023 0207 	bic.w	r2, r3, #7
 8005e26:	4922      	ldr	r1, [pc, #136]	@ (8005eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e2e:	4b20      	ldr	r3, [pc, #128]	@ (8005eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0307 	and.w	r3, r3, #7
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d001      	beq.n	8005e40 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e032      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0304 	and.w	r3, r3, #4
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d008      	beq.n	8005e5e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e4c:	4b19      	ldr	r3, [pc, #100]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	4916      	ldr	r1, [pc, #88]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0308 	and.w	r3, r3, #8
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d009      	beq.n	8005e7e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005e6a:	4b12      	ldr	r3, [pc, #72]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	00db      	lsls	r3, r3, #3
 8005e78:	490e      	ldr	r1, [pc, #56]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e7e:	f000 f821 	bl	8005ec4 <HAL_RCC_GetSysClockFreq>
 8005e82:	4602      	mov	r2, r0
 8005e84:	4b0b      	ldr	r3, [pc, #44]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	091b      	lsrs	r3, r3, #4
 8005e8a:	f003 030f 	and.w	r3, r3, #15
 8005e8e:	490a      	ldr	r1, [pc, #40]	@ (8005eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8005e90:	5ccb      	ldrb	r3, [r1, r3]
 8005e92:	fa22 f303 	lsr.w	r3, r2, r3
 8005e96:	4a09      	ldr	r2, [pc, #36]	@ (8005ebc <HAL_RCC_ClockConfig+0x1cc>)
 8005e98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005e9a:	4b09      	ldr	r3, [pc, #36]	@ (8005ec0 <HAL_RCC_ClockConfig+0x1d0>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7fe f874 	bl	8003f8c <HAL_InitTick>

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	40022000 	.word	0x40022000
 8005eb4:	40021000 	.word	0x40021000
 8005eb8:	0800ccf0 	.word	0x0800ccf0
 8005ebc:	20000064 	.word	0x20000064
 8005ec0:	20000068 	.word	0x20000068

08005ec4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b087      	sub	sp, #28
 8005ec8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	60fb      	str	r3, [r7, #12]
 8005ece:	2300      	movs	r3, #0
 8005ed0:	60bb      	str	r3, [r7, #8]
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	617b      	str	r3, [r7, #20]
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005eda:	2300      	movs	r3, #0
 8005edc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005ede:	4b1e      	ldr	r3, [pc, #120]	@ (8005f58 <HAL_RCC_GetSysClockFreq+0x94>)
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f003 030c 	and.w	r3, r3, #12
 8005eea:	2b04      	cmp	r3, #4
 8005eec:	d002      	beq.n	8005ef4 <HAL_RCC_GetSysClockFreq+0x30>
 8005eee:	2b08      	cmp	r3, #8
 8005ef0:	d003      	beq.n	8005efa <HAL_RCC_GetSysClockFreq+0x36>
 8005ef2:	e027      	b.n	8005f44 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ef4:	4b19      	ldr	r3, [pc, #100]	@ (8005f5c <HAL_RCC_GetSysClockFreq+0x98>)
 8005ef6:	613b      	str	r3, [r7, #16]
      break;
 8005ef8:	e027      	b.n	8005f4a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	0c9b      	lsrs	r3, r3, #18
 8005efe:	f003 030f 	and.w	r3, r3, #15
 8005f02:	4a17      	ldr	r2, [pc, #92]	@ (8005f60 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005f04:	5cd3      	ldrb	r3, [r2, r3]
 8005f06:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d010      	beq.n	8005f34 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005f12:	4b11      	ldr	r3, [pc, #68]	@ (8005f58 <HAL_RCC_GetSysClockFreq+0x94>)
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	0c5b      	lsrs	r3, r3, #17
 8005f18:	f003 0301 	and.w	r3, r3, #1
 8005f1c:	4a11      	ldr	r2, [pc, #68]	@ (8005f64 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005f1e:	5cd3      	ldrb	r3, [r2, r3]
 8005f20:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a0d      	ldr	r2, [pc, #52]	@ (8005f5c <HAL_RCC_GetSysClockFreq+0x98>)
 8005f26:	fb03 f202 	mul.w	r2, r3, r2
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f30:	617b      	str	r3, [r7, #20]
 8005f32:	e004      	b.n	8005f3e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a0c      	ldr	r2, [pc, #48]	@ (8005f68 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005f38:	fb02 f303 	mul.w	r3, r2, r3
 8005f3c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	613b      	str	r3, [r7, #16]
      break;
 8005f42:	e002      	b.n	8005f4a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005f44:	4b05      	ldr	r3, [pc, #20]	@ (8005f5c <HAL_RCC_GetSysClockFreq+0x98>)
 8005f46:	613b      	str	r3, [r7, #16]
      break;
 8005f48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f4a:	693b      	ldr	r3, [r7, #16]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	371c      	adds	r7, #28
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bc80      	pop	{r7}
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	40021000 	.word	0x40021000
 8005f5c:	007a1200 	.word	0x007a1200
 8005f60:	0800cd08 	.word	0x0800cd08
 8005f64:	0800cd18 	.word	0x0800cd18
 8005f68:	003d0900 	.word	0x003d0900

08005f6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f70:	4b02      	ldr	r3, [pc, #8]	@ (8005f7c <HAL_RCC_GetHCLKFreq+0x10>)
 8005f72:	681b      	ldr	r3, [r3, #0]
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bc80      	pop	{r7}
 8005f7a:	4770      	bx	lr
 8005f7c:	20000064 	.word	0x20000064

08005f80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f84:	f7ff fff2 	bl	8005f6c <HAL_RCC_GetHCLKFreq>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	4b05      	ldr	r3, [pc, #20]	@ (8005fa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	0a1b      	lsrs	r3, r3, #8
 8005f90:	f003 0307 	and.w	r3, r3, #7
 8005f94:	4903      	ldr	r1, [pc, #12]	@ (8005fa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f96:	5ccb      	ldrb	r3, [r1, r3]
 8005f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	40021000 	.word	0x40021000
 8005fa4:	0800cd00 	.word	0x0800cd00

08005fa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005fac:	f7ff ffde 	bl	8005f6c <HAL_RCC_GetHCLKFreq>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	4b05      	ldr	r3, [pc, #20]	@ (8005fc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	0adb      	lsrs	r3, r3, #11
 8005fb8:	f003 0307 	and.w	r3, r3, #7
 8005fbc:	4903      	ldr	r1, [pc, #12]	@ (8005fcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fbe:	5ccb      	ldrb	r3, [r1, r3]
 8005fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	40021000 	.word	0x40021000
 8005fcc:	0800cd00 	.word	0x0800cd00

08005fd0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8006004 <RCC_Delay+0x34>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a0a      	ldr	r2, [pc, #40]	@ (8006008 <RCC_Delay+0x38>)
 8005fde:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe2:	0a5b      	lsrs	r3, r3, #9
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	fb02 f303 	mul.w	r3, r2, r3
 8005fea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005fec:	bf00      	nop
  }
  while (Delay --);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	1e5a      	subs	r2, r3, #1
 8005ff2:	60fa      	str	r2, [r7, #12]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1f9      	bne.n	8005fec <RCC_Delay+0x1c>
}
 8005ff8:	bf00      	nop
 8005ffa:	bf00      	nop
 8005ffc:	3714      	adds	r7, #20
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bc80      	pop	{r7}
 8006002:	4770      	bx	lr
 8006004:	20000064 	.word	0x20000064
 8006008:	10624dd3 	.word	0x10624dd3

0800600c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006014:	2300      	movs	r3, #0
 8006016:	613b      	str	r3, [r7, #16]
 8006018:	2300      	movs	r3, #0
 800601a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0301 	and.w	r3, r3, #1
 8006024:	2b00      	cmp	r3, #0
 8006026:	d07d      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006028:	2300      	movs	r3, #0
 800602a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800602c:	4b4f      	ldr	r3, [pc, #316]	@ (800616c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800602e:	69db      	ldr	r3, [r3, #28]
 8006030:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10d      	bne.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006038:	4b4c      	ldr	r3, [pc, #304]	@ (800616c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800603a:	69db      	ldr	r3, [r3, #28]
 800603c:	4a4b      	ldr	r2, [pc, #300]	@ (800616c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800603e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006042:	61d3      	str	r3, [r2, #28]
 8006044:	4b49      	ldr	r3, [pc, #292]	@ (800616c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006046:	69db      	ldr	r3, [r3, #28]
 8006048:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800604c:	60bb      	str	r3, [r7, #8]
 800604e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006050:	2301      	movs	r3, #1
 8006052:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006054:	4b46      	ldr	r3, [pc, #280]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800605c:	2b00      	cmp	r3, #0
 800605e:	d118      	bne.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006060:	4b43      	ldr	r3, [pc, #268]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a42      	ldr	r2, [pc, #264]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006066:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800606a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800606c:	f7fd ffd0 	bl	8004010 <HAL_GetTick>
 8006070:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006072:	e008      	b.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006074:	f7fd ffcc 	bl	8004010 <HAL_GetTick>
 8006078:	4602      	mov	r2, r0
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	2b64      	cmp	r3, #100	@ 0x64
 8006080:	d901      	bls.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e06d      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006086:	4b3a      	ldr	r3, [pc, #232]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800608e:	2b00      	cmp	r3, #0
 8006090:	d0f0      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006092:	4b36      	ldr	r3, [pc, #216]	@ (800616c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006094:	6a1b      	ldr	r3, [r3, #32]
 8006096:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800609a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d02e      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d027      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80060b0:	4b2e      	ldr	r3, [pc, #184]	@ (800616c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060b8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80060ba:	4b2e      	ldr	r3, [pc, #184]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80060bc:	2201      	movs	r2, #1
 80060be:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80060c0:	4b2c      	ldr	r3, [pc, #176]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80060c2:	2200      	movs	r2, #0
 80060c4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80060c6:	4a29      	ldr	r2, [pc, #164]	@ (800616c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d014      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060d6:	f7fd ff9b 	bl	8004010 <HAL_GetTick>
 80060da:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060dc:	e00a      	b.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060de:	f7fd ff97 	bl	8004010 <HAL_GetTick>
 80060e2:	4602      	mov	r2, r0
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d901      	bls.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e036      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060f4:	4b1d      	ldr	r3, [pc, #116]	@ (800616c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	f003 0302 	and.w	r3, r3, #2
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d0ee      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006100:	4b1a      	ldr	r3, [pc, #104]	@ (800616c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	4917      	ldr	r1, [pc, #92]	@ (800616c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800610e:	4313      	orrs	r3, r2
 8006110:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006112:	7dfb      	ldrb	r3, [r7, #23]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d105      	bne.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006118:	4b14      	ldr	r3, [pc, #80]	@ (800616c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800611a:	69db      	ldr	r3, [r3, #28]
 800611c:	4a13      	ldr	r2, [pc, #76]	@ (800616c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800611e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006122:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 0302 	and.w	r3, r3, #2
 800612c:	2b00      	cmp	r3, #0
 800612e:	d008      	beq.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006130:	4b0e      	ldr	r3, [pc, #56]	@ (800616c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	490b      	ldr	r1, [pc, #44]	@ (800616c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800613e:	4313      	orrs	r3, r2
 8006140:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0310 	and.w	r3, r3, #16
 800614a:	2b00      	cmp	r3, #0
 800614c:	d008      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800614e:	4b07      	ldr	r3, [pc, #28]	@ (800616c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	4904      	ldr	r1, [pc, #16]	@ (800616c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800615c:	4313      	orrs	r3, r2
 800615e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3718      	adds	r7, #24
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	40021000 	.word	0x40021000
 8006170:	40007000 	.word	0x40007000
 8006174:	42420440 	.word	0x42420440

08006178 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b088      	sub	sp, #32
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006180:	2300      	movs	r3, #0
 8006182:	617b      	str	r3, [r7, #20]
 8006184:	2300      	movs	r3, #0
 8006186:	61fb      	str	r3, [r7, #28]
 8006188:	2300      	movs	r3, #0
 800618a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800618c:	2300      	movs	r3, #0
 800618e:	60fb      	str	r3, [r7, #12]
 8006190:	2300      	movs	r3, #0
 8006192:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b10      	cmp	r3, #16
 8006198:	d00a      	beq.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2b10      	cmp	r3, #16
 800619e:	f200 808a 	bhi.w	80062b6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d045      	beq.n	8006234 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d075      	beq.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80061ae:	e082      	b.n	80062b6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80061b0:	4b46      	ldr	r3, [pc, #280]	@ (80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80061b6:	4b45      	ldr	r3, [pc, #276]	@ (80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d07b      	beq.n	80062ba <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	0c9b      	lsrs	r3, r3, #18
 80061c6:	f003 030f 	and.w	r3, r3, #15
 80061ca:	4a41      	ldr	r2, [pc, #260]	@ (80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80061cc:	5cd3      	ldrb	r3, [r2, r3]
 80061ce:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d015      	beq.n	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80061da:	4b3c      	ldr	r3, [pc, #240]	@ (80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	0c5b      	lsrs	r3, r3, #17
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	4a3b      	ldr	r2, [pc, #236]	@ (80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80061e6:	5cd3      	ldrb	r3, [r2, r3]
 80061e8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00d      	beq.n	8006210 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80061f4:	4a38      	ldr	r2, [pc, #224]	@ (80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	fb02 f303 	mul.w	r3, r2, r3
 8006202:	61fb      	str	r3, [r7, #28]
 8006204:	e004      	b.n	8006210 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	4a34      	ldr	r2, [pc, #208]	@ (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800620a:	fb02 f303 	mul.w	r3, r2, r3
 800620e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006210:	4b2e      	ldr	r3, [pc, #184]	@ (80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006218:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800621c:	d102      	bne.n	8006224 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	61bb      	str	r3, [r7, #24]
      break;
 8006222:	e04a      	b.n	80062ba <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	005b      	lsls	r3, r3, #1
 8006228:	4a2d      	ldr	r2, [pc, #180]	@ (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800622a:	fba2 2303 	umull	r2, r3, r2, r3
 800622e:	085b      	lsrs	r3, r3, #1
 8006230:	61bb      	str	r3, [r7, #24]
      break;
 8006232:	e042      	b.n	80062ba <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8006234:	4b25      	ldr	r3, [pc, #148]	@ (80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006236:	6a1b      	ldr	r3, [r3, #32]
 8006238:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006240:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006244:	d108      	bne.n	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f003 0302 	and.w	r3, r3, #2
 800624c:	2b00      	cmp	r3, #0
 800624e:	d003      	beq.n	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8006250:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006254:	61bb      	str	r3, [r7, #24]
 8006256:	e01f      	b.n	8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800625e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006262:	d109      	bne.n	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8006264:	4b19      	ldr	r3, [pc, #100]	@ (80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006268:	f003 0302 	and.w	r3, r3, #2
 800626c:	2b00      	cmp	r3, #0
 800626e:	d003      	beq.n	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8006270:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8006274:	61bb      	str	r3, [r7, #24]
 8006276:	e00f      	b.n	8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800627e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006282:	d11c      	bne.n	80062be <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006284:	4b11      	ldr	r3, [pc, #68]	@ (80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800628c:	2b00      	cmp	r3, #0
 800628e:	d016      	beq.n	80062be <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8006290:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8006294:	61bb      	str	r3, [r7, #24]
      break;
 8006296:	e012      	b.n	80062be <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006298:	e011      	b.n	80062be <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800629a:	f7ff fe85 	bl	8005fa8 <HAL_RCC_GetPCLK2Freq>
 800629e:	4602      	mov	r2, r0
 80062a0:	4b0a      	ldr	r3, [pc, #40]	@ (80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	0b9b      	lsrs	r3, r3, #14
 80062a6:	f003 0303 	and.w	r3, r3, #3
 80062aa:	3301      	adds	r3, #1
 80062ac:	005b      	lsls	r3, r3, #1
 80062ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80062b2:	61bb      	str	r3, [r7, #24]
      break;
 80062b4:	e004      	b.n	80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80062b6:	bf00      	nop
 80062b8:	e002      	b.n	80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80062ba:	bf00      	nop
 80062bc:	e000      	b.n	80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80062be:	bf00      	nop
    }
  }
  return (frequency);
 80062c0:	69bb      	ldr	r3, [r7, #24]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3720      	adds	r7, #32
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	40021000 	.word	0x40021000
 80062d0:	0800cd1c 	.word	0x0800cd1c
 80062d4:	0800cd2c 	.word	0x0800cd2c
 80062d8:	007a1200 	.word	0x007a1200
 80062dc:	003d0900 	.word	0x003d0900
 80062e0:	aaaaaaab 	.word	0xaaaaaaab

080062e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d101      	bne.n	80062f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e041      	b.n	800637a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d106      	bne.n	8006310 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f7fd fbde 	bl	8003acc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2202      	movs	r2, #2
 8006314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	3304      	adds	r3, #4
 8006320:	4619      	mov	r1, r3
 8006322:	4610      	mov	r0, r2
 8006324:	f000 fcec 	bl	8006d00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3708      	adds	r7, #8
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
	...

08006384 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006392:	b2db      	uxtb	r3, r3
 8006394:	2b01      	cmp	r3, #1
 8006396:	d001      	beq.n	800639c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e032      	b.n	8006402 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2202      	movs	r2, #2
 80063a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a18      	ldr	r2, [pc, #96]	@ (800640c <HAL_TIM_Base_Start+0x88>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d00e      	beq.n	80063cc <HAL_TIM_Base_Start+0x48>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063b6:	d009      	beq.n	80063cc <HAL_TIM_Base_Start+0x48>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a14      	ldr	r2, [pc, #80]	@ (8006410 <HAL_TIM_Base_Start+0x8c>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d004      	beq.n	80063cc <HAL_TIM_Base_Start+0x48>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a13      	ldr	r2, [pc, #76]	@ (8006414 <HAL_TIM_Base_Start+0x90>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d111      	bne.n	80063f0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f003 0307 	and.w	r3, r3, #7
 80063d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2b06      	cmp	r3, #6
 80063dc:	d010      	beq.n	8006400 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f042 0201 	orr.w	r2, r2, #1
 80063ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063ee:	e007      	b.n	8006400 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f042 0201 	orr.w	r2, r2, #1
 80063fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3714      	adds	r7, #20
 8006406:	46bd      	mov	sp, r7
 8006408:	bc80      	pop	{r7}
 800640a:	4770      	bx	lr
 800640c:	40012c00 	.word	0x40012c00
 8006410:	40000400 	.word	0x40000400
 8006414:	40000800 	.word	0x40000800

08006418 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	6a1a      	ldr	r2, [r3, #32]
 8006426:	f241 1311 	movw	r3, #4369	@ 0x1111
 800642a:	4013      	ands	r3, r2
 800642c:	2b00      	cmp	r3, #0
 800642e:	d10f      	bne.n	8006450 <HAL_TIM_Base_Stop+0x38>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6a1a      	ldr	r2, [r3, #32]
 8006436:	f240 4344 	movw	r3, #1092	@ 0x444
 800643a:	4013      	ands	r3, r2
 800643c:	2b00      	cmp	r3, #0
 800643e:	d107      	bne.n	8006450 <HAL_TIM_Base_Stop+0x38>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f022 0201 	bic.w	r2, r2, #1
 800644e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	bc80      	pop	{r7}
 8006462:	4770      	bx	lr

08006464 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006472:	b2db      	uxtb	r3, r3
 8006474:	2b01      	cmp	r3, #1
 8006476:	d001      	beq.n	800647c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e03a      	b.n	80064f2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2202      	movs	r2, #2
 8006480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68da      	ldr	r2, [r3, #12]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f042 0201 	orr.w	r2, r2, #1
 8006492:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a18      	ldr	r2, [pc, #96]	@ (80064fc <HAL_TIM_Base_Start_IT+0x98>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d00e      	beq.n	80064bc <HAL_TIM_Base_Start_IT+0x58>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064a6:	d009      	beq.n	80064bc <HAL_TIM_Base_Start_IT+0x58>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a14      	ldr	r2, [pc, #80]	@ (8006500 <HAL_TIM_Base_Start_IT+0x9c>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d004      	beq.n	80064bc <HAL_TIM_Base_Start_IT+0x58>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a13      	ldr	r2, [pc, #76]	@ (8006504 <HAL_TIM_Base_Start_IT+0xa0>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d111      	bne.n	80064e0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	f003 0307 	and.w	r3, r3, #7
 80064c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2b06      	cmp	r3, #6
 80064cc:	d010      	beq.n	80064f0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f042 0201 	orr.w	r2, r2, #1
 80064dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064de:	e007      	b.n	80064f0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f042 0201 	orr.w	r2, r2, #1
 80064ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3714      	adds	r7, #20
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bc80      	pop	{r7}
 80064fa:	4770      	bx	lr
 80064fc:	40012c00 	.word	0x40012c00
 8006500:	40000400 	.word	0x40000400
 8006504:	40000800 	.word	0x40000800

08006508 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d101      	bne.n	800651a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e041      	b.n	800659e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b00      	cmp	r3, #0
 8006524:	d106      	bne.n	8006534 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 f839 	bl	80065a6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2202      	movs	r2, #2
 8006538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	3304      	adds	r3, #4
 8006544:	4619      	mov	r1, r3
 8006546:	4610      	mov	r0, r2
 8006548:	f000 fbda 	bl	8006d00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3708      	adds	r7, #8
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80065a6:	b480      	push	{r7}
 80065a8:	b083      	sub	sp, #12
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80065ae:	bf00      	nop
 80065b0:	370c      	adds	r7, #12
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bc80      	pop	{r7}
 80065b6:	4770      	bx	lr

080065b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d109      	bne.n	80065dc <HAL_TIM_PWM_Start+0x24>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	bf14      	ite	ne
 80065d4:	2301      	movne	r3, #1
 80065d6:	2300      	moveq	r3, #0
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	e022      	b.n	8006622 <HAL_TIM_PWM_Start+0x6a>
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	2b04      	cmp	r3, #4
 80065e0:	d109      	bne.n	80065f6 <HAL_TIM_PWM_Start+0x3e>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	bf14      	ite	ne
 80065ee:	2301      	movne	r3, #1
 80065f0:	2300      	moveq	r3, #0
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	e015      	b.n	8006622 <HAL_TIM_PWM_Start+0x6a>
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	2b08      	cmp	r3, #8
 80065fa:	d109      	bne.n	8006610 <HAL_TIM_PWM_Start+0x58>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006602:	b2db      	uxtb	r3, r3
 8006604:	2b01      	cmp	r3, #1
 8006606:	bf14      	ite	ne
 8006608:	2301      	movne	r3, #1
 800660a:	2300      	moveq	r3, #0
 800660c:	b2db      	uxtb	r3, r3
 800660e:	e008      	b.n	8006622 <HAL_TIM_PWM_Start+0x6a>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b01      	cmp	r3, #1
 800661a:	bf14      	ite	ne
 800661c:	2301      	movne	r3, #1
 800661e:	2300      	moveq	r3, #0
 8006620:	b2db      	uxtb	r3, r3
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e05e      	b.n	80066e8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d104      	bne.n	800663a <HAL_TIM_PWM_Start+0x82>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2202      	movs	r2, #2
 8006634:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006638:	e013      	b.n	8006662 <HAL_TIM_PWM_Start+0xaa>
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	2b04      	cmp	r3, #4
 800663e:	d104      	bne.n	800664a <HAL_TIM_PWM_Start+0x92>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2202      	movs	r2, #2
 8006644:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006648:	e00b      	b.n	8006662 <HAL_TIM_PWM_Start+0xaa>
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	2b08      	cmp	r3, #8
 800664e:	d104      	bne.n	800665a <HAL_TIM_PWM_Start+0xa2>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2202      	movs	r2, #2
 8006654:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006658:	e003      	b.n	8006662 <HAL_TIM_PWM_Start+0xaa>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2202      	movs	r2, #2
 800665e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2201      	movs	r2, #1
 8006668:	6839      	ldr	r1, [r7, #0]
 800666a:	4618      	mov	r0, r3
 800666c:	f000 fdd4 	bl	8007218 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a1e      	ldr	r2, [pc, #120]	@ (80066f0 <HAL_TIM_PWM_Start+0x138>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d107      	bne.n	800668a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006688:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a18      	ldr	r2, [pc, #96]	@ (80066f0 <HAL_TIM_PWM_Start+0x138>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d00e      	beq.n	80066b2 <HAL_TIM_PWM_Start+0xfa>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800669c:	d009      	beq.n	80066b2 <HAL_TIM_PWM_Start+0xfa>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a14      	ldr	r2, [pc, #80]	@ (80066f4 <HAL_TIM_PWM_Start+0x13c>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d004      	beq.n	80066b2 <HAL_TIM_PWM_Start+0xfa>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a12      	ldr	r2, [pc, #72]	@ (80066f8 <HAL_TIM_PWM_Start+0x140>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d111      	bne.n	80066d6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	f003 0307 	and.w	r3, r3, #7
 80066bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2b06      	cmp	r3, #6
 80066c2:	d010      	beq.n	80066e6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f042 0201 	orr.w	r2, r2, #1
 80066d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066d4:	e007      	b.n	80066e6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f042 0201 	orr.w	r2, r2, #1
 80066e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	40012c00 	.word	0x40012c00
 80066f4:	40000400 	.word	0x40000400
 80066f8:	40000800 	.word	0x40000800

080066fc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2200      	movs	r2, #0
 800670c:	6839      	ldr	r1, [r7, #0]
 800670e:	4618      	mov	r0, r3
 8006710:	f000 fd82 	bl	8007218 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a29      	ldr	r2, [pc, #164]	@ (80067c0 <HAL_TIM_PWM_Stop+0xc4>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d117      	bne.n	800674e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	6a1a      	ldr	r2, [r3, #32]
 8006724:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006728:	4013      	ands	r3, r2
 800672a:	2b00      	cmp	r3, #0
 800672c:	d10f      	bne.n	800674e <HAL_TIM_PWM_Stop+0x52>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	6a1a      	ldr	r2, [r3, #32]
 8006734:	f240 4344 	movw	r3, #1092	@ 0x444
 8006738:	4013      	ands	r3, r2
 800673a:	2b00      	cmp	r3, #0
 800673c:	d107      	bne.n	800674e <HAL_TIM_PWM_Stop+0x52>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800674c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	6a1a      	ldr	r2, [r3, #32]
 8006754:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006758:	4013      	ands	r3, r2
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10f      	bne.n	800677e <HAL_TIM_PWM_Stop+0x82>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	6a1a      	ldr	r2, [r3, #32]
 8006764:	f240 4344 	movw	r3, #1092	@ 0x444
 8006768:	4013      	ands	r3, r2
 800676a:	2b00      	cmp	r3, #0
 800676c:	d107      	bne.n	800677e <HAL_TIM_PWM_Stop+0x82>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f022 0201 	bic.w	r2, r2, #1
 800677c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d104      	bne.n	800678e <HAL_TIM_PWM_Stop+0x92>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800678c:	e013      	b.n	80067b6 <HAL_TIM_PWM_Stop+0xba>
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	2b04      	cmp	r3, #4
 8006792:	d104      	bne.n	800679e <HAL_TIM_PWM_Stop+0xa2>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800679c:	e00b      	b.n	80067b6 <HAL_TIM_PWM_Stop+0xba>
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2b08      	cmp	r3, #8
 80067a2:	d104      	bne.n	80067ae <HAL_TIM_PWM_Stop+0xb2>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067ac:	e003      	b.n	80067b6 <HAL_TIM_PWM_Stop+0xba>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3708      	adds	r7, #8
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	40012c00 	.word	0x40012c00

080067c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	f003 0302 	and.w	r3, r3, #2
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d020      	beq.n	8006828 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f003 0302 	and.w	r3, r3, #2
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d01b      	beq.n	8006828 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f06f 0202 	mvn.w	r2, #2
 80067f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2201      	movs	r2, #1
 80067fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	f003 0303 	and.w	r3, r3, #3
 800680a:	2b00      	cmp	r3, #0
 800680c:	d003      	beq.n	8006816 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 fa5a 	bl	8006cc8 <HAL_TIM_IC_CaptureCallback>
 8006814:	e005      	b.n	8006822 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 fa4d 	bl	8006cb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 fa5c 	bl	8006cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	f003 0304 	and.w	r3, r3, #4
 800682e:	2b00      	cmp	r3, #0
 8006830:	d020      	beq.n	8006874 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f003 0304 	and.w	r3, r3, #4
 8006838:	2b00      	cmp	r3, #0
 800683a:	d01b      	beq.n	8006874 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f06f 0204 	mvn.w	r2, #4
 8006844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2202      	movs	r2, #2
 800684a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006856:	2b00      	cmp	r3, #0
 8006858:	d003      	beq.n	8006862 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fa34 	bl	8006cc8 <HAL_TIM_IC_CaptureCallback>
 8006860:	e005      	b.n	800686e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 fa27 	bl	8006cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 fa36 	bl	8006cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	f003 0308 	and.w	r3, r3, #8
 800687a:	2b00      	cmp	r3, #0
 800687c:	d020      	beq.n	80068c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f003 0308 	and.w	r3, r3, #8
 8006884:	2b00      	cmp	r3, #0
 8006886:	d01b      	beq.n	80068c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f06f 0208 	mvn.w	r2, #8
 8006890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2204      	movs	r2, #4
 8006896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	69db      	ldr	r3, [r3, #28]
 800689e:	f003 0303 	and.w	r3, r3, #3
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d003      	beq.n	80068ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fa0e 	bl	8006cc8 <HAL_TIM_IC_CaptureCallback>
 80068ac:	e005      	b.n	80068ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 fa01 	bl	8006cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 fa10 	bl	8006cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	f003 0310 	and.w	r3, r3, #16
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d020      	beq.n	800690c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f003 0310 	and.w	r3, r3, #16
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d01b      	beq.n	800690c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f06f 0210 	mvn.w	r2, #16
 80068dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2208      	movs	r2, #8
 80068e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	69db      	ldr	r3, [r3, #28]
 80068ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d003      	beq.n	80068fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 f9e8 	bl	8006cc8 <HAL_TIM_IC_CaptureCallback>
 80068f8:	e005      	b.n	8006906 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 f9db 	bl	8006cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 f9ea 	bl	8006cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	f003 0301 	and.w	r3, r3, #1
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00c      	beq.n	8006930 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f003 0301 	and.w	r3, r3, #1
 800691c:	2b00      	cmp	r3, #0
 800691e:	d007      	beq.n	8006930 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f06f 0201 	mvn.w	r2, #1
 8006928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f7fc fc14 	bl	8003158 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00c      	beq.n	8006954 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006940:	2b00      	cmp	r3, #0
 8006942:	d007      	beq.n	8006954 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800694c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 fced 	bl	800732e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00c      	beq.n	8006978 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006964:	2b00      	cmp	r3, #0
 8006966:	d007      	beq.n	8006978 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 f9ba 	bl	8006cec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	f003 0320 	and.w	r3, r3, #32
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00c      	beq.n	800699c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f003 0320 	and.w	r3, r3, #32
 8006988:	2b00      	cmp	r3, #0
 800698a:	d007      	beq.n	800699c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f06f 0220 	mvn.w	r2, #32
 8006994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 fcc0 	bl	800731c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800699c:	bf00      	nop
 800699e:	3710      	adds	r7, #16
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b086      	sub	sp, #24
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069b0:	2300      	movs	r3, #0
 80069b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d101      	bne.n	80069c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80069be:	2302      	movs	r3, #2
 80069c0:	e0ae      	b.n	8006b20 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2201      	movs	r2, #1
 80069c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2b0c      	cmp	r3, #12
 80069ce:	f200 809f 	bhi.w	8006b10 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80069d2:	a201      	add	r2, pc, #4	@ (adr r2, 80069d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80069d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d8:	08006a0d 	.word	0x08006a0d
 80069dc:	08006b11 	.word	0x08006b11
 80069e0:	08006b11 	.word	0x08006b11
 80069e4:	08006b11 	.word	0x08006b11
 80069e8:	08006a4d 	.word	0x08006a4d
 80069ec:	08006b11 	.word	0x08006b11
 80069f0:	08006b11 	.word	0x08006b11
 80069f4:	08006b11 	.word	0x08006b11
 80069f8:	08006a8f 	.word	0x08006a8f
 80069fc:	08006b11 	.word	0x08006b11
 8006a00:	08006b11 	.word	0x08006b11
 8006a04:	08006b11 	.word	0x08006b11
 8006a08:	08006acf 	.word	0x08006acf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68b9      	ldr	r1, [r7, #8]
 8006a12:	4618      	mov	r0, r3
 8006a14:	f000 f9e2 	bl	8006ddc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	699a      	ldr	r2, [r3, #24]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f042 0208 	orr.w	r2, r2, #8
 8006a26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	699a      	ldr	r2, [r3, #24]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f022 0204 	bic.w	r2, r2, #4
 8006a36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	6999      	ldr	r1, [r3, #24]
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	691a      	ldr	r2, [r3, #16]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	430a      	orrs	r2, r1
 8006a48:	619a      	str	r2, [r3, #24]
      break;
 8006a4a:	e064      	b.n	8006b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68b9      	ldr	r1, [r7, #8]
 8006a52:	4618      	mov	r0, r3
 8006a54:	f000 fa28 	bl	8006ea8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	699a      	ldr	r2, [r3, #24]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	699a      	ldr	r2, [r3, #24]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6999      	ldr	r1, [r3, #24]
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	021a      	lsls	r2, r3, #8
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	619a      	str	r2, [r3, #24]
      break;
 8006a8c:	e043      	b.n	8006b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68b9      	ldr	r1, [r7, #8]
 8006a94:	4618      	mov	r0, r3
 8006a96:	f000 fa71 	bl	8006f7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	69da      	ldr	r2, [r3, #28]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f042 0208 	orr.w	r2, r2, #8
 8006aa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	69da      	ldr	r2, [r3, #28]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f022 0204 	bic.w	r2, r2, #4
 8006ab8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	69d9      	ldr	r1, [r3, #28]
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	691a      	ldr	r2, [r3, #16]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	430a      	orrs	r2, r1
 8006aca:	61da      	str	r2, [r3, #28]
      break;
 8006acc:	e023      	b.n	8006b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68b9      	ldr	r1, [r7, #8]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f000 fabb 	bl	8007050 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	69da      	ldr	r2, [r3, #28]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ae8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	69da      	ldr	r2, [r3, #28]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006af8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	69d9      	ldr	r1, [r3, #28]
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	021a      	lsls	r2, r3, #8
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	430a      	orrs	r2, r1
 8006b0c:	61da      	str	r2, [r3, #28]
      break;
 8006b0e:	e002      	b.n	8006b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	75fb      	strb	r3, [r7, #23]
      break;
 8006b14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3718      	adds	r7, #24
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b32:	2300      	movs	r3, #0
 8006b34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d101      	bne.n	8006b44 <HAL_TIM_ConfigClockSource+0x1c>
 8006b40:	2302      	movs	r3, #2
 8006b42:	e0b4      	b.n	8006cae <HAL_TIM_ConfigClockSource+0x186>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2202      	movs	r2, #2
 8006b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006b62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68ba      	ldr	r2, [r7, #8]
 8006b72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b7c:	d03e      	beq.n	8006bfc <HAL_TIM_ConfigClockSource+0xd4>
 8006b7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b82:	f200 8087 	bhi.w	8006c94 <HAL_TIM_ConfigClockSource+0x16c>
 8006b86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b8a:	f000 8086 	beq.w	8006c9a <HAL_TIM_ConfigClockSource+0x172>
 8006b8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b92:	d87f      	bhi.n	8006c94 <HAL_TIM_ConfigClockSource+0x16c>
 8006b94:	2b70      	cmp	r3, #112	@ 0x70
 8006b96:	d01a      	beq.n	8006bce <HAL_TIM_ConfigClockSource+0xa6>
 8006b98:	2b70      	cmp	r3, #112	@ 0x70
 8006b9a:	d87b      	bhi.n	8006c94 <HAL_TIM_ConfigClockSource+0x16c>
 8006b9c:	2b60      	cmp	r3, #96	@ 0x60
 8006b9e:	d050      	beq.n	8006c42 <HAL_TIM_ConfigClockSource+0x11a>
 8006ba0:	2b60      	cmp	r3, #96	@ 0x60
 8006ba2:	d877      	bhi.n	8006c94 <HAL_TIM_ConfigClockSource+0x16c>
 8006ba4:	2b50      	cmp	r3, #80	@ 0x50
 8006ba6:	d03c      	beq.n	8006c22 <HAL_TIM_ConfigClockSource+0xfa>
 8006ba8:	2b50      	cmp	r3, #80	@ 0x50
 8006baa:	d873      	bhi.n	8006c94 <HAL_TIM_ConfigClockSource+0x16c>
 8006bac:	2b40      	cmp	r3, #64	@ 0x40
 8006bae:	d058      	beq.n	8006c62 <HAL_TIM_ConfigClockSource+0x13a>
 8006bb0:	2b40      	cmp	r3, #64	@ 0x40
 8006bb2:	d86f      	bhi.n	8006c94 <HAL_TIM_ConfigClockSource+0x16c>
 8006bb4:	2b30      	cmp	r3, #48	@ 0x30
 8006bb6:	d064      	beq.n	8006c82 <HAL_TIM_ConfigClockSource+0x15a>
 8006bb8:	2b30      	cmp	r3, #48	@ 0x30
 8006bba:	d86b      	bhi.n	8006c94 <HAL_TIM_ConfigClockSource+0x16c>
 8006bbc:	2b20      	cmp	r3, #32
 8006bbe:	d060      	beq.n	8006c82 <HAL_TIM_ConfigClockSource+0x15a>
 8006bc0:	2b20      	cmp	r3, #32
 8006bc2:	d867      	bhi.n	8006c94 <HAL_TIM_ConfigClockSource+0x16c>
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d05c      	beq.n	8006c82 <HAL_TIM_ConfigClockSource+0x15a>
 8006bc8:	2b10      	cmp	r3, #16
 8006bca:	d05a      	beq.n	8006c82 <HAL_TIM_ConfigClockSource+0x15a>
 8006bcc:	e062      	b.n	8006c94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006bde:	f000 fafc 	bl	80071da <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006bf0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68ba      	ldr	r2, [r7, #8]
 8006bf8:	609a      	str	r2, [r3, #8]
      break;
 8006bfa:	e04f      	b.n	8006c9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c0c:	f000 fae5 	bl	80071da <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	689a      	ldr	r2, [r3, #8]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006c1e:	609a      	str	r2, [r3, #8]
      break;
 8006c20:	e03c      	b.n	8006c9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c2e:	461a      	mov	r2, r3
 8006c30:	f000 fa5c 	bl	80070ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2150      	movs	r1, #80	@ 0x50
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f000 fab3 	bl	80071a6 <TIM_ITRx_SetConfig>
      break;
 8006c40:	e02c      	b.n	8006c9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c4e:	461a      	mov	r2, r3
 8006c50:	f000 fa7a 	bl	8007148 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2160      	movs	r1, #96	@ 0x60
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f000 faa3 	bl	80071a6 <TIM_ITRx_SetConfig>
      break;
 8006c60:	e01c      	b.n	8006c9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c6e:	461a      	mov	r2, r3
 8006c70:	f000 fa3c 	bl	80070ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2140      	movs	r1, #64	@ 0x40
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 fa93 	bl	80071a6 <TIM_ITRx_SetConfig>
      break;
 8006c80:	e00c      	b.n	8006c9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	4610      	mov	r0, r2
 8006c8e:	f000 fa8a 	bl	80071a6 <TIM_ITRx_SetConfig>
      break;
 8006c92:	e003      	b.n	8006c9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	73fb      	strb	r3, [r7, #15]
      break;
 8006c98:	e000      	b.n	8006c9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006c9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3710      	adds	r7, #16
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}

08006cb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cb6:	b480      	push	{r7}
 8006cb8:	b083      	sub	sp, #12
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cbe:	bf00      	nop
 8006cc0:	370c      	adds	r7, #12
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bc80      	pop	{r7}
 8006cc6:	4770      	bx	lr

08006cc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bc80      	pop	{r7}
 8006cd8:	4770      	bx	lr

08006cda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cda:	b480      	push	{r7}
 8006cdc:	b083      	sub	sp, #12
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ce2:	bf00      	nop
 8006ce4:	370c      	adds	r7, #12
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bc80      	pop	{r7}
 8006cea:	4770      	bx	lr

08006cec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bc80      	pop	{r7}
 8006cfc:	4770      	bx	lr
	...

08006d00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a2f      	ldr	r2, [pc, #188]	@ (8006dd0 <TIM_Base_SetConfig+0xd0>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d00b      	beq.n	8006d30 <TIM_Base_SetConfig+0x30>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d1e:	d007      	beq.n	8006d30 <TIM_Base_SetConfig+0x30>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a2c      	ldr	r2, [pc, #176]	@ (8006dd4 <TIM_Base_SetConfig+0xd4>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d003      	beq.n	8006d30 <TIM_Base_SetConfig+0x30>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4a2b      	ldr	r2, [pc, #172]	@ (8006dd8 <TIM_Base_SetConfig+0xd8>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d108      	bne.n	8006d42 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a22      	ldr	r2, [pc, #136]	@ (8006dd0 <TIM_Base_SetConfig+0xd0>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d00b      	beq.n	8006d62 <TIM_Base_SetConfig+0x62>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d50:	d007      	beq.n	8006d62 <TIM_Base_SetConfig+0x62>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a1f      	ldr	r2, [pc, #124]	@ (8006dd4 <TIM_Base_SetConfig+0xd4>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d003      	beq.n	8006d62 <TIM_Base_SetConfig+0x62>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a1e      	ldr	r2, [pc, #120]	@ (8006dd8 <TIM_Base_SetConfig+0xd8>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d108      	bne.n	8006d74 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	695b      	ldr	r3, [r3, #20]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	689a      	ldr	r2, [r3, #8]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4a0d      	ldr	r2, [pc, #52]	@ (8006dd0 <TIM_Base_SetConfig+0xd0>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d103      	bne.n	8006da8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	691a      	ldr	r2, [r3, #16]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	f003 0301 	and.w	r3, r3, #1
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d005      	beq.n	8006dc6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	f023 0201 	bic.w	r2, r3, #1
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	611a      	str	r2, [r3, #16]
  }
}
 8006dc6:	bf00      	nop
 8006dc8:	3714      	adds	r7, #20
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bc80      	pop	{r7}
 8006dce:	4770      	bx	lr
 8006dd0:	40012c00 	.word	0x40012c00
 8006dd4:	40000400 	.word	0x40000400
 8006dd8:	40000800 	.word	0x40000800

08006ddc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b087      	sub	sp, #28
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a1b      	ldr	r3, [r3, #32]
 8006df0:	f023 0201 	bic.w	r2, r3, #1
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f023 0303 	bic.w	r3, r3, #3
 8006e12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	f023 0302 	bic.w	r3, r3, #2
 8006e24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	697a      	ldr	r2, [r7, #20]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a1c      	ldr	r2, [pc, #112]	@ (8006ea4 <TIM_OC1_SetConfig+0xc8>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d10c      	bne.n	8006e52 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	f023 0308 	bic.w	r3, r3, #8
 8006e3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	697a      	ldr	r2, [r7, #20]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	f023 0304 	bic.w	r3, r3, #4
 8006e50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a13      	ldr	r2, [pc, #76]	@ (8006ea4 <TIM_OC1_SetConfig+0xc8>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d111      	bne.n	8006e7e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006e68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	695b      	ldr	r3, [r3, #20]
 8006e6e:	693a      	ldr	r2, [r7, #16]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	699b      	ldr	r3, [r3, #24]
 8006e78:	693a      	ldr	r2, [r7, #16]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	693a      	ldr	r2, [r7, #16]
 8006e82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	685a      	ldr	r2, [r3, #4]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	697a      	ldr	r2, [r7, #20]
 8006e96:	621a      	str	r2, [r3, #32]
}
 8006e98:	bf00      	nop
 8006e9a:	371c      	adds	r7, #28
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bc80      	pop	{r7}
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	40012c00 	.word	0x40012c00

08006ea8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b087      	sub	sp, #28
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a1b      	ldr	r3, [r3, #32]
 8006eb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a1b      	ldr	r3, [r3, #32]
 8006ebc:	f023 0210 	bic.w	r2, r3, #16
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	699b      	ldr	r3, [r3, #24]
 8006ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ede:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	021b      	lsls	r3, r3, #8
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	f023 0320 	bic.w	r3, r3, #32
 8006ef2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	011b      	lsls	r3, r3, #4
 8006efa:	697a      	ldr	r2, [r7, #20]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4a1d      	ldr	r2, [pc, #116]	@ (8006f78 <TIM_OC2_SetConfig+0xd0>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d10d      	bne.n	8006f24 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	011b      	lsls	r3, r3, #4
 8006f16:	697a      	ldr	r2, [r7, #20]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a14      	ldr	r2, [pc, #80]	@ (8006f78 <TIM_OC2_SetConfig+0xd0>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d113      	bne.n	8006f54 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006f32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	695b      	ldr	r3, [r3, #20]
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	693a      	ldr	r2, [r7, #16]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	699b      	ldr	r3, [r3, #24]
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	693a      	ldr	r2, [r7, #16]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	693a      	ldr	r2, [r7, #16]
 8006f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	68fa      	ldr	r2, [r7, #12]
 8006f5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	685a      	ldr	r2, [r3, #4]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	697a      	ldr	r2, [r7, #20]
 8006f6c:	621a      	str	r2, [r3, #32]
}
 8006f6e:	bf00      	nop
 8006f70:	371c      	adds	r7, #28
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bc80      	pop	{r7}
 8006f76:	4770      	bx	lr
 8006f78:	40012c00 	.word	0x40012c00

08006f7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b087      	sub	sp, #28
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a1b      	ldr	r3, [r3, #32]
 8006f90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	69db      	ldr	r3, [r3, #28]
 8006fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f023 0303 	bic.w	r3, r3, #3
 8006fb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006fc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	021b      	lsls	r3, r3, #8
 8006fcc:	697a      	ldr	r2, [r7, #20]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a1d      	ldr	r2, [pc, #116]	@ (800704c <TIM_OC3_SetConfig+0xd0>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d10d      	bne.n	8006ff6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006fe0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	021b      	lsls	r3, r3, #8
 8006fe8:	697a      	ldr	r2, [r7, #20]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006ff4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a14      	ldr	r2, [pc, #80]	@ (800704c <TIM_OC3_SetConfig+0xd0>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d113      	bne.n	8007026 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007004:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800700c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	011b      	lsls	r3, r3, #4
 8007014:	693a      	ldr	r2, [r7, #16]
 8007016:	4313      	orrs	r3, r2
 8007018:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	699b      	ldr	r3, [r3, #24]
 800701e:	011b      	lsls	r3, r3, #4
 8007020:	693a      	ldr	r2, [r7, #16]
 8007022:	4313      	orrs	r3, r2
 8007024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	685a      	ldr	r2, [r3, #4]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	697a      	ldr	r2, [r7, #20]
 800703e:	621a      	str	r2, [r3, #32]
}
 8007040:	bf00      	nop
 8007042:	371c      	adds	r7, #28
 8007044:	46bd      	mov	sp, r7
 8007046:	bc80      	pop	{r7}
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	40012c00 	.word	0x40012c00

08007050 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007050:	b480      	push	{r7}
 8007052:	b087      	sub	sp, #28
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a1b      	ldr	r3, [r3, #32]
 800705e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6a1b      	ldr	r3, [r3, #32]
 8007064:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	69db      	ldr	r3, [r3, #28]
 8007076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800707e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007086:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	021b      	lsls	r3, r3, #8
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	4313      	orrs	r3, r2
 8007092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800709a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	031b      	lsls	r3, r3, #12
 80070a2:	693a      	ldr	r2, [r7, #16]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	4a0f      	ldr	r2, [pc, #60]	@ (80070e8 <TIM_OC4_SetConfig+0x98>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d109      	bne.n	80070c4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80070b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	695b      	ldr	r3, [r3, #20]
 80070bc:	019b      	lsls	r3, r3, #6
 80070be:	697a      	ldr	r2, [r7, #20]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	697a      	ldr	r2, [r7, #20]
 80070c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	685a      	ldr	r2, [r3, #4]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	693a      	ldr	r2, [r7, #16]
 80070dc:	621a      	str	r2, [r3, #32]
}
 80070de:	bf00      	nop
 80070e0:	371c      	adds	r7, #28
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bc80      	pop	{r7}
 80070e6:	4770      	bx	lr
 80070e8:	40012c00 	.word	0x40012c00

080070ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b087      	sub	sp, #28
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6a1b      	ldr	r3, [r3, #32]
 80070fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6a1b      	ldr	r3, [r3, #32]
 8007102:	f023 0201 	bic.w	r2, r3, #1
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	699b      	ldr	r3, [r3, #24]
 800710e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007116:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	011b      	lsls	r3, r3, #4
 800711c:	693a      	ldr	r2, [r7, #16]
 800711e:	4313      	orrs	r3, r2
 8007120:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	f023 030a 	bic.w	r3, r3, #10
 8007128:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800712a:	697a      	ldr	r2, [r7, #20]
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	4313      	orrs	r3, r2
 8007130:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	693a      	ldr	r2, [r7, #16]
 8007136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	697a      	ldr	r2, [r7, #20]
 800713c:	621a      	str	r2, [r3, #32]
}
 800713e:	bf00      	nop
 8007140:	371c      	adds	r7, #28
 8007142:	46bd      	mov	sp, r7
 8007144:	bc80      	pop	{r7}
 8007146:	4770      	bx	lr

08007148 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007148:	b480      	push	{r7}
 800714a:	b087      	sub	sp, #28
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6a1b      	ldr	r3, [r3, #32]
 8007158:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6a1b      	ldr	r3, [r3, #32]
 800715e:	f023 0210 	bic.w	r2, r3, #16
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	699b      	ldr	r3, [r3, #24]
 800716a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007172:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	031b      	lsls	r3, r3, #12
 8007178:	693a      	ldr	r2, [r7, #16]
 800717a:	4313      	orrs	r3, r2
 800717c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007184:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	011b      	lsls	r3, r3, #4
 800718a:	697a      	ldr	r2, [r7, #20]
 800718c:	4313      	orrs	r3, r2
 800718e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	693a      	ldr	r2, [r7, #16]
 8007194:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	697a      	ldr	r2, [r7, #20]
 800719a:	621a      	str	r2, [r3, #32]
}
 800719c:	bf00      	nop
 800719e:	371c      	adds	r7, #28
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bc80      	pop	{r7}
 80071a4:	4770      	bx	lr

080071a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071a6:	b480      	push	{r7}
 80071a8:	b085      	sub	sp, #20
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
 80071ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071be:	683a      	ldr	r2, [r7, #0]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	f043 0307 	orr.w	r3, r3, #7
 80071c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	609a      	str	r2, [r3, #8]
}
 80071d0:	bf00      	nop
 80071d2:	3714      	adds	r7, #20
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bc80      	pop	{r7}
 80071d8:	4770      	bx	lr

080071da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071da:	b480      	push	{r7}
 80071dc:	b087      	sub	sp, #28
 80071de:	af00      	add	r7, sp, #0
 80071e0:	60f8      	str	r0, [r7, #12]
 80071e2:	60b9      	str	r1, [r7, #8]
 80071e4:	607a      	str	r2, [r7, #4]
 80071e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80071f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	021a      	lsls	r2, r3, #8
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	431a      	orrs	r2, r3
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	4313      	orrs	r3, r2
 8007202:	697a      	ldr	r2, [r7, #20]
 8007204:	4313      	orrs	r3, r2
 8007206:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	697a      	ldr	r2, [r7, #20]
 800720c:	609a      	str	r2, [r3, #8]
}
 800720e:	bf00      	nop
 8007210:	371c      	adds	r7, #28
 8007212:	46bd      	mov	sp, r7
 8007214:	bc80      	pop	{r7}
 8007216:	4770      	bx	lr

08007218 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007218:	b480      	push	{r7}
 800721a:	b087      	sub	sp, #28
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	f003 031f 	and.w	r3, r3, #31
 800722a:	2201      	movs	r2, #1
 800722c:	fa02 f303 	lsl.w	r3, r2, r3
 8007230:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6a1a      	ldr	r2, [r3, #32]
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	43db      	mvns	r3, r3
 800723a:	401a      	ands	r2, r3
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6a1a      	ldr	r2, [r3, #32]
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	f003 031f 	and.w	r3, r3, #31
 800724a:	6879      	ldr	r1, [r7, #4]
 800724c:	fa01 f303 	lsl.w	r3, r1, r3
 8007250:	431a      	orrs	r2, r3
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	621a      	str	r2, [r3, #32]
}
 8007256:	bf00      	nop
 8007258:	371c      	adds	r7, #28
 800725a:	46bd      	mov	sp, r7
 800725c:	bc80      	pop	{r7}
 800725e:	4770      	bx	lr

08007260 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007270:	2b01      	cmp	r3, #1
 8007272:	d101      	bne.n	8007278 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007274:	2302      	movs	r3, #2
 8007276:	e046      	b.n	8007306 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2202      	movs	r2, #2
 8007284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800729e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a16      	ldr	r2, [pc, #88]	@ (8007310 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d00e      	beq.n	80072da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072c4:	d009      	beq.n	80072da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a12      	ldr	r2, [pc, #72]	@ (8007314 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d004      	beq.n	80072da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a10      	ldr	r2, [pc, #64]	@ (8007318 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d10c      	bne.n	80072f4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	68ba      	ldr	r2, [r7, #8]
 80072e8:	4313      	orrs	r3, r2
 80072ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3714      	adds	r7, #20
 800730a:	46bd      	mov	sp, r7
 800730c:	bc80      	pop	{r7}
 800730e:	4770      	bx	lr
 8007310:	40012c00 	.word	0x40012c00
 8007314:	40000400 	.word	0x40000400
 8007318:	40000800 	.word	0x40000800

0800731c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007324:	bf00      	nop
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	bc80      	pop	{r7}
 800732c:	4770      	bx	lr

0800732e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800732e:	b480      	push	{r7}
 8007330:	b083      	sub	sp, #12
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007336:	bf00      	nop
 8007338:	370c      	adds	r7, #12
 800733a:	46bd      	mov	sp, r7
 800733c:	bc80      	pop	{r7}
 800733e:	4770      	bx	lr

08007340 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d101      	bne.n	8007352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e042      	b.n	80073d8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007358:	b2db      	uxtb	r3, r3
 800735a:	2b00      	cmp	r3, #0
 800735c:	d106      	bne.n	800736c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f7fc fcd2 	bl	8003d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2224      	movs	r2, #36	@ 0x24
 8007370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	68da      	ldr	r2, [r3, #12]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007382:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f001 f8a3 	bl	80084d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	691a      	ldr	r2, [r3, #16]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007398:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	695a      	ldr	r2, [r3, #20]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80073a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68da      	ldr	r2, [r3, #12]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80073b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2220      	movs	r2, #32
 80073c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2220      	movs	r2, #32
 80073cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3708      	adds	r7, #8
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b08a      	sub	sp, #40	@ 0x28
 80073e4:	af02      	add	r7, sp, #8
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	603b      	str	r3, [r7, #0]
 80073ec:	4613      	mov	r3, r2
 80073ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80073f0:	2300      	movs	r3, #0
 80073f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	2b20      	cmp	r3, #32
 80073fe:	d175      	bne.n	80074ec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d002      	beq.n	800740c <HAL_UART_Transmit+0x2c>
 8007406:	88fb      	ldrh	r3, [r7, #6]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d101      	bne.n	8007410 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	e06e      	b.n	80074ee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2200      	movs	r2, #0
 8007414:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2221      	movs	r2, #33	@ 0x21
 800741a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800741e:	f7fc fdf7 	bl	8004010 <HAL_GetTick>
 8007422:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	88fa      	ldrh	r2, [r7, #6]
 8007428:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	88fa      	ldrh	r2, [r7, #6]
 800742e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007438:	d108      	bne.n	800744c <HAL_UART_Transmit+0x6c>
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d104      	bne.n	800744c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007442:	2300      	movs	r3, #0
 8007444:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	61bb      	str	r3, [r7, #24]
 800744a:	e003      	b.n	8007454 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007450:	2300      	movs	r3, #0
 8007452:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007454:	e02e      	b.n	80074b4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	9300      	str	r3, [sp, #0]
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	2200      	movs	r2, #0
 800745e:	2180      	movs	r1, #128	@ 0x80
 8007460:	68f8      	ldr	r0, [r7, #12]
 8007462:	f000 fd80 	bl	8007f66 <UART_WaitOnFlagUntilTimeout>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d005      	beq.n	8007478 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2220      	movs	r2, #32
 8007470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007474:	2303      	movs	r3, #3
 8007476:	e03a      	b.n	80074ee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10b      	bne.n	8007496 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	881b      	ldrh	r3, [r3, #0]
 8007482:	461a      	mov	r2, r3
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800748c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	3302      	adds	r3, #2
 8007492:	61bb      	str	r3, [r7, #24]
 8007494:	e007      	b.n	80074a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	781a      	ldrb	r2, [r3, #0]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	3301      	adds	r3, #1
 80074a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	3b01      	subs	r3, #1
 80074ae:	b29a      	uxth	r2, r3
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1cb      	bne.n	8007456 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	9300      	str	r3, [sp, #0]
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	2200      	movs	r2, #0
 80074c6:	2140      	movs	r1, #64	@ 0x40
 80074c8:	68f8      	ldr	r0, [r7, #12]
 80074ca:	f000 fd4c 	bl	8007f66 <UART_WaitOnFlagUntilTimeout>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d005      	beq.n	80074e0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2220      	movs	r2, #32
 80074d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80074dc:	2303      	movs	r3, #3
 80074de:	e006      	b.n	80074ee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2220      	movs	r2, #32
 80074e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80074e8:	2300      	movs	r3, #0
 80074ea:	e000      	b.n	80074ee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80074ec:	2302      	movs	r3, #2
  }
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3720      	adds	r7, #32
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
	...

080074f8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b08c      	sub	sp, #48	@ 0x30
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	4613      	mov	r3, r2
 8007504:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800750c:	b2db      	uxtb	r3, r3
 800750e:	2b20      	cmp	r3, #32
 8007510:	d156      	bne.n	80075c0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d002      	beq.n	800751e <HAL_UART_Transmit_DMA+0x26>
 8007518:	88fb      	ldrh	r3, [r7, #6]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d101      	bne.n	8007522 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	e04f      	b.n	80075c2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8007522:	68ba      	ldr	r2, [r7, #8]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	88fa      	ldrh	r2, [r7, #6]
 800752c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	88fa      	ldrh	r2, [r7, #6]
 8007532:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2200      	movs	r2, #0
 8007538:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2221      	movs	r2, #33	@ 0x21
 800753e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007546:	4a21      	ldr	r2, [pc, #132]	@ (80075cc <HAL_UART_Transmit_DMA+0xd4>)
 8007548:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800754e:	4a20      	ldr	r2, [pc, #128]	@ (80075d0 <HAL_UART_Transmit_DMA+0xd8>)
 8007550:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007556:	4a1f      	ldr	r2, [pc, #124]	@ (80075d4 <HAL_UART_Transmit_DMA+0xdc>)
 8007558:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800755e:	2200      	movs	r2, #0
 8007560:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8007562:	f107 0308 	add.w	r3, r7, #8
 8007566:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800756c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800756e:	6819      	ldr	r1, [r3, #0]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	3304      	adds	r3, #4
 8007576:	461a      	mov	r2, r3
 8007578:	88fb      	ldrh	r3, [r7, #6]
 800757a:	f7fd fb77 	bl	8004c6c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007586:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	3314      	adds	r3, #20
 800758e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	e853 3f00 	ldrex	r3, [r3]
 8007596:	617b      	str	r3, [r7, #20]
   return(result);
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800759e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	3314      	adds	r3, #20
 80075a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80075a8:	627a      	str	r2, [r7, #36]	@ 0x24
 80075aa:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ac:	6a39      	ldr	r1, [r7, #32]
 80075ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075b0:	e841 2300 	strex	r3, r2, [r1]
 80075b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1e5      	bne.n	8007588 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80075bc:	2300      	movs	r3, #0
 80075be:	e000      	b.n	80075c2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80075c0:	2302      	movs	r3, #2
  }
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3730      	adds	r7, #48	@ 0x30
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	bf00      	nop
 80075cc:	08007cb5 	.word	0x08007cb5
 80075d0:	08007d4f 	.word	0x08007d4f
 80075d4:	08007ed3 	.word	0x08007ed3

080075d8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	4613      	mov	r3, r2
 80075e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b20      	cmp	r3, #32
 80075f0:	d112      	bne.n	8007618 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d002      	beq.n	80075fe <HAL_UART_Receive_DMA+0x26>
 80075f8:	88fb      	ldrh	r3, [r7, #6]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d101      	bne.n	8007602 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	e00b      	b.n	800761a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007608:	88fb      	ldrh	r3, [r7, #6]
 800760a:	461a      	mov	r2, r3
 800760c:	68b9      	ldr	r1, [r7, #8]
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	f000 fd02 	bl	8008018 <UART_Start_Receive_DMA>
 8007614:	4603      	mov	r3, r0
 8007616:	e000      	b.n	800761a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007618:	2302      	movs	r3, #2
  }
}
 800761a:	4618      	mov	r0, r3
 800761c:	3710      	adds	r7, #16
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b090      	sub	sp, #64	@ 0x40
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800762a:	2300      	movs	r3, #0
 800762c:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	695b      	ldr	r3, [r3, #20]
 8007634:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007638:	2b00      	cmp	r3, #0
 800763a:	bf14      	ite	ne
 800763c:	2301      	movne	r3, #1
 800763e:	2300      	moveq	r3, #0
 8007640:	b2db      	uxtb	r3, r3
 8007642:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800764a:	b2db      	uxtb	r3, r3
 800764c:	2b21      	cmp	r3, #33	@ 0x21
 800764e:	d128      	bne.n	80076a2 <HAL_UART_DMAStop+0x80>
 8007650:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007652:	2b00      	cmp	r3, #0
 8007654:	d025      	beq.n	80076a2 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	3314      	adds	r3, #20
 800765c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007660:	e853 3f00 	ldrex	r3, [r3]
 8007664:	623b      	str	r3, [r7, #32]
   return(result);
 8007666:	6a3b      	ldr	r3, [r7, #32]
 8007668:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800766c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	3314      	adds	r3, #20
 8007674:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007676:	633a      	str	r2, [r7, #48]	@ 0x30
 8007678:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800767c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800767e:	e841 2300 	strex	r3, r2, [r1]
 8007682:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1e5      	bne.n	8007656 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800768e:	2b00      	cmp	r3, #0
 8007690:	d004      	beq.n	800769c <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007696:	4618      	mov	r0, r3
 8007698:	f7fd fb48 	bl	8004d2c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 fd55 	bl	800814c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	695b      	ldr	r3, [r3, #20]
 80076a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	bf14      	ite	ne
 80076b0:	2301      	movne	r3, #1
 80076b2:	2300      	moveq	r3, #0
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	2b22      	cmp	r3, #34	@ 0x22
 80076c2:	d128      	bne.n	8007716 <HAL_UART_DMAStop+0xf4>
 80076c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d025      	beq.n	8007716 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	3314      	adds	r3, #20
 80076d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	e853 3f00 	ldrex	r3, [r3]
 80076d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	3314      	adds	r3, #20
 80076e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80076ea:	61fa      	str	r2, [r7, #28]
 80076ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ee:	69b9      	ldr	r1, [r7, #24]
 80076f0:	69fa      	ldr	r2, [r7, #28]
 80076f2:	e841 2300 	strex	r3, r2, [r1]
 80076f6:	617b      	str	r3, [r7, #20]
   return(result);
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1e5      	bne.n	80076ca <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007702:	2b00      	cmp	r3, #0
 8007704:	d004      	beq.n	8007710 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800770a:	4618      	mov	r0, r3
 800770c:	f7fd fb0e 	bl	8004d2c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 fd42 	bl	800819a <UART_EndRxTransfer>
  }

  return HAL_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	3740      	adds	r7, #64	@ 0x40
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b0ba      	sub	sp, #232	@ 0xe8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	695b      	ldr	r3, [r3, #20]
 8007742:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007746:	2300      	movs	r3, #0
 8007748:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800774c:	2300      	movs	r3, #0
 800774e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007756:	f003 030f 	and.w	r3, r3, #15
 800775a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800775e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007762:	2b00      	cmp	r3, #0
 8007764:	d10f      	bne.n	8007786 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800776a:	f003 0320 	and.w	r3, r3, #32
 800776e:	2b00      	cmp	r3, #0
 8007770:	d009      	beq.n	8007786 <HAL_UART_IRQHandler+0x66>
 8007772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007776:	f003 0320 	and.w	r3, r3, #32
 800777a:	2b00      	cmp	r3, #0
 800777c:	d003      	beq.n	8007786 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 fde8 	bl	8008354 <UART_Receive_IT>
      return;
 8007784:	e25b      	b.n	8007c3e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007786:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800778a:	2b00      	cmp	r3, #0
 800778c:	f000 80de 	beq.w	800794c <HAL_UART_IRQHandler+0x22c>
 8007790:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007794:	f003 0301 	and.w	r3, r3, #1
 8007798:	2b00      	cmp	r3, #0
 800779a:	d106      	bne.n	80077aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800779c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077a0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f000 80d1 	beq.w	800794c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80077aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077ae:	f003 0301 	and.w	r3, r3, #1
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00b      	beq.n	80077ce <HAL_UART_IRQHandler+0xae>
 80077b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d005      	beq.n	80077ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077c6:	f043 0201 	orr.w	r2, r3, #1
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80077ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077d2:	f003 0304 	and.w	r3, r3, #4
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d00b      	beq.n	80077f2 <HAL_UART_IRQHandler+0xd2>
 80077da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077de:	f003 0301 	and.w	r3, r3, #1
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d005      	beq.n	80077f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077ea:	f043 0202 	orr.w	r2, r3, #2
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80077f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077f6:	f003 0302 	and.w	r3, r3, #2
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00b      	beq.n	8007816 <HAL_UART_IRQHandler+0xf6>
 80077fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007802:	f003 0301 	and.w	r3, r3, #1
 8007806:	2b00      	cmp	r3, #0
 8007808:	d005      	beq.n	8007816 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800780e:	f043 0204 	orr.w	r2, r3, #4
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800781a:	f003 0308 	and.w	r3, r3, #8
 800781e:	2b00      	cmp	r3, #0
 8007820:	d011      	beq.n	8007846 <HAL_UART_IRQHandler+0x126>
 8007822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007826:	f003 0320 	and.w	r3, r3, #32
 800782a:	2b00      	cmp	r3, #0
 800782c:	d105      	bne.n	800783a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800782e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007832:	f003 0301 	and.w	r3, r3, #1
 8007836:	2b00      	cmp	r3, #0
 8007838:	d005      	beq.n	8007846 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800783e:	f043 0208 	orr.w	r2, r3, #8
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800784a:	2b00      	cmp	r3, #0
 800784c:	f000 81f2 	beq.w	8007c34 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007854:	f003 0320 	and.w	r3, r3, #32
 8007858:	2b00      	cmp	r3, #0
 800785a:	d008      	beq.n	800786e <HAL_UART_IRQHandler+0x14e>
 800785c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007860:	f003 0320 	and.w	r3, r3, #32
 8007864:	2b00      	cmp	r3, #0
 8007866:	d002      	beq.n	800786e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 fd73 	bl	8008354 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	695b      	ldr	r3, [r3, #20]
 8007874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007878:	2b00      	cmp	r3, #0
 800787a:	bf14      	ite	ne
 800787c:	2301      	movne	r3, #1
 800787e:	2300      	moveq	r3, #0
 8007880:	b2db      	uxtb	r3, r3
 8007882:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800788a:	f003 0308 	and.w	r3, r3, #8
 800788e:	2b00      	cmp	r3, #0
 8007890:	d103      	bne.n	800789a <HAL_UART_IRQHandler+0x17a>
 8007892:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007896:	2b00      	cmp	r3, #0
 8007898:	d04f      	beq.n	800793a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fc7d 	bl	800819a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	695b      	ldr	r3, [r3, #20]
 80078a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d041      	beq.n	8007932 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	3314      	adds	r3, #20
 80078b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80078bc:	e853 3f00 	ldrex	r3, [r3]
 80078c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80078c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80078c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	3314      	adds	r3, #20
 80078d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80078da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80078de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80078e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80078ea:	e841 2300 	strex	r3, r2, [r1]
 80078ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80078f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d1d9      	bne.n	80078ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d013      	beq.n	800792a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007906:	4a7e      	ldr	r2, [pc, #504]	@ (8007b00 <HAL_UART_IRQHandler+0x3e0>)
 8007908:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800790e:	4618      	mov	r0, r3
 8007910:	f7fd fa48 	bl	8004da4 <HAL_DMA_Abort_IT>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d016      	beq.n	8007948 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800791e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007924:	4610      	mov	r0, r2
 8007926:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007928:	e00e      	b.n	8007948 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 f9ae 	bl	8007c8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007930:	e00a      	b.n	8007948 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f9aa 	bl	8007c8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007938:	e006      	b.n	8007948 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 f9a6 	bl	8007c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007946:	e175      	b.n	8007c34 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007948:	bf00      	nop
    return;
 800794a:	e173      	b.n	8007c34 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007950:	2b01      	cmp	r3, #1
 8007952:	f040 814f 	bne.w	8007bf4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800795a:	f003 0310 	and.w	r3, r3, #16
 800795e:	2b00      	cmp	r3, #0
 8007960:	f000 8148 	beq.w	8007bf4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007968:	f003 0310 	and.w	r3, r3, #16
 800796c:	2b00      	cmp	r3, #0
 800796e:	f000 8141 	beq.w	8007bf4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007972:	2300      	movs	r3, #0
 8007974:	60bb      	str	r3, [r7, #8]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	60bb      	str	r3, [r7, #8]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	60bb      	str	r3, [r7, #8]
 8007986:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	695b      	ldr	r3, [r3, #20]
 800798e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007992:	2b00      	cmp	r3, #0
 8007994:	f000 80b6 	beq.w	8007b04 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80079a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f000 8145 	beq.w	8007c38 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80079b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80079b6:	429a      	cmp	r2, r3
 80079b8:	f080 813e 	bcs.w	8007c38 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80079c2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079c8:	699b      	ldr	r3, [r3, #24]
 80079ca:	2b20      	cmp	r3, #32
 80079cc:	f000 8088 	beq.w	8007ae0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	330c      	adds	r3, #12
 80079d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079da:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80079de:	e853 3f00 	ldrex	r3, [r3]
 80079e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80079e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80079ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079ee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	330c      	adds	r3, #12
 80079f8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80079fc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007a00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a04:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007a08:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007a0c:	e841 2300 	strex	r3, r2, [r1]
 8007a10:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007a14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d1d9      	bne.n	80079d0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	3314      	adds	r3, #20
 8007a22:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a26:	e853 3f00 	ldrex	r3, [r3]
 8007a2a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007a2c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a2e:	f023 0301 	bic.w	r3, r3, #1
 8007a32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	3314      	adds	r3, #20
 8007a3c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007a40:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007a44:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a46:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007a48:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007a4c:	e841 2300 	strex	r3, r2, [r1]
 8007a50:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007a52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d1e1      	bne.n	8007a1c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	3314      	adds	r3, #20
 8007a5e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a62:	e853 3f00 	ldrex	r3, [r3]
 8007a66:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007a68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	3314      	adds	r3, #20
 8007a78:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007a7c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007a7e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a80:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007a82:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007a84:	e841 2300 	strex	r3, r2, [r1]
 8007a88:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007a8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d1e3      	bne.n	8007a58 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2220      	movs	r2, #32
 8007a94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	330c      	adds	r3, #12
 8007aa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007aa8:	e853 3f00 	ldrex	r3, [r3]
 8007aac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007aae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ab0:	f023 0310 	bic.w	r3, r3, #16
 8007ab4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	330c      	adds	r3, #12
 8007abe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007ac2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007ac4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007ac8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007aca:	e841 2300 	strex	r3, r2, [r1]
 8007ace:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007ad0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d1e3      	bne.n	8007a9e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7fd f926 	bl	8004d2c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2202      	movs	r2, #2
 8007ae4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	4619      	mov	r1, r3
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f8d1 	bl	8007c9e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007afc:	e09c      	b.n	8007c38 <HAL_UART_IRQHandler+0x518>
 8007afe:	bf00      	nop
 8007b00:	0800825f 	.word	0x0800825f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	1ad3      	subs	r3, r2, r3
 8007b10:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	f000 808e 	beq.w	8007c3c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007b20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	f000 8089 	beq.w	8007c3c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	330c      	adds	r3, #12
 8007b30:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b34:	e853 3f00 	ldrex	r3, [r3]
 8007b38:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b40:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	330c      	adds	r3, #12
 8007b4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007b4e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007b50:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b52:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b56:	e841 2300 	strex	r3, r2, [r1]
 8007b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d1e3      	bne.n	8007b2a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	3314      	adds	r3, #20
 8007b68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6c:	e853 3f00 	ldrex	r3, [r3]
 8007b70:	623b      	str	r3, [r7, #32]
   return(result);
 8007b72:	6a3b      	ldr	r3, [r7, #32]
 8007b74:	f023 0301 	bic.w	r3, r3, #1
 8007b78:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	3314      	adds	r3, #20
 8007b82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007b86:	633a      	str	r2, [r7, #48]	@ 0x30
 8007b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b8e:	e841 2300 	strex	r3, r2, [r1]
 8007b92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1e3      	bne.n	8007b62 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2220      	movs	r2, #32
 8007b9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	330c      	adds	r3, #12
 8007bae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	e853 3f00 	ldrex	r3, [r3]
 8007bb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f023 0310 	bic.w	r3, r3, #16
 8007bbe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	330c      	adds	r3, #12
 8007bc8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007bcc:	61fa      	str	r2, [r7, #28]
 8007bce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd0:	69b9      	ldr	r1, [r7, #24]
 8007bd2:	69fa      	ldr	r2, [r7, #28]
 8007bd4:	e841 2300 	strex	r3, r2, [r1]
 8007bd8:	617b      	str	r3, [r7, #20]
   return(result);
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d1e3      	bne.n	8007ba8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2202      	movs	r2, #2
 8007be4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007be6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007bea:	4619      	mov	r1, r3
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 f856 	bl	8007c9e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007bf2:	e023      	b.n	8007c3c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d009      	beq.n	8007c14 <HAL_UART_IRQHandler+0x4f4>
 8007c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d003      	beq.n	8007c14 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 fb3a 	bl	8008286 <UART_Transmit_IT>
    return;
 8007c12:	e014      	b.n	8007c3e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00e      	beq.n	8007c3e <HAL_UART_IRQHandler+0x51e>
 8007c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d008      	beq.n	8007c3e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 fb79 	bl	8008324 <UART_EndTransmit_IT>
    return;
 8007c32:	e004      	b.n	8007c3e <HAL_UART_IRQHandler+0x51e>
    return;
 8007c34:	bf00      	nop
 8007c36:	e002      	b.n	8007c3e <HAL_UART_IRQHandler+0x51e>
      return;
 8007c38:	bf00      	nop
 8007c3a:	e000      	b.n	8007c3e <HAL_UART_IRQHandler+0x51e>
      return;
 8007c3c:	bf00      	nop
  }
}
 8007c3e:	37e8      	adds	r7, #232	@ 0xe8
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007c4c:	bf00      	nop
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bc80      	pop	{r7}
 8007c54:	4770      	bx	lr

08007c56 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007c56:	b480      	push	{r7}
 8007c58:	b083      	sub	sp, #12
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007c5e:	bf00      	nop
 8007c60:	370c      	adds	r7, #12
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bc80      	pop	{r7}
 8007c66:	4770      	bx	lr

08007c68 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007c70:	bf00      	nop
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bc80      	pop	{r7}
 8007c78:	4770      	bx	lr

08007c7a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007c7a:	b480      	push	{r7}
 8007c7c:	b083      	sub	sp, #12
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007c82:	bf00      	nop
 8007c84:	370c      	adds	r7, #12
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bc80      	pop	{r7}
 8007c8a:	4770      	bx	lr

08007c8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bc80      	pop	{r7}
 8007c9c:	4770      	bx	lr

08007c9e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007c9e:	b480      	push	{r7}
 8007ca0:	b083      	sub	sp, #12
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007caa:	bf00      	nop
 8007cac:	370c      	adds	r7, #12
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bc80      	pop	{r7}
 8007cb2:	4770      	bx	lr

08007cb4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b090      	sub	sp, #64	@ 0x40
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 0320 	and.w	r3, r3, #32
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d137      	bne.n	8007d40 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007cd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007cd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	3314      	adds	r3, #20
 8007cdc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce0:	e853 3f00 	ldrex	r3, [r3]
 8007ce4:	623b      	str	r3, [r7, #32]
   return(result);
 8007ce6:	6a3b      	ldr	r3, [r7, #32]
 8007ce8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cec:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007cee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	3314      	adds	r3, #20
 8007cf4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007cf6:	633a      	str	r2, [r7, #48]	@ 0x30
 8007cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007cfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cfe:	e841 2300 	strex	r3, r2, [r1]
 8007d02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d1e5      	bne.n	8007cd6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	330c      	adds	r3, #12
 8007d10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	e853 3f00 	ldrex	r3, [r3]
 8007d18:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d20:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	330c      	adds	r3, #12
 8007d28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d2a:	61fa      	str	r2, [r7, #28]
 8007d2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2e:	69b9      	ldr	r1, [r7, #24]
 8007d30:	69fa      	ldr	r2, [r7, #28]
 8007d32:	e841 2300 	strex	r3, r2, [r1]
 8007d36:	617b      	str	r3, [r7, #20]
   return(result);
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d1e5      	bne.n	8007d0a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d3e:	e002      	b.n	8007d46 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007d40:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007d42:	f7ff ff7f 	bl	8007c44 <HAL_UART_TxCpltCallback>
}
 8007d46:	bf00      	nop
 8007d48:	3740      	adds	r7, #64	@ 0x40
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b084      	sub	sp, #16
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d5a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f7ff ff7a 	bl	8007c56 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d62:	bf00      	nop
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b09c      	sub	sp, #112	@ 0x70
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d76:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f003 0320 	and.w	r3, r3, #32
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d172      	bne.n	8007e6c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007d86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d88:	2200      	movs	r2, #0
 8007d8a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	330c      	adds	r3, #12
 8007d92:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d96:	e853 3f00 	ldrex	r3, [r3]
 8007d9a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007d9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d9e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007da2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007da4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	330c      	adds	r3, #12
 8007daa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007dac:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007dae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007db2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007db4:	e841 2300 	strex	r3, r2, [r1]
 8007db8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007dba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d1e5      	bne.n	8007d8c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	3314      	adds	r3, #20
 8007dc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dca:	e853 3f00 	ldrex	r3, [r3]
 8007dce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dd2:	f023 0301 	bic.w	r3, r3, #1
 8007dd6:	667b      	str	r3, [r7, #100]	@ 0x64
 8007dd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	3314      	adds	r3, #20
 8007dde:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007de0:	647a      	str	r2, [r7, #68]	@ 0x44
 8007de2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007de6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007de8:	e841 2300 	strex	r3, r2, [r1]
 8007dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007dee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d1e5      	bne.n	8007dc0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007df4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	3314      	adds	r3, #20
 8007dfa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dfe:	e853 3f00 	ldrex	r3, [r3]
 8007e02:	623b      	str	r3, [r7, #32]
   return(result);
 8007e04:	6a3b      	ldr	r3, [r7, #32]
 8007e06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e0a:	663b      	str	r3, [r7, #96]	@ 0x60
 8007e0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	3314      	adds	r3, #20
 8007e12:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007e14:	633a      	str	r2, [r7, #48]	@ 0x30
 8007e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e18:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e1c:	e841 2300 	strex	r3, r2, [r1]
 8007e20:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d1e5      	bne.n	8007df4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007e28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e2a:	2220      	movs	r2, #32
 8007e2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d119      	bne.n	8007e6c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	330c      	adds	r3, #12
 8007e3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	e853 3f00 	ldrex	r3, [r3]
 8007e46:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f023 0310 	bic.w	r3, r3, #16
 8007e4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	330c      	adds	r3, #12
 8007e56:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007e58:	61fa      	str	r2, [r7, #28]
 8007e5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5c:	69b9      	ldr	r1, [r7, #24]
 8007e5e:	69fa      	ldr	r2, [r7, #28]
 8007e60:	e841 2300 	strex	r3, r2, [r1]
 8007e64:	617b      	str	r3, [r7, #20]
   return(result);
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d1e5      	bne.n	8007e38 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e6e:	2200      	movs	r2, #0
 8007e70:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d106      	bne.n	8007e88 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e7c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007e7e:	4619      	mov	r1, r3
 8007e80:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007e82:	f7ff ff0c 	bl	8007c9e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007e86:	e002      	b.n	8007e8e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007e88:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007e8a:	f7ff feed 	bl	8007c68 <HAL_UART_RxCpltCallback>
}
 8007e8e:	bf00      	nop
 8007e90:	3770      	adds	r7, #112	@ 0x70
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007e96:	b580      	push	{r7, lr}
 8007e98:	b084      	sub	sp, #16
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ea2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d108      	bne.n	8007ec4 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007eb6:	085b      	lsrs	r3, r3, #1
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	4619      	mov	r1, r3
 8007ebc:	68f8      	ldr	r0, [r7, #12]
 8007ebe:	f7ff feee 	bl	8007c9e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007ec2:	e002      	b.n	8007eca <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f7ff fed8 	bl	8007c7a <HAL_UART_RxHalfCpltCallback>
}
 8007eca:	bf00      	nop
 8007ecc:	3710      	adds	r7, #16
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007ed2:	b580      	push	{r7, lr}
 8007ed4:	b084      	sub	sp, #16
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007eda:	2300      	movs	r3, #0
 8007edc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ee2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	695b      	ldr	r3, [r3, #20]
 8007eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	bf14      	ite	ne
 8007ef2:	2301      	movne	r3, #1
 8007ef4:	2300      	moveq	r3, #0
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	2b21      	cmp	r3, #33	@ 0x21
 8007f04:	d108      	bne.n	8007f18 <UART_DMAError+0x46>
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d005      	beq.n	8007f18 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8007f12:	68b8      	ldr	r0, [r7, #8]
 8007f14:	f000 f91a 	bl	800814c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	695b      	ldr	r3, [r3, #20]
 8007f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	bf14      	ite	ne
 8007f26:	2301      	movne	r3, #1
 8007f28:	2300      	moveq	r3, #0
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	2b22      	cmp	r3, #34	@ 0x22
 8007f38:	d108      	bne.n	8007f4c <UART_DMAError+0x7a>
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d005      	beq.n	8007f4c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	2200      	movs	r2, #0
 8007f44:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007f46:	68b8      	ldr	r0, [r7, #8]
 8007f48:	f000 f927 	bl	800819a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f50:	f043 0210 	orr.w	r2, r3, #16
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f58:	68b8      	ldr	r0, [r7, #8]
 8007f5a:	f7ff fe97 	bl	8007c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f5e:	bf00      	nop
 8007f60:	3710      	adds	r7, #16
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b086      	sub	sp, #24
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	60f8      	str	r0, [r7, #12]
 8007f6e:	60b9      	str	r1, [r7, #8]
 8007f70:	603b      	str	r3, [r7, #0]
 8007f72:	4613      	mov	r3, r2
 8007f74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f76:	e03b      	b.n	8007ff0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f78:	6a3b      	ldr	r3, [r7, #32]
 8007f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f7e:	d037      	beq.n	8007ff0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f80:	f7fc f846 	bl	8004010 <HAL_GetTick>
 8007f84:	4602      	mov	r2, r0
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	1ad3      	subs	r3, r2, r3
 8007f8a:	6a3a      	ldr	r2, [r7, #32]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d302      	bcc.n	8007f96 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f90:	6a3b      	ldr	r3, [r7, #32]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d101      	bne.n	8007f9a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007f96:	2303      	movs	r3, #3
 8007f98:	e03a      	b.n	8008010 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	f003 0304 	and.w	r3, r3, #4
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d023      	beq.n	8007ff0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	2b80      	cmp	r3, #128	@ 0x80
 8007fac:	d020      	beq.n	8007ff0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	2b40      	cmp	r3, #64	@ 0x40
 8007fb2:	d01d      	beq.n	8007ff0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f003 0308 	and.w	r3, r3, #8
 8007fbe:	2b08      	cmp	r3, #8
 8007fc0:	d116      	bne.n	8007ff0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	617b      	str	r3, [r7, #20]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	617b      	str	r3, [r7, #20]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	617b      	str	r3, [r7, #20]
 8007fd6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f000 f8de 	bl	800819a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2208      	movs	r2, #8
 8007fe2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	e00f      	b.n	8008010 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	4013      	ands	r3, r2
 8007ffa:	68ba      	ldr	r2, [r7, #8]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	bf0c      	ite	eq
 8008000:	2301      	moveq	r3, #1
 8008002:	2300      	movne	r3, #0
 8008004:	b2db      	uxtb	r3, r3
 8008006:	461a      	mov	r2, r3
 8008008:	79fb      	ldrb	r3, [r7, #7]
 800800a:	429a      	cmp	r2, r3
 800800c:	d0b4      	beq.n	8007f78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800800e:	2300      	movs	r3, #0
}
 8008010:	4618      	mov	r0, r3
 8008012:	3718      	adds	r7, #24
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b098      	sub	sp, #96	@ 0x60
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	4613      	mov	r3, r2
 8008024:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008026:	68ba      	ldr	r2, [r7, #8]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	88fa      	ldrh	r2, [r7, #6]
 8008030:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2200      	movs	r2, #0
 8008036:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2222      	movs	r2, #34	@ 0x22
 800803c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008044:	4a3e      	ldr	r2, [pc, #248]	@ (8008140 <UART_Start_Receive_DMA+0x128>)
 8008046:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800804c:	4a3d      	ldr	r2, [pc, #244]	@ (8008144 <UART_Start_Receive_DMA+0x12c>)
 800804e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008054:	4a3c      	ldr	r2, [pc, #240]	@ (8008148 <UART_Start_Receive_DMA+0x130>)
 8008056:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800805c:	2200      	movs	r2, #0
 800805e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008060:	f107 0308 	add.w	r3, r7, #8
 8008064:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	3304      	adds	r3, #4
 8008070:	4619      	mov	r1, r3
 8008072:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	88fb      	ldrh	r3, [r7, #6]
 8008078:	f7fc fdf8 	bl	8004c6c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800807c:	2300      	movs	r3, #0
 800807e:	613b      	str	r3, [r7, #16]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	613b      	str	r3, [r7, #16]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	613b      	str	r3, [r7, #16]
 8008090:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	691b      	ldr	r3, [r3, #16]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d019      	beq.n	80080ce <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	330c      	adds	r3, #12
 80080a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080a4:	e853 3f00 	ldrex	r3, [r3]
 80080a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80080aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80080b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	330c      	adds	r3, #12
 80080b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80080ba:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80080bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080be:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80080c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80080c2:	e841 2300 	strex	r3, r2, [r1]
 80080c6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80080c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d1e5      	bne.n	800809a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	3314      	adds	r3, #20
 80080d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080d8:	e853 3f00 	ldrex	r3, [r3]
 80080dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80080de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080e0:	f043 0301 	orr.w	r3, r3, #1
 80080e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	3314      	adds	r3, #20
 80080ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80080ee:	63ba      	str	r2, [r7, #56]	@ 0x38
 80080f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80080f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80080f6:	e841 2300 	strex	r3, r2, [r1]
 80080fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80080fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d1e5      	bne.n	80080ce <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	3314      	adds	r3, #20
 8008108:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810a:	69bb      	ldr	r3, [r7, #24]
 800810c:	e853 3f00 	ldrex	r3, [r3]
 8008110:	617b      	str	r3, [r7, #20]
   return(result);
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008118:	653b      	str	r3, [r7, #80]	@ 0x50
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	3314      	adds	r3, #20
 8008120:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008122:	627a      	str	r2, [r7, #36]	@ 0x24
 8008124:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008126:	6a39      	ldr	r1, [r7, #32]
 8008128:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800812a:	e841 2300 	strex	r3, r2, [r1]
 800812e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d1e5      	bne.n	8008102 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8008136:	2300      	movs	r3, #0
}
 8008138:	4618      	mov	r0, r3
 800813a:	3760      	adds	r7, #96	@ 0x60
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}
 8008140:	08007d6b 	.word	0x08007d6b
 8008144:	08007e97 	.word	0x08007e97
 8008148:	08007ed3 	.word	0x08007ed3

0800814c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800814c:	b480      	push	{r7}
 800814e:	b089      	sub	sp, #36	@ 0x24
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	330c      	adds	r3, #12
 800815a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	e853 3f00 	ldrex	r3, [r3]
 8008162:	60bb      	str	r3, [r7, #8]
   return(result);
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800816a:	61fb      	str	r3, [r7, #28]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	330c      	adds	r3, #12
 8008172:	69fa      	ldr	r2, [r7, #28]
 8008174:	61ba      	str	r2, [r7, #24]
 8008176:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008178:	6979      	ldr	r1, [r7, #20]
 800817a:	69ba      	ldr	r2, [r7, #24]
 800817c:	e841 2300 	strex	r3, r2, [r1]
 8008180:	613b      	str	r3, [r7, #16]
   return(result);
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d1e5      	bne.n	8008154 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2220      	movs	r2, #32
 800818c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8008190:	bf00      	nop
 8008192:	3724      	adds	r7, #36	@ 0x24
 8008194:	46bd      	mov	sp, r7
 8008196:	bc80      	pop	{r7}
 8008198:	4770      	bx	lr

0800819a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800819a:	b480      	push	{r7}
 800819c:	b095      	sub	sp, #84	@ 0x54
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	330c      	adds	r3, #12
 80081a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081ac:	e853 3f00 	ldrex	r3, [r3]
 80081b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80081b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80081b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	330c      	adds	r3, #12
 80081c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80081c2:	643a      	str	r2, [r7, #64]	@ 0x40
 80081c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80081c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80081ca:	e841 2300 	strex	r3, r2, [r1]
 80081ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80081d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d1e5      	bne.n	80081a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	3314      	adds	r3, #20
 80081dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081de:	6a3b      	ldr	r3, [r7, #32]
 80081e0:	e853 3f00 	ldrex	r3, [r3]
 80081e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80081e6:	69fb      	ldr	r3, [r7, #28]
 80081e8:	f023 0301 	bic.w	r3, r3, #1
 80081ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	3314      	adds	r3, #20
 80081f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80081f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80081fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081fe:	e841 2300 	strex	r3, r2, [r1]
 8008202:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008206:	2b00      	cmp	r3, #0
 8008208:	d1e5      	bne.n	80081d6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800820e:	2b01      	cmp	r3, #1
 8008210:	d119      	bne.n	8008246 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	330c      	adds	r3, #12
 8008218:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	e853 3f00 	ldrex	r3, [r3]
 8008220:	60bb      	str	r3, [r7, #8]
   return(result);
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	f023 0310 	bic.w	r3, r3, #16
 8008228:	647b      	str	r3, [r7, #68]	@ 0x44
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	330c      	adds	r3, #12
 8008230:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008232:	61ba      	str	r2, [r7, #24]
 8008234:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008236:	6979      	ldr	r1, [r7, #20]
 8008238:	69ba      	ldr	r2, [r7, #24]
 800823a:	e841 2300 	strex	r3, r2, [r1]
 800823e:	613b      	str	r3, [r7, #16]
   return(result);
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d1e5      	bne.n	8008212 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2220      	movs	r2, #32
 800824a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008254:	bf00      	nop
 8008256:	3754      	adds	r7, #84	@ 0x54
 8008258:	46bd      	mov	sp, r7
 800825a:	bc80      	pop	{r7}
 800825c:	4770      	bx	lr

0800825e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b084      	sub	sp, #16
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800826a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2200      	movs	r2, #0
 8008270:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008278:	68f8      	ldr	r0, [r7, #12]
 800827a:	f7ff fd07 	bl	8007c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800827e:	bf00      	nop
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}

08008286 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008286:	b480      	push	{r7}
 8008288:	b085      	sub	sp, #20
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008294:	b2db      	uxtb	r3, r3
 8008296:	2b21      	cmp	r3, #33	@ 0x21
 8008298:	d13e      	bne.n	8008318 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082a2:	d114      	bne.n	80082ce <UART_Transmit_IT+0x48>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d110      	bne.n	80082ce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6a1b      	ldr	r3, [r3, #32]
 80082b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	881b      	ldrh	r3, [r3, #0]
 80082b6:	461a      	mov	r2, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a1b      	ldr	r3, [r3, #32]
 80082c6:	1c9a      	adds	r2, r3, #2
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	621a      	str	r2, [r3, #32]
 80082cc:	e008      	b.n	80082e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a1b      	ldr	r3, [r3, #32]
 80082d2:	1c59      	adds	r1, r3, #1
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	6211      	str	r1, [r2, #32]
 80082d8:	781a      	ldrb	r2, [r3, #0]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	3b01      	subs	r3, #1
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	4619      	mov	r1, r3
 80082ee:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d10f      	bne.n	8008314 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	68da      	ldr	r2, [r3, #12]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008302:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	68da      	ldr	r2, [r3, #12]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008312:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008314:	2300      	movs	r3, #0
 8008316:	e000      	b.n	800831a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008318:	2302      	movs	r3, #2
  }
}
 800831a:	4618      	mov	r0, r3
 800831c:	3714      	adds	r7, #20
 800831e:	46bd      	mov	sp, r7
 8008320:	bc80      	pop	{r7}
 8008322:	4770      	bx	lr

08008324 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	68da      	ldr	r2, [r3, #12]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800833a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2220      	movs	r2, #32
 8008340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f7ff fc7d 	bl	8007c44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800834a:	2300      	movs	r3, #0
}
 800834c:	4618      	mov	r0, r3
 800834e:	3708      	adds	r7, #8
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b08c      	sub	sp, #48	@ 0x30
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008362:	b2db      	uxtb	r3, r3
 8008364:	2b22      	cmp	r3, #34	@ 0x22
 8008366:	f040 80ae 	bne.w	80084c6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008372:	d117      	bne.n	80083a4 <UART_Receive_IT+0x50>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	691b      	ldr	r3, [r3, #16]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d113      	bne.n	80083a4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800837c:	2300      	movs	r3, #0
 800837e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008384:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	b29b      	uxth	r3, r3
 800838e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008392:	b29a      	uxth	r2, r3
 8008394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008396:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800839c:	1c9a      	adds	r2, r3, #2
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80083a2:	e026      	b.n	80083f2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80083aa:	2300      	movs	r3, #0
 80083ac:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083b6:	d007      	beq.n	80083c8 <UART_Receive_IT+0x74>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d10a      	bne.n	80083d6 <UART_Receive_IT+0x82>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	691b      	ldr	r3, [r3, #16]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d106      	bne.n	80083d6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	b2da      	uxtb	r2, r3
 80083d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083d2:	701a      	strb	r2, [r3, #0]
 80083d4:	e008      	b.n	80083e8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083e2:	b2da      	uxtb	r2, r3
 80083e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083e6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ec:	1c5a      	adds	r2, r3, #1
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	3b01      	subs	r3, #1
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	4619      	mov	r1, r3
 8008400:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008402:	2b00      	cmp	r3, #0
 8008404:	d15d      	bne.n	80084c2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	68da      	ldr	r2, [r3, #12]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f022 0220 	bic.w	r2, r2, #32
 8008414:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	68da      	ldr	r2, [r3, #12]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008424:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	695a      	ldr	r2, [r3, #20]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f022 0201 	bic.w	r2, r2, #1
 8008434:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2220      	movs	r2, #32
 800843a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008448:	2b01      	cmp	r3, #1
 800844a:	d135      	bne.n	80084b8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	330c      	adds	r3, #12
 8008458:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	e853 3f00 	ldrex	r3, [r3]
 8008460:	613b      	str	r3, [r7, #16]
   return(result);
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	f023 0310 	bic.w	r3, r3, #16
 8008468:	627b      	str	r3, [r7, #36]	@ 0x24
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	330c      	adds	r3, #12
 8008470:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008472:	623a      	str	r2, [r7, #32]
 8008474:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008476:	69f9      	ldr	r1, [r7, #28]
 8008478:	6a3a      	ldr	r2, [r7, #32]
 800847a:	e841 2300 	strex	r3, r2, [r1]
 800847e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d1e5      	bne.n	8008452 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f003 0310 	and.w	r3, r3, #16
 8008490:	2b10      	cmp	r3, #16
 8008492:	d10a      	bne.n	80084aa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008494:	2300      	movs	r3, #0
 8008496:	60fb      	str	r3, [r7, #12]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	60fb      	str	r3, [r7, #12]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	60fb      	str	r3, [r7, #12]
 80084a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80084ae:	4619      	mov	r1, r3
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f7ff fbf4 	bl	8007c9e <HAL_UARTEx_RxEventCallback>
 80084b6:	e002      	b.n	80084be <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f7ff fbd5 	bl	8007c68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80084be:	2300      	movs	r3, #0
 80084c0:	e002      	b.n	80084c8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80084c2:	2300      	movs	r3, #0
 80084c4:	e000      	b.n	80084c8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80084c6:	2302      	movs	r3, #2
  }
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3730      	adds	r7, #48	@ 0x30
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	691b      	ldr	r3, [r3, #16]
 80084de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	68da      	ldr	r2, [r3, #12]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	430a      	orrs	r2, r1
 80084ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	689a      	ldr	r2, [r3, #8]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	691b      	ldr	r3, [r3, #16]
 80084f6:	431a      	orrs	r2, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	695b      	ldr	r3, [r3, #20]
 80084fc:	4313      	orrs	r3, r2
 80084fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800850a:	f023 030c 	bic.w	r3, r3, #12
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	6812      	ldr	r2, [r2, #0]
 8008512:	68b9      	ldr	r1, [r7, #8]
 8008514:	430b      	orrs	r3, r1
 8008516:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	695b      	ldr	r3, [r3, #20]
 800851e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	699a      	ldr	r2, [r3, #24]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	430a      	orrs	r2, r1
 800852c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a2c      	ldr	r2, [pc, #176]	@ (80085e4 <UART_SetConfig+0x114>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d103      	bne.n	8008540 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008538:	f7fd fd36 	bl	8005fa8 <HAL_RCC_GetPCLK2Freq>
 800853c:	60f8      	str	r0, [r7, #12]
 800853e:	e002      	b.n	8008546 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008540:	f7fd fd1e 	bl	8005f80 <HAL_RCC_GetPCLK1Freq>
 8008544:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008546:	68fa      	ldr	r2, [r7, #12]
 8008548:	4613      	mov	r3, r2
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	4413      	add	r3, r2
 800854e:	009a      	lsls	r2, r3, #2
 8008550:	441a      	add	r2, r3
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	fbb2 f3f3 	udiv	r3, r2, r3
 800855c:	4a22      	ldr	r2, [pc, #136]	@ (80085e8 <UART_SetConfig+0x118>)
 800855e:	fba2 2303 	umull	r2, r3, r2, r3
 8008562:	095b      	lsrs	r3, r3, #5
 8008564:	0119      	lsls	r1, r3, #4
 8008566:	68fa      	ldr	r2, [r7, #12]
 8008568:	4613      	mov	r3, r2
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	4413      	add	r3, r2
 800856e:	009a      	lsls	r2, r3, #2
 8008570:	441a      	add	r2, r3
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	fbb2 f2f3 	udiv	r2, r2, r3
 800857c:	4b1a      	ldr	r3, [pc, #104]	@ (80085e8 <UART_SetConfig+0x118>)
 800857e:	fba3 0302 	umull	r0, r3, r3, r2
 8008582:	095b      	lsrs	r3, r3, #5
 8008584:	2064      	movs	r0, #100	@ 0x64
 8008586:	fb00 f303 	mul.w	r3, r0, r3
 800858a:	1ad3      	subs	r3, r2, r3
 800858c:	011b      	lsls	r3, r3, #4
 800858e:	3332      	adds	r3, #50	@ 0x32
 8008590:	4a15      	ldr	r2, [pc, #84]	@ (80085e8 <UART_SetConfig+0x118>)
 8008592:	fba2 2303 	umull	r2, r3, r2, r3
 8008596:	095b      	lsrs	r3, r3, #5
 8008598:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800859c:	4419      	add	r1, r3
 800859e:	68fa      	ldr	r2, [r7, #12]
 80085a0:	4613      	mov	r3, r2
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	4413      	add	r3, r2
 80085a6:	009a      	lsls	r2, r3, #2
 80085a8:	441a      	add	r2, r3
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80085b4:	4b0c      	ldr	r3, [pc, #48]	@ (80085e8 <UART_SetConfig+0x118>)
 80085b6:	fba3 0302 	umull	r0, r3, r3, r2
 80085ba:	095b      	lsrs	r3, r3, #5
 80085bc:	2064      	movs	r0, #100	@ 0x64
 80085be:	fb00 f303 	mul.w	r3, r0, r3
 80085c2:	1ad3      	subs	r3, r2, r3
 80085c4:	011b      	lsls	r3, r3, #4
 80085c6:	3332      	adds	r3, #50	@ 0x32
 80085c8:	4a07      	ldr	r2, [pc, #28]	@ (80085e8 <UART_SetConfig+0x118>)
 80085ca:	fba2 2303 	umull	r2, r3, r2, r3
 80085ce:	095b      	lsrs	r3, r3, #5
 80085d0:	f003 020f 	and.w	r2, r3, #15
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	440a      	add	r2, r1
 80085da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80085dc:	bf00      	nop
 80085de:	3710      	adds	r7, #16
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	40013800 	.word	0x40013800
 80085e8:	51eb851f 	.word	0x51eb851f

080085ec <__cvt>:
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085f2:	461d      	mov	r5, r3
 80085f4:	bfbb      	ittet	lt
 80085f6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80085fa:	461d      	movlt	r5, r3
 80085fc:	2300      	movge	r3, #0
 80085fe:	232d      	movlt	r3, #45	@ 0x2d
 8008600:	b088      	sub	sp, #32
 8008602:	4614      	mov	r4, r2
 8008604:	bfb8      	it	lt
 8008606:	4614      	movlt	r4, r2
 8008608:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800860a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800860c:	7013      	strb	r3, [r2, #0]
 800860e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008610:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8008614:	f023 0820 	bic.w	r8, r3, #32
 8008618:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800861c:	d005      	beq.n	800862a <__cvt+0x3e>
 800861e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008622:	d100      	bne.n	8008626 <__cvt+0x3a>
 8008624:	3601      	adds	r6, #1
 8008626:	2302      	movs	r3, #2
 8008628:	e000      	b.n	800862c <__cvt+0x40>
 800862a:	2303      	movs	r3, #3
 800862c:	aa07      	add	r2, sp, #28
 800862e:	9204      	str	r2, [sp, #16]
 8008630:	aa06      	add	r2, sp, #24
 8008632:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008636:	e9cd 3600 	strd	r3, r6, [sp]
 800863a:	4622      	mov	r2, r4
 800863c:	462b      	mov	r3, r5
 800863e:	f001 f8a3 	bl	8009788 <_dtoa_r>
 8008642:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008646:	4607      	mov	r7, r0
 8008648:	d119      	bne.n	800867e <__cvt+0x92>
 800864a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800864c:	07db      	lsls	r3, r3, #31
 800864e:	d50e      	bpl.n	800866e <__cvt+0x82>
 8008650:	eb00 0906 	add.w	r9, r0, r6
 8008654:	2200      	movs	r2, #0
 8008656:	2300      	movs	r3, #0
 8008658:	4620      	mov	r0, r4
 800865a:	4629      	mov	r1, r5
 800865c:	f7f8 f9a4 	bl	80009a8 <__aeabi_dcmpeq>
 8008660:	b108      	cbz	r0, 8008666 <__cvt+0x7a>
 8008662:	f8cd 901c 	str.w	r9, [sp, #28]
 8008666:	2230      	movs	r2, #48	@ 0x30
 8008668:	9b07      	ldr	r3, [sp, #28]
 800866a:	454b      	cmp	r3, r9
 800866c:	d31e      	bcc.n	80086ac <__cvt+0xc0>
 800866e:	4638      	mov	r0, r7
 8008670:	9b07      	ldr	r3, [sp, #28]
 8008672:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008674:	1bdb      	subs	r3, r3, r7
 8008676:	6013      	str	r3, [r2, #0]
 8008678:	b008      	add	sp, #32
 800867a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800867e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008682:	eb00 0906 	add.w	r9, r0, r6
 8008686:	d1e5      	bne.n	8008654 <__cvt+0x68>
 8008688:	7803      	ldrb	r3, [r0, #0]
 800868a:	2b30      	cmp	r3, #48	@ 0x30
 800868c:	d10a      	bne.n	80086a4 <__cvt+0xb8>
 800868e:	2200      	movs	r2, #0
 8008690:	2300      	movs	r3, #0
 8008692:	4620      	mov	r0, r4
 8008694:	4629      	mov	r1, r5
 8008696:	f7f8 f987 	bl	80009a8 <__aeabi_dcmpeq>
 800869a:	b918      	cbnz	r0, 80086a4 <__cvt+0xb8>
 800869c:	f1c6 0601 	rsb	r6, r6, #1
 80086a0:	f8ca 6000 	str.w	r6, [sl]
 80086a4:	f8da 3000 	ldr.w	r3, [sl]
 80086a8:	4499      	add	r9, r3
 80086aa:	e7d3      	b.n	8008654 <__cvt+0x68>
 80086ac:	1c59      	adds	r1, r3, #1
 80086ae:	9107      	str	r1, [sp, #28]
 80086b0:	701a      	strb	r2, [r3, #0]
 80086b2:	e7d9      	b.n	8008668 <__cvt+0x7c>

080086b4 <__exponent>:
 80086b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086b6:	2900      	cmp	r1, #0
 80086b8:	bfb6      	itet	lt
 80086ba:	232d      	movlt	r3, #45	@ 0x2d
 80086bc:	232b      	movge	r3, #43	@ 0x2b
 80086be:	4249      	neglt	r1, r1
 80086c0:	2909      	cmp	r1, #9
 80086c2:	7002      	strb	r2, [r0, #0]
 80086c4:	7043      	strb	r3, [r0, #1]
 80086c6:	dd29      	ble.n	800871c <__exponent+0x68>
 80086c8:	f10d 0307 	add.w	r3, sp, #7
 80086cc:	461d      	mov	r5, r3
 80086ce:	270a      	movs	r7, #10
 80086d0:	fbb1 f6f7 	udiv	r6, r1, r7
 80086d4:	461a      	mov	r2, r3
 80086d6:	fb07 1416 	mls	r4, r7, r6, r1
 80086da:	3430      	adds	r4, #48	@ 0x30
 80086dc:	f802 4c01 	strb.w	r4, [r2, #-1]
 80086e0:	460c      	mov	r4, r1
 80086e2:	2c63      	cmp	r4, #99	@ 0x63
 80086e4:	4631      	mov	r1, r6
 80086e6:	f103 33ff 	add.w	r3, r3, #4294967295
 80086ea:	dcf1      	bgt.n	80086d0 <__exponent+0x1c>
 80086ec:	3130      	adds	r1, #48	@ 0x30
 80086ee:	1e94      	subs	r4, r2, #2
 80086f0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80086f4:	4623      	mov	r3, r4
 80086f6:	1c41      	adds	r1, r0, #1
 80086f8:	42ab      	cmp	r3, r5
 80086fa:	d30a      	bcc.n	8008712 <__exponent+0x5e>
 80086fc:	f10d 0309 	add.w	r3, sp, #9
 8008700:	1a9b      	subs	r3, r3, r2
 8008702:	42ac      	cmp	r4, r5
 8008704:	bf88      	it	hi
 8008706:	2300      	movhi	r3, #0
 8008708:	3302      	adds	r3, #2
 800870a:	4403      	add	r3, r0
 800870c:	1a18      	subs	r0, r3, r0
 800870e:	b003      	add	sp, #12
 8008710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008712:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008716:	f801 6f01 	strb.w	r6, [r1, #1]!
 800871a:	e7ed      	b.n	80086f8 <__exponent+0x44>
 800871c:	2330      	movs	r3, #48	@ 0x30
 800871e:	3130      	adds	r1, #48	@ 0x30
 8008720:	7083      	strb	r3, [r0, #2]
 8008722:	70c1      	strb	r1, [r0, #3]
 8008724:	1d03      	adds	r3, r0, #4
 8008726:	e7f1      	b.n	800870c <__exponent+0x58>

08008728 <_printf_float>:
 8008728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800872c:	b091      	sub	sp, #68	@ 0x44
 800872e:	460c      	mov	r4, r1
 8008730:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8008734:	4616      	mov	r6, r2
 8008736:	461f      	mov	r7, r3
 8008738:	4605      	mov	r5, r0
 800873a:	f000 ff03 	bl	8009544 <_localeconv_r>
 800873e:	6803      	ldr	r3, [r0, #0]
 8008740:	4618      	mov	r0, r3
 8008742:	9308      	str	r3, [sp, #32]
 8008744:	f7f7 fd04 	bl	8000150 <strlen>
 8008748:	2300      	movs	r3, #0
 800874a:	930e      	str	r3, [sp, #56]	@ 0x38
 800874c:	f8d8 3000 	ldr.w	r3, [r8]
 8008750:	9009      	str	r0, [sp, #36]	@ 0x24
 8008752:	3307      	adds	r3, #7
 8008754:	f023 0307 	bic.w	r3, r3, #7
 8008758:	f103 0208 	add.w	r2, r3, #8
 800875c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008760:	f8d4 b000 	ldr.w	fp, [r4]
 8008764:	f8c8 2000 	str.w	r2, [r8]
 8008768:	e9d3 8900 	ldrd	r8, r9, [r3]
 800876c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008770:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008772:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8008776:	f04f 32ff 	mov.w	r2, #4294967295
 800877a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800877e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008782:	4b9c      	ldr	r3, [pc, #624]	@ (80089f4 <_printf_float+0x2cc>)
 8008784:	f7f8 f942 	bl	8000a0c <__aeabi_dcmpun>
 8008788:	bb70      	cbnz	r0, 80087e8 <_printf_float+0xc0>
 800878a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800878e:	f04f 32ff 	mov.w	r2, #4294967295
 8008792:	4b98      	ldr	r3, [pc, #608]	@ (80089f4 <_printf_float+0x2cc>)
 8008794:	f7f8 f91c 	bl	80009d0 <__aeabi_dcmple>
 8008798:	bb30      	cbnz	r0, 80087e8 <_printf_float+0xc0>
 800879a:	2200      	movs	r2, #0
 800879c:	2300      	movs	r3, #0
 800879e:	4640      	mov	r0, r8
 80087a0:	4649      	mov	r1, r9
 80087a2:	f7f8 f90b 	bl	80009bc <__aeabi_dcmplt>
 80087a6:	b110      	cbz	r0, 80087ae <_printf_float+0x86>
 80087a8:	232d      	movs	r3, #45	@ 0x2d
 80087aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087ae:	4a92      	ldr	r2, [pc, #584]	@ (80089f8 <_printf_float+0x2d0>)
 80087b0:	4b92      	ldr	r3, [pc, #584]	@ (80089fc <_printf_float+0x2d4>)
 80087b2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80087b6:	bf94      	ite	ls
 80087b8:	4690      	movls	r8, r2
 80087ba:	4698      	movhi	r8, r3
 80087bc:	2303      	movs	r3, #3
 80087be:	f04f 0900 	mov.w	r9, #0
 80087c2:	6123      	str	r3, [r4, #16]
 80087c4:	f02b 0304 	bic.w	r3, fp, #4
 80087c8:	6023      	str	r3, [r4, #0]
 80087ca:	4633      	mov	r3, r6
 80087cc:	4621      	mov	r1, r4
 80087ce:	4628      	mov	r0, r5
 80087d0:	9700      	str	r7, [sp, #0]
 80087d2:	aa0f      	add	r2, sp, #60	@ 0x3c
 80087d4:	f000 f9d4 	bl	8008b80 <_printf_common>
 80087d8:	3001      	adds	r0, #1
 80087da:	f040 8090 	bne.w	80088fe <_printf_float+0x1d6>
 80087de:	f04f 30ff 	mov.w	r0, #4294967295
 80087e2:	b011      	add	sp, #68	@ 0x44
 80087e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087e8:	4642      	mov	r2, r8
 80087ea:	464b      	mov	r3, r9
 80087ec:	4640      	mov	r0, r8
 80087ee:	4649      	mov	r1, r9
 80087f0:	f7f8 f90c 	bl	8000a0c <__aeabi_dcmpun>
 80087f4:	b148      	cbz	r0, 800880a <_printf_float+0xe2>
 80087f6:	464b      	mov	r3, r9
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	bfb8      	it	lt
 80087fc:	232d      	movlt	r3, #45	@ 0x2d
 80087fe:	4a80      	ldr	r2, [pc, #512]	@ (8008a00 <_printf_float+0x2d8>)
 8008800:	bfb8      	it	lt
 8008802:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008806:	4b7f      	ldr	r3, [pc, #508]	@ (8008a04 <_printf_float+0x2dc>)
 8008808:	e7d3      	b.n	80087b2 <_printf_float+0x8a>
 800880a:	6863      	ldr	r3, [r4, #4]
 800880c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8008810:	1c5a      	adds	r2, r3, #1
 8008812:	d13f      	bne.n	8008894 <_printf_float+0x16c>
 8008814:	2306      	movs	r3, #6
 8008816:	6063      	str	r3, [r4, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800881e:	6023      	str	r3, [r4, #0]
 8008820:	9206      	str	r2, [sp, #24]
 8008822:	aa0e      	add	r2, sp, #56	@ 0x38
 8008824:	e9cd a204 	strd	sl, r2, [sp, #16]
 8008828:	aa0d      	add	r2, sp, #52	@ 0x34
 800882a:	9203      	str	r2, [sp, #12]
 800882c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8008830:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008834:	6863      	ldr	r3, [r4, #4]
 8008836:	4642      	mov	r2, r8
 8008838:	9300      	str	r3, [sp, #0]
 800883a:	4628      	mov	r0, r5
 800883c:	464b      	mov	r3, r9
 800883e:	910a      	str	r1, [sp, #40]	@ 0x28
 8008840:	f7ff fed4 	bl	80085ec <__cvt>
 8008844:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008846:	4680      	mov	r8, r0
 8008848:	2947      	cmp	r1, #71	@ 0x47
 800884a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800884c:	d128      	bne.n	80088a0 <_printf_float+0x178>
 800884e:	1cc8      	adds	r0, r1, #3
 8008850:	db02      	blt.n	8008858 <_printf_float+0x130>
 8008852:	6863      	ldr	r3, [r4, #4]
 8008854:	4299      	cmp	r1, r3
 8008856:	dd40      	ble.n	80088da <_printf_float+0x1b2>
 8008858:	f1aa 0a02 	sub.w	sl, sl, #2
 800885c:	fa5f fa8a 	uxtb.w	sl, sl
 8008860:	4652      	mov	r2, sl
 8008862:	3901      	subs	r1, #1
 8008864:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008868:	910d      	str	r1, [sp, #52]	@ 0x34
 800886a:	f7ff ff23 	bl	80086b4 <__exponent>
 800886e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008870:	4681      	mov	r9, r0
 8008872:	1813      	adds	r3, r2, r0
 8008874:	2a01      	cmp	r2, #1
 8008876:	6123      	str	r3, [r4, #16]
 8008878:	dc02      	bgt.n	8008880 <_printf_float+0x158>
 800887a:	6822      	ldr	r2, [r4, #0]
 800887c:	07d2      	lsls	r2, r2, #31
 800887e:	d501      	bpl.n	8008884 <_printf_float+0x15c>
 8008880:	3301      	adds	r3, #1
 8008882:	6123      	str	r3, [r4, #16]
 8008884:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8008888:	2b00      	cmp	r3, #0
 800888a:	d09e      	beq.n	80087ca <_printf_float+0xa2>
 800888c:	232d      	movs	r3, #45	@ 0x2d
 800888e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008892:	e79a      	b.n	80087ca <_printf_float+0xa2>
 8008894:	2947      	cmp	r1, #71	@ 0x47
 8008896:	d1bf      	bne.n	8008818 <_printf_float+0xf0>
 8008898:	2b00      	cmp	r3, #0
 800889a:	d1bd      	bne.n	8008818 <_printf_float+0xf0>
 800889c:	2301      	movs	r3, #1
 800889e:	e7ba      	b.n	8008816 <_printf_float+0xee>
 80088a0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80088a4:	d9dc      	bls.n	8008860 <_printf_float+0x138>
 80088a6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80088aa:	d118      	bne.n	80088de <_printf_float+0x1b6>
 80088ac:	2900      	cmp	r1, #0
 80088ae:	6863      	ldr	r3, [r4, #4]
 80088b0:	dd0b      	ble.n	80088ca <_printf_float+0x1a2>
 80088b2:	6121      	str	r1, [r4, #16]
 80088b4:	b913      	cbnz	r3, 80088bc <_printf_float+0x194>
 80088b6:	6822      	ldr	r2, [r4, #0]
 80088b8:	07d0      	lsls	r0, r2, #31
 80088ba:	d502      	bpl.n	80088c2 <_printf_float+0x19a>
 80088bc:	3301      	adds	r3, #1
 80088be:	440b      	add	r3, r1
 80088c0:	6123      	str	r3, [r4, #16]
 80088c2:	f04f 0900 	mov.w	r9, #0
 80088c6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80088c8:	e7dc      	b.n	8008884 <_printf_float+0x15c>
 80088ca:	b913      	cbnz	r3, 80088d2 <_printf_float+0x1aa>
 80088cc:	6822      	ldr	r2, [r4, #0]
 80088ce:	07d2      	lsls	r2, r2, #31
 80088d0:	d501      	bpl.n	80088d6 <_printf_float+0x1ae>
 80088d2:	3302      	adds	r3, #2
 80088d4:	e7f4      	b.n	80088c0 <_printf_float+0x198>
 80088d6:	2301      	movs	r3, #1
 80088d8:	e7f2      	b.n	80088c0 <_printf_float+0x198>
 80088da:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80088de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088e0:	4299      	cmp	r1, r3
 80088e2:	db05      	blt.n	80088f0 <_printf_float+0x1c8>
 80088e4:	6823      	ldr	r3, [r4, #0]
 80088e6:	6121      	str	r1, [r4, #16]
 80088e8:	07d8      	lsls	r0, r3, #31
 80088ea:	d5ea      	bpl.n	80088c2 <_printf_float+0x19a>
 80088ec:	1c4b      	adds	r3, r1, #1
 80088ee:	e7e7      	b.n	80088c0 <_printf_float+0x198>
 80088f0:	2900      	cmp	r1, #0
 80088f2:	bfcc      	ite	gt
 80088f4:	2201      	movgt	r2, #1
 80088f6:	f1c1 0202 	rsble	r2, r1, #2
 80088fa:	4413      	add	r3, r2
 80088fc:	e7e0      	b.n	80088c0 <_printf_float+0x198>
 80088fe:	6823      	ldr	r3, [r4, #0]
 8008900:	055a      	lsls	r2, r3, #21
 8008902:	d407      	bmi.n	8008914 <_printf_float+0x1ec>
 8008904:	6923      	ldr	r3, [r4, #16]
 8008906:	4642      	mov	r2, r8
 8008908:	4631      	mov	r1, r6
 800890a:	4628      	mov	r0, r5
 800890c:	47b8      	blx	r7
 800890e:	3001      	adds	r0, #1
 8008910:	d12b      	bne.n	800896a <_printf_float+0x242>
 8008912:	e764      	b.n	80087de <_printf_float+0xb6>
 8008914:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008918:	f240 80dc 	bls.w	8008ad4 <_printf_float+0x3ac>
 800891c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008920:	2200      	movs	r2, #0
 8008922:	2300      	movs	r3, #0
 8008924:	f7f8 f840 	bl	80009a8 <__aeabi_dcmpeq>
 8008928:	2800      	cmp	r0, #0
 800892a:	d033      	beq.n	8008994 <_printf_float+0x26c>
 800892c:	2301      	movs	r3, #1
 800892e:	4631      	mov	r1, r6
 8008930:	4628      	mov	r0, r5
 8008932:	4a35      	ldr	r2, [pc, #212]	@ (8008a08 <_printf_float+0x2e0>)
 8008934:	47b8      	blx	r7
 8008936:	3001      	adds	r0, #1
 8008938:	f43f af51 	beq.w	80087de <_printf_float+0xb6>
 800893c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8008940:	4543      	cmp	r3, r8
 8008942:	db02      	blt.n	800894a <_printf_float+0x222>
 8008944:	6823      	ldr	r3, [r4, #0]
 8008946:	07d8      	lsls	r0, r3, #31
 8008948:	d50f      	bpl.n	800896a <_printf_float+0x242>
 800894a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800894e:	4631      	mov	r1, r6
 8008950:	4628      	mov	r0, r5
 8008952:	47b8      	blx	r7
 8008954:	3001      	adds	r0, #1
 8008956:	f43f af42 	beq.w	80087de <_printf_float+0xb6>
 800895a:	f04f 0900 	mov.w	r9, #0
 800895e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008962:	f104 0a1a 	add.w	sl, r4, #26
 8008966:	45c8      	cmp	r8, r9
 8008968:	dc09      	bgt.n	800897e <_printf_float+0x256>
 800896a:	6823      	ldr	r3, [r4, #0]
 800896c:	079b      	lsls	r3, r3, #30
 800896e:	f100 8102 	bmi.w	8008b76 <_printf_float+0x44e>
 8008972:	68e0      	ldr	r0, [r4, #12]
 8008974:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008976:	4298      	cmp	r0, r3
 8008978:	bfb8      	it	lt
 800897a:	4618      	movlt	r0, r3
 800897c:	e731      	b.n	80087e2 <_printf_float+0xba>
 800897e:	2301      	movs	r3, #1
 8008980:	4652      	mov	r2, sl
 8008982:	4631      	mov	r1, r6
 8008984:	4628      	mov	r0, r5
 8008986:	47b8      	blx	r7
 8008988:	3001      	adds	r0, #1
 800898a:	f43f af28 	beq.w	80087de <_printf_float+0xb6>
 800898e:	f109 0901 	add.w	r9, r9, #1
 8008992:	e7e8      	b.n	8008966 <_printf_float+0x23e>
 8008994:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008996:	2b00      	cmp	r3, #0
 8008998:	dc38      	bgt.n	8008a0c <_printf_float+0x2e4>
 800899a:	2301      	movs	r3, #1
 800899c:	4631      	mov	r1, r6
 800899e:	4628      	mov	r0, r5
 80089a0:	4a19      	ldr	r2, [pc, #100]	@ (8008a08 <_printf_float+0x2e0>)
 80089a2:	47b8      	blx	r7
 80089a4:	3001      	adds	r0, #1
 80089a6:	f43f af1a 	beq.w	80087de <_printf_float+0xb6>
 80089aa:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80089ae:	ea59 0303 	orrs.w	r3, r9, r3
 80089b2:	d102      	bne.n	80089ba <_printf_float+0x292>
 80089b4:	6823      	ldr	r3, [r4, #0]
 80089b6:	07d9      	lsls	r1, r3, #31
 80089b8:	d5d7      	bpl.n	800896a <_printf_float+0x242>
 80089ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80089be:	4631      	mov	r1, r6
 80089c0:	4628      	mov	r0, r5
 80089c2:	47b8      	blx	r7
 80089c4:	3001      	adds	r0, #1
 80089c6:	f43f af0a 	beq.w	80087de <_printf_float+0xb6>
 80089ca:	f04f 0a00 	mov.w	sl, #0
 80089ce:	f104 0b1a 	add.w	fp, r4, #26
 80089d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80089d4:	425b      	negs	r3, r3
 80089d6:	4553      	cmp	r3, sl
 80089d8:	dc01      	bgt.n	80089de <_printf_float+0x2b6>
 80089da:	464b      	mov	r3, r9
 80089dc:	e793      	b.n	8008906 <_printf_float+0x1de>
 80089de:	2301      	movs	r3, #1
 80089e0:	465a      	mov	r2, fp
 80089e2:	4631      	mov	r1, r6
 80089e4:	4628      	mov	r0, r5
 80089e6:	47b8      	blx	r7
 80089e8:	3001      	adds	r0, #1
 80089ea:	f43f aef8 	beq.w	80087de <_printf_float+0xb6>
 80089ee:	f10a 0a01 	add.w	sl, sl, #1
 80089f2:	e7ee      	b.n	80089d2 <_printf_float+0x2aa>
 80089f4:	7fefffff 	.word	0x7fefffff
 80089f8:	0800cd2e 	.word	0x0800cd2e
 80089fc:	0800cd32 	.word	0x0800cd32
 8008a00:	0800cd36 	.word	0x0800cd36
 8008a04:	0800cd3a 	.word	0x0800cd3a
 8008a08:	0800cd3e 	.word	0x0800cd3e
 8008a0c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008a0e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008a12:	4553      	cmp	r3, sl
 8008a14:	bfa8      	it	ge
 8008a16:	4653      	movge	r3, sl
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	4699      	mov	r9, r3
 8008a1c:	dc36      	bgt.n	8008a8c <_printf_float+0x364>
 8008a1e:	f04f 0b00 	mov.w	fp, #0
 8008a22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a26:	f104 021a 	add.w	r2, r4, #26
 8008a2a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008a2c:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a2e:	eba3 0309 	sub.w	r3, r3, r9
 8008a32:	455b      	cmp	r3, fp
 8008a34:	dc31      	bgt.n	8008a9a <_printf_float+0x372>
 8008a36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008a38:	459a      	cmp	sl, r3
 8008a3a:	dc3a      	bgt.n	8008ab2 <_printf_float+0x38a>
 8008a3c:	6823      	ldr	r3, [r4, #0]
 8008a3e:	07da      	lsls	r2, r3, #31
 8008a40:	d437      	bmi.n	8008ab2 <_printf_float+0x38a>
 8008a42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008a44:	ebaa 0903 	sub.w	r9, sl, r3
 8008a48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a4a:	ebaa 0303 	sub.w	r3, sl, r3
 8008a4e:	4599      	cmp	r9, r3
 8008a50:	bfa8      	it	ge
 8008a52:	4699      	movge	r9, r3
 8008a54:	f1b9 0f00 	cmp.w	r9, #0
 8008a58:	dc33      	bgt.n	8008ac2 <_printf_float+0x39a>
 8008a5a:	f04f 0800 	mov.w	r8, #0
 8008a5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a62:	f104 0b1a 	add.w	fp, r4, #26
 8008a66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008a68:	ebaa 0303 	sub.w	r3, sl, r3
 8008a6c:	eba3 0309 	sub.w	r3, r3, r9
 8008a70:	4543      	cmp	r3, r8
 8008a72:	f77f af7a 	ble.w	800896a <_printf_float+0x242>
 8008a76:	2301      	movs	r3, #1
 8008a78:	465a      	mov	r2, fp
 8008a7a:	4631      	mov	r1, r6
 8008a7c:	4628      	mov	r0, r5
 8008a7e:	47b8      	blx	r7
 8008a80:	3001      	adds	r0, #1
 8008a82:	f43f aeac 	beq.w	80087de <_printf_float+0xb6>
 8008a86:	f108 0801 	add.w	r8, r8, #1
 8008a8a:	e7ec      	b.n	8008a66 <_printf_float+0x33e>
 8008a8c:	4642      	mov	r2, r8
 8008a8e:	4631      	mov	r1, r6
 8008a90:	4628      	mov	r0, r5
 8008a92:	47b8      	blx	r7
 8008a94:	3001      	adds	r0, #1
 8008a96:	d1c2      	bne.n	8008a1e <_printf_float+0x2f6>
 8008a98:	e6a1      	b.n	80087de <_printf_float+0xb6>
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	4631      	mov	r1, r6
 8008a9e:	4628      	mov	r0, r5
 8008aa0:	920a      	str	r2, [sp, #40]	@ 0x28
 8008aa2:	47b8      	blx	r7
 8008aa4:	3001      	adds	r0, #1
 8008aa6:	f43f ae9a 	beq.w	80087de <_printf_float+0xb6>
 8008aaa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008aac:	f10b 0b01 	add.w	fp, fp, #1
 8008ab0:	e7bb      	b.n	8008a2a <_printf_float+0x302>
 8008ab2:	4631      	mov	r1, r6
 8008ab4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008ab8:	4628      	mov	r0, r5
 8008aba:	47b8      	blx	r7
 8008abc:	3001      	adds	r0, #1
 8008abe:	d1c0      	bne.n	8008a42 <_printf_float+0x31a>
 8008ac0:	e68d      	b.n	80087de <_printf_float+0xb6>
 8008ac2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ac4:	464b      	mov	r3, r9
 8008ac6:	4631      	mov	r1, r6
 8008ac8:	4628      	mov	r0, r5
 8008aca:	4442      	add	r2, r8
 8008acc:	47b8      	blx	r7
 8008ace:	3001      	adds	r0, #1
 8008ad0:	d1c3      	bne.n	8008a5a <_printf_float+0x332>
 8008ad2:	e684      	b.n	80087de <_printf_float+0xb6>
 8008ad4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008ad8:	f1ba 0f01 	cmp.w	sl, #1
 8008adc:	dc01      	bgt.n	8008ae2 <_printf_float+0x3ba>
 8008ade:	07db      	lsls	r3, r3, #31
 8008ae0:	d536      	bpl.n	8008b50 <_printf_float+0x428>
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	4642      	mov	r2, r8
 8008ae6:	4631      	mov	r1, r6
 8008ae8:	4628      	mov	r0, r5
 8008aea:	47b8      	blx	r7
 8008aec:	3001      	adds	r0, #1
 8008aee:	f43f ae76 	beq.w	80087de <_printf_float+0xb6>
 8008af2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008af6:	4631      	mov	r1, r6
 8008af8:	4628      	mov	r0, r5
 8008afa:	47b8      	blx	r7
 8008afc:	3001      	adds	r0, #1
 8008afe:	f43f ae6e 	beq.w	80087de <_printf_float+0xb6>
 8008b02:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008b06:	2200      	movs	r2, #0
 8008b08:	2300      	movs	r3, #0
 8008b0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b0e:	f7f7 ff4b 	bl	80009a8 <__aeabi_dcmpeq>
 8008b12:	b9c0      	cbnz	r0, 8008b46 <_printf_float+0x41e>
 8008b14:	4653      	mov	r3, sl
 8008b16:	f108 0201 	add.w	r2, r8, #1
 8008b1a:	4631      	mov	r1, r6
 8008b1c:	4628      	mov	r0, r5
 8008b1e:	47b8      	blx	r7
 8008b20:	3001      	adds	r0, #1
 8008b22:	d10c      	bne.n	8008b3e <_printf_float+0x416>
 8008b24:	e65b      	b.n	80087de <_printf_float+0xb6>
 8008b26:	2301      	movs	r3, #1
 8008b28:	465a      	mov	r2, fp
 8008b2a:	4631      	mov	r1, r6
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	47b8      	blx	r7
 8008b30:	3001      	adds	r0, #1
 8008b32:	f43f ae54 	beq.w	80087de <_printf_float+0xb6>
 8008b36:	f108 0801 	add.w	r8, r8, #1
 8008b3a:	45d0      	cmp	r8, sl
 8008b3c:	dbf3      	blt.n	8008b26 <_printf_float+0x3fe>
 8008b3e:	464b      	mov	r3, r9
 8008b40:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008b44:	e6e0      	b.n	8008908 <_printf_float+0x1e0>
 8008b46:	f04f 0800 	mov.w	r8, #0
 8008b4a:	f104 0b1a 	add.w	fp, r4, #26
 8008b4e:	e7f4      	b.n	8008b3a <_printf_float+0x412>
 8008b50:	2301      	movs	r3, #1
 8008b52:	4642      	mov	r2, r8
 8008b54:	e7e1      	b.n	8008b1a <_printf_float+0x3f2>
 8008b56:	2301      	movs	r3, #1
 8008b58:	464a      	mov	r2, r9
 8008b5a:	4631      	mov	r1, r6
 8008b5c:	4628      	mov	r0, r5
 8008b5e:	47b8      	blx	r7
 8008b60:	3001      	adds	r0, #1
 8008b62:	f43f ae3c 	beq.w	80087de <_printf_float+0xb6>
 8008b66:	f108 0801 	add.w	r8, r8, #1
 8008b6a:	68e3      	ldr	r3, [r4, #12]
 8008b6c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008b6e:	1a5b      	subs	r3, r3, r1
 8008b70:	4543      	cmp	r3, r8
 8008b72:	dcf0      	bgt.n	8008b56 <_printf_float+0x42e>
 8008b74:	e6fd      	b.n	8008972 <_printf_float+0x24a>
 8008b76:	f04f 0800 	mov.w	r8, #0
 8008b7a:	f104 0919 	add.w	r9, r4, #25
 8008b7e:	e7f4      	b.n	8008b6a <_printf_float+0x442>

08008b80 <_printf_common>:
 8008b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b84:	4616      	mov	r6, r2
 8008b86:	4698      	mov	r8, r3
 8008b88:	688a      	ldr	r2, [r1, #8]
 8008b8a:	690b      	ldr	r3, [r1, #16]
 8008b8c:	4607      	mov	r7, r0
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	bfb8      	it	lt
 8008b92:	4613      	movlt	r3, r2
 8008b94:	6033      	str	r3, [r6, #0]
 8008b96:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008b9a:	460c      	mov	r4, r1
 8008b9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008ba0:	b10a      	cbz	r2, 8008ba6 <_printf_common+0x26>
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	6033      	str	r3, [r6, #0]
 8008ba6:	6823      	ldr	r3, [r4, #0]
 8008ba8:	0699      	lsls	r1, r3, #26
 8008baa:	bf42      	ittt	mi
 8008bac:	6833      	ldrmi	r3, [r6, #0]
 8008bae:	3302      	addmi	r3, #2
 8008bb0:	6033      	strmi	r3, [r6, #0]
 8008bb2:	6825      	ldr	r5, [r4, #0]
 8008bb4:	f015 0506 	ands.w	r5, r5, #6
 8008bb8:	d106      	bne.n	8008bc8 <_printf_common+0x48>
 8008bba:	f104 0a19 	add.w	sl, r4, #25
 8008bbe:	68e3      	ldr	r3, [r4, #12]
 8008bc0:	6832      	ldr	r2, [r6, #0]
 8008bc2:	1a9b      	subs	r3, r3, r2
 8008bc4:	42ab      	cmp	r3, r5
 8008bc6:	dc2b      	bgt.n	8008c20 <_printf_common+0xa0>
 8008bc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008bcc:	6822      	ldr	r2, [r4, #0]
 8008bce:	3b00      	subs	r3, #0
 8008bd0:	bf18      	it	ne
 8008bd2:	2301      	movne	r3, #1
 8008bd4:	0692      	lsls	r2, r2, #26
 8008bd6:	d430      	bmi.n	8008c3a <_printf_common+0xba>
 8008bd8:	4641      	mov	r1, r8
 8008bda:	4638      	mov	r0, r7
 8008bdc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008be0:	47c8      	blx	r9
 8008be2:	3001      	adds	r0, #1
 8008be4:	d023      	beq.n	8008c2e <_printf_common+0xae>
 8008be6:	6823      	ldr	r3, [r4, #0]
 8008be8:	6922      	ldr	r2, [r4, #16]
 8008bea:	f003 0306 	and.w	r3, r3, #6
 8008bee:	2b04      	cmp	r3, #4
 8008bf0:	bf14      	ite	ne
 8008bf2:	2500      	movne	r5, #0
 8008bf4:	6833      	ldreq	r3, [r6, #0]
 8008bf6:	f04f 0600 	mov.w	r6, #0
 8008bfa:	bf08      	it	eq
 8008bfc:	68e5      	ldreq	r5, [r4, #12]
 8008bfe:	f104 041a 	add.w	r4, r4, #26
 8008c02:	bf08      	it	eq
 8008c04:	1aed      	subeq	r5, r5, r3
 8008c06:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008c0a:	bf08      	it	eq
 8008c0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c10:	4293      	cmp	r3, r2
 8008c12:	bfc4      	itt	gt
 8008c14:	1a9b      	subgt	r3, r3, r2
 8008c16:	18ed      	addgt	r5, r5, r3
 8008c18:	42b5      	cmp	r5, r6
 8008c1a:	d11a      	bne.n	8008c52 <_printf_common+0xd2>
 8008c1c:	2000      	movs	r0, #0
 8008c1e:	e008      	b.n	8008c32 <_printf_common+0xb2>
 8008c20:	2301      	movs	r3, #1
 8008c22:	4652      	mov	r2, sl
 8008c24:	4641      	mov	r1, r8
 8008c26:	4638      	mov	r0, r7
 8008c28:	47c8      	blx	r9
 8008c2a:	3001      	adds	r0, #1
 8008c2c:	d103      	bne.n	8008c36 <_printf_common+0xb6>
 8008c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c36:	3501      	adds	r5, #1
 8008c38:	e7c1      	b.n	8008bbe <_printf_common+0x3e>
 8008c3a:	2030      	movs	r0, #48	@ 0x30
 8008c3c:	18e1      	adds	r1, r4, r3
 8008c3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008c42:	1c5a      	adds	r2, r3, #1
 8008c44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008c48:	4422      	add	r2, r4
 8008c4a:	3302      	adds	r3, #2
 8008c4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008c50:	e7c2      	b.n	8008bd8 <_printf_common+0x58>
 8008c52:	2301      	movs	r3, #1
 8008c54:	4622      	mov	r2, r4
 8008c56:	4641      	mov	r1, r8
 8008c58:	4638      	mov	r0, r7
 8008c5a:	47c8      	blx	r9
 8008c5c:	3001      	adds	r0, #1
 8008c5e:	d0e6      	beq.n	8008c2e <_printf_common+0xae>
 8008c60:	3601      	adds	r6, #1
 8008c62:	e7d9      	b.n	8008c18 <_printf_common+0x98>

08008c64 <_printf_i>:
 8008c64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c68:	7e0f      	ldrb	r7, [r1, #24]
 8008c6a:	4691      	mov	r9, r2
 8008c6c:	2f78      	cmp	r7, #120	@ 0x78
 8008c6e:	4680      	mov	r8, r0
 8008c70:	460c      	mov	r4, r1
 8008c72:	469a      	mov	sl, r3
 8008c74:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008c76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008c7a:	d807      	bhi.n	8008c8c <_printf_i+0x28>
 8008c7c:	2f62      	cmp	r7, #98	@ 0x62
 8008c7e:	d80a      	bhi.n	8008c96 <_printf_i+0x32>
 8008c80:	2f00      	cmp	r7, #0
 8008c82:	f000 80d3 	beq.w	8008e2c <_printf_i+0x1c8>
 8008c86:	2f58      	cmp	r7, #88	@ 0x58
 8008c88:	f000 80ba 	beq.w	8008e00 <_printf_i+0x19c>
 8008c8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008c94:	e03a      	b.n	8008d0c <_printf_i+0xa8>
 8008c96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008c9a:	2b15      	cmp	r3, #21
 8008c9c:	d8f6      	bhi.n	8008c8c <_printf_i+0x28>
 8008c9e:	a101      	add	r1, pc, #4	@ (adr r1, 8008ca4 <_printf_i+0x40>)
 8008ca0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ca4:	08008cfd 	.word	0x08008cfd
 8008ca8:	08008d11 	.word	0x08008d11
 8008cac:	08008c8d 	.word	0x08008c8d
 8008cb0:	08008c8d 	.word	0x08008c8d
 8008cb4:	08008c8d 	.word	0x08008c8d
 8008cb8:	08008c8d 	.word	0x08008c8d
 8008cbc:	08008d11 	.word	0x08008d11
 8008cc0:	08008c8d 	.word	0x08008c8d
 8008cc4:	08008c8d 	.word	0x08008c8d
 8008cc8:	08008c8d 	.word	0x08008c8d
 8008ccc:	08008c8d 	.word	0x08008c8d
 8008cd0:	08008e13 	.word	0x08008e13
 8008cd4:	08008d3b 	.word	0x08008d3b
 8008cd8:	08008dcd 	.word	0x08008dcd
 8008cdc:	08008c8d 	.word	0x08008c8d
 8008ce0:	08008c8d 	.word	0x08008c8d
 8008ce4:	08008e35 	.word	0x08008e35
 8008ce8:	08008c8d 	.word	0x08008c8d
 8008cec:	08008d3b 	.word	0x08008d3b
 8008cf0:	08008c8d 	.word	0x08008c8d
 8008cf4:	08008c8d 	.word	0x08008c8d
 8008cf8:	08008dd5 	.word	0x08008dd5
 8008cfc:	6833      	ldr	r3, [r6, #0]
 8008cfe:	1d1a      	adds	r2, r3, #4
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	6032      	str	r2, [r6, #0]
 8008d04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	e09e      	b.n	8008e4e <_printf_i+0x1ea>
 8008d10:	6833      	ldr	r3, [r6, #0]
 8008d12:	6820      	ldr	r0, [r4, #0]
 8008d14:	1d19      	adds	r1, r3, #4
 8008d16:	6031      	str	r1, [r6, #0]
 8008d18:	0606      	lsls	r6, r0, #24
 8008d1a:	d501      	bpl.n	8008d20 <_printf_i+0xbc>
 8008d1c:	681d      	ldr	r5, [r3, #0]
 8008d1e:	e003      	b.n	8008d28 <_printf_i+0xc4>
 8008d20:	0645      	lsls	r5, r0, #25
 8008d22:	d5fb      	bpl.n	8008d1c <_printf_i+0xb8>
 8008d24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008d28:	2d00      	cmp	r5, #0
 8008d2a:	da03      	bge.n	8008d34 <_printf_i+0xd0>
 8008d2c:	232d      	movs	r3, #45	@ 0x2d
 8008d2e:	426d      	negs	r5, r5
 8008d30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d34:	230a      	movs	r3, #10
 8008d36:	4859      	ldr	r0, [pc, #356]	@ (8008e9c <_printf_i+0x238>)
 8008d38:	e011      	b.n	8008d5e <_printf_i+0xfa>
 8008d3a:	6821      	ldr	r1, [r4, #0]
 8008d3c:	6833      	ldr	r3, [r6, #0]
 8008d3e:	0608      	lsls	r0, r1, #24
 8008d40:	f853 5b04 	ldr.w	r5, [r3], #4
 8008d44:	d402      	bmi.n	8008d4c <_printf_i+0xe8>
 8008d46:	0649      	lsls	r1, r1, #25
 8008d48:	bf48      	it	mi
 8008d4a:	b2ad      	uxthmi	r5, r5
 8008d4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008d4e:	6033      	str	r3, [r6, #0]
 8008d50:	bf14      	ite	ne
 8008d52:	230a      	movne	r3, #10
 8008d54:	2308      	moveq	r3, #8
 8008d56:	4851      	ldr	r0, [pc, #324]	@ (8008e9c <_printf_i+0x238>)
 8008d58:	2100      	movs	r1, #0
 8008d5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008d5e:	6866      	ldr	r6, [r4, #4]
 8008d60:	2e00      	cmp	r6, #0
 8008d62:	bfa8      	it	ge
 8008d64:	6821      	ldrge	r1, [r4, #0]
 8008d66:	60a6      	str	r6, [r4, #8]
 8008d68:	bfa4      	itt	ge
 8008d6a:	f021 0104 	bicge.w	r1, r1, #4
 8008d6e:	6021      	strge	r1, [r4, #0]
 8008d70:	b90d      	cbnz	r5, 8008d76 <_printf_i+0x112>
 8008d72:	2e00      	cmp	r6, #0
 8008d74:	d04b      	beq.n	8008e0e <_printf_i+0x1aa>
 8008d76:	4616      	mov	r6, r2
 8008d78:	fbb5 f1f3 	udiv	r1, r5, r3
 8008d7c:	fb03 5711 	mls	r7, r3, r1, r5
 8008d80:	5dc7      	ldrb	r7, [r0, r7]
 8008d82:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d86:	462f      	mov	r7, r5
 8008d88:	42bb      	cmp	r3, r7
 8008d8a:	460d      	mov	r5, r1
 8008d8c:	d9f4      	bls.n	8008d78 <_printf_i+0x114>
 8008d8e:	2b08      	cmp	r3, #8
 8008d90:	d10b      	bne.n	8008daa <_printf_i+0x146>
 8008d92:	6823      	ldr	r3, [r4, #0]
 8008d94:	07df      	lsls	r7, r3, #31
 8008d96:	d508      	bpl.n	8008daa <_printf_i+0x146>
 8008d98:	6923      	ldr	r3, [r4, #16]
 8008d9a:	6861      	ldr	r1, [r4, #4]
 8008d9c:	4299      	cmp	r1, r3
 8008d9e:	bfde      	ittt	le
 8008da0:	2330      	movle	r3, #48	@ 0x30
 8008da2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008da6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008daa:	1b92      	subs	r2, r2, r6
 8008dac:	6122      	str	r2, [r4, #16]
 8008dae:	464b      	mov	r3, r9
 8008db0:	4621      	mov	r1, r4
 8008db2:	4640      	mov	r0, r8
 8008db4:	f8cd a000 	str.w	sl, [sp]
 8008db8:	aa03      	add	r2, sp, #12
 8008dba:	f7ff fee1 	bl	8008b80 <_printf_common>
 8008dbe:	3001      	adds	r0, #1
 8008dc0:	d14a      	bne.n	8008e58 <_printf_i+0x1f4>
 8008dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8008dc6:	b004      	add	sp, #16
 8008dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dcc:	6823      	ldr	r3, [r4, #0]
 8008dce:	f043 0320 	orr.w	r3, r3, #32
 8008dd2:	6023      	str	r3, [r4, #0]
 8008dd4:	2778      	movs	r7, #120	@ 0x78
 8008dd6:	4832      	ldr	r0, [pc, #200]	@ (8008ea0 <_printf_i+0x23c>)
 8008dd8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008ddc:	6823      	ldr	r3, [r4, #0]
 8008dde:	6831      	ldr	r1, [r6, #0]
 8008de0:	061f      	lsls	r7, r3, #24
 8008de2:	f851 5b04 	ldr.w	r5, [r1], #4
 8008de6:	d402      	bmi.n	8008dee <_printf_i+0x18a>
 8008de8:	065f      	lsls	r7, r3, #25
 8008dea:	bf48      	it	mi
 8008dec:	b2ad      	uxthmi	r5, r5
 8008dee:	6031      	str	r1, [r6, #0]
 8008df0:	07d9      	lsls	r1, r3, #31
 8008df2:	bf44      	itt	mi
 8008df4:	f043 0320 	orrmi.w	r3, r3, #32
 8008df8:	6023      	strmi	r3, [r4, #0]
 8008dfa:	b11d      	cbz	r5, 8008e04 <_printf_i+0x1a0>
 8008dfc:	2310      	movs	r3, #16
 8008dfe:	e7ab      	b.n	8008d58 <_printf_i+0xf4>
 8008e00:	4826      	ldr	r0, [pc, #152]	@ (8008e9c <_printf_i+0x238>)
 8008e02:	e7e9      	b.n	8008dd8 <_printf_i+0x174>
 8008e04:	6823      	ldr	r3, [r4, #0]
 8008e06:	f023 0320 	bic.w	r3, r3, #32
 8008e0a:	6023      	str	r3, [r4, #0]
 8008e0c:	e7f6      	b.n	8008dfc <_printf_i+0x198>
 8008e0e:	4616      	mov	r6, r2
 8008e10:	e7bd      	b.n	8008d8e <_printf_i+0x12a>
 8008e12:	6833      	ldr	r3, [r6, #0]
 8008e14:	6825      	ldr	r5, [r4, #0]
 8008e16:	1d18      	adds	r0, r3, #4
 8008e18:	6961      	ldr	r1, [r4, #20]
 8008e1a:	6030      	str	r0, [r6, #0]
 8008e1c:	062e      	lsls	r6, r5, #24
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	d501      	bpl.n	8008e26 <_printf_i+0x1c2>
 8008e22:	6019      	str	r1, [r3, #0]
 8008e24:	e002      	b.n	8008e2c <_printf_i+0x1c8>
 8008e26:	0668      	lsls	r0, r5, #25
 8008e28:	d5fb      	bpl.n	8008e22 <_printf_i+0x1be>
 8008e2a:	8019      	strh	r1, [r3, #0]
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	4616      	mov	r6, r2
 8008e30:	6123      	str	r3, [r4, #16]
 8008e32:	e7bc      	b.n	8008dae <_printf_i+0x14a>
 8008e34:	6833      	ldr	r3, [r6, #0]
 8008e36:	2100      	movs	r1, #0
 8008e38:	1d1a      	adds	r2, r3, #4
 8008e3a:	6032      	str	r2, [r6, #0]
 8008e3c:	681e      	ldr	r6, [r3, #0]
 8008e3e:	6862      	ldr	r2, [r4, #4]
 8008e40:	4630      	mov	r0, r6
 8008e42:	f000 fbf6 	bl	8009632 <memchr>
 8008e46:	b108      	cbz	r0, 8008e4c <_printf_i+0x1e8>
 8008e48:	1b80      	subs	r0, r0, r6
 8008e4a:	6060      	str	r0, [r4, #4]
 8008e4c:	6863      	ldr	r3, [r4, #4]
 8008e4e:	6123      	str	r3, [r4, #16]
 8008e50:	2300      	movs	r3, #0
 8008e52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e56:	e7aa      	b.n	8008dae <_printf_i+0x14a>
 8008e58:	4632      	mov	r2, r6
 8008e5a:	4649      	mov	r1, r9
 8008e5c:	4640      	mov	r0, r8
 8008e5e:	6923      	ldr	r3, [r4, #16]
 8008e60:	47d0      	blx	sl
 8008e62:	3001      	adds	r0, #1
 8008e64:	d0ad      	beq.n	8008dc2 <_printf_i+0x15e>
 8008e66:	6823      	ldr	r3, [r4, #0]
 8008e68:	079b      	lsls	r3, r3, #30
 8008e6a:	d413      	bmi.n	8008e94 <_printf_i+0x230>
 8008e6c:	68e0      	ldr	r0, [r4, #12]
 8008e6e:	9b03      	ldr	r3, [sp, #12]
 8008e70:	4298      	cmp	r0, r3
 8008e72:	bfb8      	it	lt
 8008e74:	4618      	movlt	r0, r3
 8008e76:	e7a6      	b.n	8008dc6 <_printf_i+0x162>
 8008e78:	2301      	movs	r3, #1
 8008e7a:	4632      	mov	r2, r6
 8008e7c:	4649      	mov	r1, r9
 8008e7e:	4640      	mov	r0, r8
 8008e80:	47d0      	blx	sl
 8008e82:	3001      	adds	r0, #1
 8008e84:	d09d      	beq.n	8008dc2 <_printf_i+0x15e>
 8008e86:	3501      	adds	r5, #1
 8008e88:	68e3      	ldr	r3, [r4, #12]
 8008e8a:	9903      	ldr	r1, [sp, #12]
 8008e8c:	1a5b      	subs	r3, r3, r1
 8008e8e:	42ab      	cmp	r3, r5
 8008e90:	dcf2      	bgt.n	8008e78 <_printf_i+0x214>
 8008e92:	e7eb      	b.n	8008e6c <_printf_i+0x208>
 8008e94:	2500      	movs	r5, #0
 8008e96:	f104 0619 	add.w	r6, r4, #25
 8008e9a:	e7f5      	b.n	8008e88 <_printf_i+0x224>
 8008e9c:	0800cd40 	.word	0x0800cd40
 8008ea0:	0800cd51 	.word	0x0800cd51

08008ea4 <_scanf_float>:
 8008ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea8:	b087      	sub	sp, #28
 8008eaa:	9303      	str	r3, [sp, #12]
 8008eac:	688b      	ldr	r3, [r1, #8]
 8008eae:	4617      	mov	r7, r2
 8008eb0:	1e5a      	subs	r2, r3, #1
 8008eb2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008eb6:	bf82      	ittt	hi
 8008eb8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008ebc:	eb03 0b05 	addhi.w	fp, r3, r5
 8008ec0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008ec4:	460a      	mov	r2, r1
 8008ec6:	f04f 0500 	mov.w	r5, #0
 8008eca:	bf88      	it	hi
 8008ecc:	608b      	strhi	r3, [r1, #8]
 8008ece:	680b      	ldr	r3, [r1, #0]
 8008ed0:	4680      	mov	r8, r0
 8008ed2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008ed6:	f842 3b1c 	str.w	r3, [r2], #28
 8008eda:	460c      	mov	r4, r1
 8008edc:	bf98      	it	ls
 8008ede:	f04f 0b00 	movls.w	fp, #0
 8008ee2:	4616      	mov	r6, r2
 8008ee4:	46aa      	mov	sl, r5
 8008ee6:	46a9      	mov	r9, r5
 8008ee8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008eec:	9201      	str	r2, [sp, #4]
 8008eee:	9502      	str	r5, [sp, #8]
 8008ef0:	68a2      	ldr	r2, [r4, #8]
 8008ef2:	b152      	cbz	r2, 8008f0a <_scanf_float+0x66>
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	2b4e      	cmp	r3, #78	@ 0x4e
 8008efa:	d865      	bhi.n	8008fc8 <_scanf_float+0x124>
 8008efc:	2b40      	cmp	r3, #64	@ 0x40
 8008efe:	d83d      	bhi.n	8008f7c <_scanf_float+0xd8>
 8008f00:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008f04:	b2c8      	uxtb	r0, r1
 8008f06:	280e      	cmp	r0, #14
 8008f08:	d93b      	bls.n	8008f82 <_scanf_float+0xde>
 8008f0a:	f1b9 0f00 	cmp.w	r9, #0
 8008f0e:	d003      	beq.n	8008f18 <_scanf_float+0x74>
 8008f10:	6823      	ldr	r3, [r4, #0]
 8008f12:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f16:	6023      	str	r3, [r4, #0]
 8008f18:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f1c:	f1ba 0f01 	cmp.w	sl, #1
 8008f20:	f200 8118 	bhi.w	8009154 <_scanf_float+0x2b0>
 8008f24:	9b01      	ldr	r3, [sp, #4]
 8008f26:	429e      	cmp	r6, r3
 8008f28:	f200 8109 	bhi.w	800913e <_scanf_float+0x29a>
 8008f2c:	2001      	movs	r0, #1
 8008f2e:	b007      	add	sp, #28
 8008f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f34:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008f38:	2a0d      	cmp	r2, #13
 8008f3a:	d8e6      	bhi.n	8008f0a <_scanf_float+0x66>
 8008f3c:	a101      	add	r1, pc, #4	@ (adr r1, 8008f44 <_scanf_float+0xa0>)
 8008f3e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008f42:	bf00      	nop
 8008f44:	0800908b 	.word	0x0800908b
 8008f48:	08008f0b 	.word	0x08008f0b
 8008f4c:	08008f0b 	.word	0x08008f0b
 8008f50:	08008f0b 	.word	0x08008f0b
 8008f54:	080090eb 	.word	0x080090eb
 8008f58:	080090c3 	.word	0x080090c3
 8008f5c:	08008f0b 	.word	0x08008f0b
 8008f60:	08008f0b 	.word	0x08008f0b
 8008f64:	08009099 	.word	0x08009099
 8008f68:	08008f0b 	.word	0x08008f0b
 8008f6c:	08008f0b 	.word	0x08008f0b
 8008f70:	08008f0b 	.word	0x08008f0b
 8008f74:	08008f0b 	.word	0x08008f0b
 8008f78:	08009051 	.word	0x08009051
 8008f7c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008f80:	e7da      	b.n	8008f38 <_scanf_float+0x94>
 8008f82:	290e      	cmp	r1, #14
 8008f84:	d8c1      	bhi.n	8008f0a <_scanf_float+0x66>
 8008f86:	a001      	add	r0, pc, #4	@ (adr r0, 8008f8c <_scanf_float+0xe8>)
 8008f88:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008f8c:	08009041 	.word	0x08009041
 8008f90:	08008f0b 	.word	0x08008f0b
 8008f94:	08009041 	.word	0x08009041
 8008f98:	080090d7 	.word	0x080090d7
 8008f9c:	08008f0b 	.word	0x08008f0b
 8008fa0:	08008fe9 	.word	0x08008fe9
 8008fa4:	08009027 	.word	0x08009027
 8008fa8:	08009027 	.word	0x08009027
 8008fac:	08009027 	.word	0x08009027
 8008fb0:	08009027 	.word	0x08009027
 8008fb4:	08009027 	.word	0x08009027
 8008fb8:	08009027 	.word	0x08009027
 8008fbc:	08009027 	.word	0x08009027
 8008fc0:	08009027 	.word	0x08009027
 8008fc4:	08009027 	.word	0x08009027
 8008fc8:	2b6e      	cmp	r3, #110	@ 0x6e
 8008fca:	d809      	bhi.n	8008fe0 <_scanf_float+0x13c>
 8008fcc:	2b60      	cmp	r3, #96	@ 0x60
 8008fce:	d8b1      	bhi.n	8008f34 <_scanf_float+0x90>
 8008fd0:	2b54      	cmp	r3, #84	@ 0x54
 8008fd2:	d07b      	beq.n	80090cc <_scanf_float+0x228>
 8008fd4:	2b59      	cmp	r3, #89	@ 0x59
 8008fd6:	d198      	bne.n	8008f0a <_scanf_float+0x66>
 8008fd8:	2d07      	cmp	r5, #7
 8008fda:	d196      	bne.n	8008f0a <_scanf_float+0x66>
 8008fdc:	2508      	movs	r5, #8
 8008fde:	e02c      	b.n	800903a <_scanf_float+0x196>
 8008fe0:	2b74      	cmp	r3, #116	@ 0x74
 8008fe2:	d073      	beq.n	80090cc <_scanf_float+0x228>
 8008fe4:	2b79      	cmp	r3, #121	@ 0x79
 8008fe6:	e7f6      	b.n	8008fd6 <_scanf_float+0x132>
 8008fe8:	6821      	ldr	r1, [r4, #0]
 8008fea:	05c8      	lsls	r0, r1, #23
 8008fec:	d51b      	bpl.n	8009026 <_scanf_float+0x182>
 8008fee:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008ff2:	6021      	str	r1, [r4, #0]
 8008ff4:	f109 0901 	add.w	r9, r9, #1
 8008ff8:	f1bb 0f00 	cmp.w	fp, #0
 8008ffc:	d003      	beq.n	8009006 <_scanf_float+0x162>
 8008ffe:	3201      	adds	r2, #1
 8009000:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009004:	60a2      	str	r2, [r4, #8]
 8009006:	68a3      	ldr	r3, [r4, #8]
 8009008:	3b01      	subs	r3, #1
 800900a:	60a3      	str	r3, [r4, #8]
 800900c:	6923      	ldr	r3, [r4, #16]
 800900e:	3301      	adds	r3, #1
 8009010:	6123      	str	r3, [r4, #16]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	3b01      	subs	r3, #1
 8009016:	2b00      	cmp	r3, #0
 8009018:	607b      	str	r3, [r7, #4]
 800901a:	f340 8087 	ble.w	800912c <_scanf_float+0x288>
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	3301      	adds	r3, #1
 8009022:	603b      	str	r3, [r7, #0]
 8009024:	e764      	b.n	8008ef0 <_scanf_float+0x4c>
 8009026:	eb1a 0105 	adds.w	r1, sl, r5
 800902a:	f47f af6e 	bne.w	8008f0a <_scanf_float+0x66>
 800902e:	460d      	mov	r5, r1
 8009030:	468a      	mov	sl, r1
 8009032:	6822      	ldr	r2, [r4, #0]
 8009034:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009038:	6022      	str	r2, [r4, #0]
 800903a:	f806 3b01 	strb.w	r3, [r6], #1
 800903e:	e7e2      	b.n	8009006 <_scanf_float+0x162>
 8009040:	6822      	ldr	r2, [r4, #0]
 8009042:	0610      	lsls	r0, r2, #24
 8009044:	f57f af61 	bpl.w	8008f0a <_scanf_float+0x66>
 8009048:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800904c:	6022      	str	r2, [r4, #0]
 800904e:	e7f4      	b.n	800903a <_scanf_float+0x196>
 8009050:	f1ba 0f00 	cmp.w	sl, #0
 8009054:	d10e      	bne.n	8009074 <_scanf_float+0x1d0>
 8009056:	f1b9 0f00 	cmp.w	r9, #0
 800905a:	d10e      	bne.n	800907a <_scanf_float+0x1d6>
 800905c:	6822      	ldr	r2, [r4, #0]
 800905e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009062:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009066:	d108      	bne.n	800907a <_scanf_float+0x1d6>
 8009068:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800906c:	f04f 0a01 	mov.w	sl, #1
 8009070:	6022      	str	r2, [r4, #0]
 8009072:	e7e2      	b.n	800903a <_scanf_float+0x196>
 8009074:	f1ba 0f02 	cmp.w	sl, #2
 8009078:	d055      	beq.n	8009126 <_scanf_float+0x282>
 800907a:	2d01      	cmp	r5, #1
 800907c:	d002      	beq.n	8009084 <_scanf_float+0x1e0>
 800907e:	2d04      	cmp	r5, #4
 8009080:	f47f af43 	bne.w	8008f0a <_scanf_float+0x66>
 8009084:	3501      	adds	r5, #1
 8009086:	b2ed      	uxtb	r5, r5
 8009088:	e7d7      	b.n	800903a <_scanf_float+0x196>
 800908a:	f1ba 0f01 	cmp.w	sl, #1
 800908e:	f47f af3c 	bne.w	8008f0a <_scanf_float+0x66>
 8009092:	f04f 0a02 	mov.w	sl, #2
 8009096:	e7d0      	b.n	800903a <_scanf_float+0x196>
 8009098:	b97d      	cbnz	r5, 80090ba <_scanf_float+0x216>
 800909a:	f1b9 0f00 	cmp.w	r9, #0
 800909e:	f47f af37 	bne.w	8008f10 <_scanf_float+0x6c>
 80090a2:	6822      	ldr	r2, [r4, #0]
 80090a4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80090a8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80090ac:	f040 8103 	bne.w	80092b6 <_scanf_float+0x412>
 80090b0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80090b4:	2501      	movs	r5, #1
 80090b6:	6022      	str	r2, [r4, #0]
 80090b8:	e7bf      	b.n	800903a <_scanf_float+0x196>
 80090ba:	2d03      	cmp	r5, #3
 80090bc:	d0e2      	beq.n	8009084 <_scanf_float+0x1e0>
 80090be:	2d05      	cmp	r5, #5
 80090c0:	e7de      	b.n	8009080 <_scanf_float+0x1dc>
 80090c2:	2d02      	cmp	r5, #2
 80090c4:	f47f af21 	bne.w	8008f0a <_scanf_float+0x66>
 80090c8:	2503      	movs	r5, #3
 80090ca:	e7b6      	b.n	800903a <_scanf_float+0x196>
 80090cc:	2d06      	cmp	r5, #6
 80090ce:	f47f af1c 	bne.w	8008f0a <_scanf_float+0x66>
 80090d2:	2507      	movs	r5, #7
 80090d4:	e7b1      	b.n	800903a <_scanf_float+0x196>
 80090d6:	6822      	ldr	r2, [r4, #0]
 80090d8:	0591      	lsls	r1, r2, #22
 80090da:	f57f af16 	bpl.w	8008f0a <_scanf_float+0x66>
 80090de:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80090e2:	6022      	str	r2, [r4, #0]
 80090e4:	f8cd 9008 	str.w	r9, [sp, #8]
 80090e8:	e7a7      	b.n	800903a <_scanf_float+0x196>
 80090ea:	6822      	ldr	r2, [r4, #0]
 80090ec:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80090f0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80090f4:	d006      	beq.n	8009104 <_scanf_float+0x260>
 80090f6:	0550      	lsls	r0, r2, #21
 80090f8:	f57f af07 	bpl.w	8008f0a <_scanf_float+0x66>
 80090fc:	f1b9 0f00 	cmp.w	r9, #0
 8009100:	f000 80d9 	beq.w	80092b6 <_scanf_float+0x412>
 8009104:	0591      	lsls	r1, r2, #22
 8009106:	bf58      	it	pl
 8009108:	9902      	ldrpl	r1, [sp, #8]
 800910a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800910e:	bf58      	it	pl
 8009110:	eba9 0101 	subpl.w	r1, r9, r1
 8009114:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009118:	f04f 0900 	mov.w	r9, #0
 800911c:	bf58      	it	pl
 800911e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009122:	6022      	str	r2, [r4, #0]
 8009124:	e789      	b.n	800903a <_scanf_float+0x196>
 8009126:	f04f 0a03 	mov.w	sl, #3
 800912a:	e786      	b.n	800903a <_scanf_float+0x196>
 800912c:	4639      	mov	r1, r7
 800912e:	4640      	mov	r0, r8
 8009130:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009134:	4798      	blx	r3
 8009136:	2800      	cmp	r0, #0
 8009138:	f43f aeda 	beq.w	8008ef0 <_scanf_float+0x4c>
 800913c:	e6e5      	b.n	8008f0a <_scanf_float+0x66>
 800913e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009142:	463a      	mov	r2, r7
 8009144:	4640      	mov	r0, r8
 8009146:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800914a:	4798      	blx	r3
 800914c:	6923      	ldr	r3, [r4, #16]
 800914e:	3b01      	subs	r3, #1
 8009150:	6123      	str	r3, [r4, #16]
 8009152:	e6e7      	b.n	8008f24 <_scanf_float+0x80>
 8009154:	1e6b      	subs	r3, r5, #1
 8009156:	2b06      	cmp	r3, #6
 8009158:	d824      	bhi.n	80091a4 <_scanf_float+0x300>
 800915a:	2d02      	cmp	r5, #2
 800915c:	d836      	bhi.n	80091cc <_scanf_float+0x328>
 800915e:	9b01      	ldr	r3, [sp, #4]
 8009160:	429e      	cmp	r6, r3
 8009162:	f67f aee3 	bls.w	8008f2c <_scanf_float+0x88>
 8009166:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800916a:	463a      	mov	r2, r7
 800916c:	4640      	mov	r0, r8
 800916e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009172:	4798      	blx	r3
 8009174:	6923      	ldr	r3, [r4, #16]
 8009176:	3b01      	subs	r3, #1
 8009178:	6123      	str	r3, [r4, #16]
 800917a:	e7f0      	b.n	800915e <_scanf_float+0x2ba>
 800917c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009180:	463a      	mov	r2, r7
 8009182:	4640      	mov	r0, r8
 8009184:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009188:	4798      	blx	r3
 800918a:	6923      	ldr	r3, [r4, #16]
 800918c:	3b01      	subs	r3, #1
 800918e:	6123      	str	r3, [r4, #16]
 8009190:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009194:	fa5f fa8a 	uxtb.w	sl, sl
 8009198:	f1ba 0f02 	cmp.w	sl, #2
 800919c:	d1ee      	bne.n	800917c <_scanf_float+0x2d8>
 800919e:	3d03      	subs	r5, #3
 80091a0:	b2ed      	uxtb	r5, r5
 80091a2:	1b76      	subs	r6, r6, r5
 80091a4:	6823      	ldr	r3, [r4, #0]
 80091a6:	05da      	lsls	r2, r3, #23
 80091a8:	d530      	bpl.n	800920c <_scanf_float+0x368>
 80091aa:	055b      	lsls	r3, r3, #21
 80091ac:	d511      	bpl.n	80091d2 <_scanf_float+0x32e>
 80091ae:	9b01      	ldr	r3, [sp, #4]
 80091b0:	429e      	cmp	r6, r3
 80091b2:	f67f aebb 	bls.w	8008f2c <_scanf_float+0x88>
 80091b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80091ba:	463a      	mov	r2, r7
 80091bc:	4640      	mov	r0, r8
 80091be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80091c2:	4798      	blx	r3
 80091c4:	6923      	ldr	r3, [r4, #16]
 80091c6:	3b01      	subs	r3, #1
 80091c8:	6123      	str	r3, [r4, #16]
 80091ca:	e7f0      	b.n	80091ae <_scanf_float+0x30a>
 80091cc:	46aa      	mov	sl, r5
 80091ce:	46b3      	mov	fp, r6
 80091d0:	e7de      	b.n	8009190 <_scanf_float+0x2ec>
 80091d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80091d6:	6923      	ldr	r3, [r4, #16]
 80091d8:	2965      	cmp	r1, #101	@ 0x65
 80091da:	f103 33ff 	add.w	r3, r3, #4294967295
 80091de:	f106 35ff 	add.w	r5, r6, #4294967295
 80091e2:	6123      	str	r3, [r4, #16]
 80091e4:	d00c      	beq.n	8009200 <_scanf_float+0x35c>
 80091e6:	2945      	cmp	r1, #69	@ 0x45
 80091e8:	d00a      	beq.n	8009200 <_scanf_float+0x35c>
 80091ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80091ee:	463a      	mov	r2, r7
 80091f0:	4640      	mov	r0, r8
 80091f2:	4798      	blx	r3
 80091f4:	6923      	ldr	r3, [r4, #16]
 80091f6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80091fa:	3b01      	subs	r3, #1
 80091fc:	1eb5      	subs	r5, r6, #2
 80091fe:	6123      	str	r3, [r4, #16]
 8009200:	463a      	mov	r2, r7
 8009202:	4640      	mov	r0, r8
 8009204:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009208:	4798      	blx	r3
 800920a:	462e      	mov	r6, r5
 800920c:	6822      	ldr	r2, [r4, #0]
 800920e:	f012 0210 	ands.w	r2, r2, #16
 8009212:	d001      	beq.n	8009218 <_scanf_float+0x374>
 8009214:	2000      	movs	r0, #0
 8009216:	e68a      	b.n	8008f2e <_scanf_float+0x8a>
 8009218:	7032      	strb	r2, [r6, #0]
 800921a:	6823      	ldr	r3, [r4, #0]
 800921c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009220:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009224:	d11c      	bne.n	8009260 <_scanf_float+0x3bc>
 8009226:	9b02      	ldr	r3, [sp, #8]
 8009228:	454b      	cmp	r3, r9
 800922a:	eba3 0209 	sub.w	r2, r3, r9
 800922e:	d123      	bne.n	8009278 <_scanf_float+0x3d4>
 8009230:	2200      	movs	r2, #0
 8009232:	4640      	mov	r0, r8
 8009234:	9901      	ldr	r1, [sp, #4]
 8009236:	f002 fc0f 	bl	800ba58 <_strtod_r>
 800923a:	9b03      	ldr	r3, [sp, #12]
 800923c:	6825      	ldr	r5, [r4, #0]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f015 0f02 	tst.w	r5, #2
 8009244:	4606      	mov	r6, r0
 8009246:	460f      	mov	r7, r1
 8009248:	f103 0204 	add.w	r2, r3, #4
 800924c:	d01f      	beq.n	800928e <_scanf_float+0x3ea>
 800924e:	9903      	ldr	r1, [sp, #12]
 8009250:	600a      	str	r2, [r1, #0]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	e9c3 6700 	strd	r6, r7, [r3]
 8009258:	68e3      	ldr	r3, [r4, #12]
 800925a:	3301      	adds	r3, #1
 800925c:	60e3      	str	r3, [r4, #12]
 800925e:	e7d9      	b.n	8009214 <_scanf_float+0x370>
 8009260:	9b04      	ldr	r3, [sp, #16]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d0e4      	beq.n	8009230 <_scanf_float+0x38c>
 8009266:	9905      	ldr	r1, [sp, #20]
 8009268:	230a      	movs	r3, #10
 800926a:	4640      	mov	r0, r8
 800926c:	3101      	adds	r1, #1
 800926e:	f002 fc73 	bl	800bb58 <_strtol_r>
 8009272:	9b04      	ldr	r3, [sp, #16]
 8009274:	9e05      	ldr	r6, [sp, #20]
 8009276:	1ac2      	subs	r2, r0, r3
 8009278:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800927c:	429e      	cmp	r6, r3
 800927e:	bf28      	it	cs
 8009280:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009284:	4630      	mov	r0, r6
 8009286:	490d      	ldr	r1, [pc, #52]	@ (80092bc <_scanf_float+0x418>)
 8009288:	f000 f8f0 	bl	800946c <siprintf>
 800928c:	e7d0      	b.n	8009230 <_scanf_float+0x38c>
 800928e:	076d      	lsls	r5, r5, #29
 8009290:	d4dd      	bmi.n	800924e <_scanf_float+0x3aa>
 8009292:	9d03      	ldr	r5, [sp, #12]
 8009294:	602a      	str	r2, [r5, #0]
 8009296:	681d      	ldr	r5, [r3, #0]
 8009298:	4602      	mov	r2, r0
 800929a:	460b      	mov	r3, r1
 800929c:	f7f7 fbb6 	bl	8000a0c <__aeabi_dcmpun>
 80092a0:	b120      	cbz	r0, 80092ac <_scanf_float+0x408>
 80092a2:	4807      	ldr	r0, [pc, #28]	@ (80092c0 <_scanf_float+0x41c>)
 80092a4:	f000 f9e2 	bl	800966c <nanf>
 80092a8:	6028      	str	r0, [r5, #0]
 80092aa:	e7d5      	b.n	8009258 <_scanf_float+0x3b4>
 80092ac:	4630      	mov	r0, r6
 80092ae:	4639      	mov	r1, r7
 80092b0:	f7f7 fc0a 	bl	8000ac8 <__aeabi_d2f>
 80092b4:	e7f8      	b.n	80092a8 <_scanf_float+0x404>
 80092b6:	f04f 0900 	mov.w	r9, #0
 80092ba:	e62d      	b.n	8008f18 <_scanf_float+0x74>
 80092bc:	0800cd62 	.word	0x0800cd62
 80092c0:	0800d0fd 	.word	0x0800d0fd

080092c4 <std>:
 80092c4:	2300      	movs	r3, #0
 80092c6:	b510      	push	{r4, lr}
 80092c8:	4604      	mov	r4, r0
 80092ca:	e9c0 3300 	strd	r3, r3, [r0]
 80092ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80092d2:	6083      	str	r3, [r0, #8]
 80092d4:	8181      	strh	r1, [r0, #12]
 80092d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80092d8:	81c2      	strh	r2, [r0, #14]
 80092da:	6183      	str	r3, [r0, #24]
 80092dc:	4619      	mov	r1, r3
 80092de:	2208      	movs	r2, #8
 80092e0:	305c      	adds	r0, #92	@ 0x5c
 80092e2:	f000 f926 	bl	8009532 <memset>
 80092e6:	4b0d      	ldr	r3, [pc, #52]	@ (800931c <std+0x58>)
 80092e8:	6224      	str	r4, [r4, #32]
 80092ea:	6263      	str	r3, [r4, #36]	@ 0x24
 80092ec:	4b0c      	ldr	r3, [pc, #48]	@ (8009320 <std+0x5c>)
 80092ee:	62a3      	str	r3, [r4, #40]	@ 0x28
 80092f0:	4b0c      	ldr	r3, [pc, #48]	@ (8009324 <std+0x60>)
 80092f2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80092f4:	4b0c      	ldr	r3, [pc, #48]	@ (8009328 <std+0x64>)
 80092f6:	6323      	str	r3, [r4, #48]	@ 0x30
 80092f8:	4b0c      	ldr	r3, [pc, #48]	@ (800932c <std+0x68>)
 80092fa:	429c      	cmp	r4, r3
 80092fc:	d006      	beq.n	800930c <std+0x48>
 80092fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009302:	4294      	cmp	r4, r2
 8009304:	d002      	beq.n	800930c <std+0x48>
 8009306:	33d0      	adds	r3, #208	@ 0xd0
 8009308:	429c      	cmp	r4, r3
 800930a:	d105      	bne.n	8009318 <std+0x54>
 800930c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009314:	f000 b98a 	b.w	800962c <__retarget_lock_init_recursive>
 8009318:	bd10      	pop	{r4, pc}
 800931a:	bf00      	nop
 800931c:	080094ad 	.word	0x080094ad
 8009320:	080094cf 	.word	0x080094cf
 8009324:	08009507 	.word	0x08009507
 8009328:	0800952b 	.word	0x0800952b
 800932c:	20000bf8 	.word	0x20000bf8

08009330 <stdio_exit_handler>:
 8009330:	4a02      	ldr	r2, [pc, #8]	@ (800933c <stdio_exit_handler+0xc>)
 8009332:	4903      	ldr	r1, [pc, #12]	@ (8009340 <stdio_exit_handler+0x10>)
 8009334:	4803      	ldr	r0, [pc, #12]	@ (8009344 <stdio_exit_handler+0x14>)
 8009336:	f000 b869 	b.w	800940c <_fwalk_sglue>
 800933a:	bf00      	nop
 800933c:	20000070 	.word	0x20000070
 8009340:	0800c18d 	.word	0x0800c18d
 8009344:	20000080 	.word	0x20000080

08009348 <cleanup_stdio>:
 8009348:	6841      	ldr	r1, [r0, #4]
 800934a:	4b0c      	ldr	r3, [pc, #48]	@ (800937c <cleanup_stdio+0x34>)
 800934c:	b510      	push	{r4, lr}
 800934e:	4299      	cmp	r1, r3
 8009350:	4604      	mov	r4, r0
 8009352:	d001      	beq.n	8009358 <cleanup_stdio+0x10>
 8009354:	f002 ff1a 	bl	800c18c <_fflush_r>
 8009358:	68a1      	ldr	r1, [r4, #8]
 800935a:	4b09      	ldr	r3, [pc, #36]	@ (8009380 <cleanup_stdio+0x38>)
 800935c:	4299      	cmp	r1, r3
 800935e:	d002      	beq.n	8009366 <cleanup_stdio+0x1e>
 8009360:	4620      	mov	r0, r4
 8009362:	f002 ff13 	bl	800c18c <_fflush_r>
 8009366:	68e1      	ldr	r1, [r4, #12]
 8009368:	4b06      	ldr	r3, [pc, #24]	@ (8009384 <cleanup_stdio+0x3c>)
 800936a:	4299      	cmp	r1, r3
 800936c:	d004      	beq.n	8009378 <cleanup_stdio+0x30>
 800936e:	4620      	mov	r0, r4
 8009370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009374:	f002 bf0a 	b.w	800c18c <_fflush_r>
 8009378:	bd10      	pop	{r4, pc}
 800937a:	bf00      	nop
 800937c:	20000bf8 	.word	0x20000bf8
 8009380:	20000c60 	.word	0x20000c60
 8009384:	20000cc8 	.word	0x20000cc8

08009388 <global_stdio_init.part.0>:
 8009388:	b510      	push	{r4, lr}
 800938a:	4b0b      	ldr	r3, [pc, #44]	@ (80093b8 <global_stdio_init.part.0+0x30>)
 800938c:	4c0b      	ldr	r4, [pc, #44]	@ (80093bc <global_stdio_init.part.0+0x34>)
 800938e:	4a0c      	ldr	r2, [pc, #48]	@ (80093c0 <global_stdio_init.part.0+0x38>)
 8009390:	4620      	mov	r0, r4
 8009392:	601a      	str	r2, [r3, #0]
 8009394:	2104      	movs	r1, #4
 8009396:	2200      	movs	r2, #0
 8009398:	f7ff ff94 	bl	80092c4 <std>
 800939c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80093a0:	2201      	movs	r2, #1
 80093a2:	2109      	movs	r1, #9
 80093a4:	f7ff ff8e 	bl	80092c4 <std>
 80093a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80093ac:	2202      	movs	r2, #2
 80093ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093b2:	2112      	movs	r1, #18
 80093b4:	f7ff bf86 	b.w	80092c4 <std>
 80093b8:	20000d30 	.word	0x20000d30
 80093bc:	20000bf8 	.word	0x20000bf8
 80093c0:	08009331 	.word	0x08009331

080093c4 <__sfp_lock_acquire>:
 80093c4:	4801      	ldr	r0, [pc, #4]	@ (80093cc <__sfp_lock_acquire+0x8>)
 80093c6:	f000 b932 	b.w	800962e <__retarget_lock_acquire_recursive>
 80093ca:	bf00      	nop
 80093cc:	20000d39 	.word	0x20000d39

080093d0 <__sfp_lock_release>:
 80093d0:	4801      	ldr	r0, [pc, #4]	@ (80093d8 <__sfp_lock_release+0x8>)
 80093d2:	f000 b92d 	b.w	8009630 <__retarget_lock_release_recursive>
 80093d6:	bf00      	nop
 80093d8:	20000d39 	.word	0x20000d39

080093dc <__sinit>:
 80093dc:	b510      	push	{r4, lr}
 80093de:	4604      	mov	r4, r0
 80093e0:	f7ff fff0 	bl	80093c4 <__sfp_lock_acquire>
 80093e4:	6a23      	ldr	r3, [r4, #32]
 80093e6:	b11b      	cbz	r3, 80093f0 <__sinit+0x14>
 80093e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093ec:	f7ff bff0 	b.w	80093d0 <__sfp_lock_release>
 80093f0:	4b04      	ldr	r3, [pc, #16]	@ (8009404 <__sinit+0x28>)
 80093f2:	6223      	str	r3, [r4, #32]
 80093f4:	4b04      	ldr	r3, [pc, #16]	@ (8009408 <__sinit+0x2c>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d1f5      	bne.n	80093e8 <__sinit+0xc>
 80093fc:	f7ff ffc4 	bl	8009388 <global_stdio_init.part.0>
 8009400:	e7f2      	b.n	80093e8 <__sinit+0xc>
 8009402:	bf00      	nop
 8009404:	08009349 	.word	0x08009349
 8009408:	20000d30 	.word	0x20000d30

0800940c <_fwalk_sglue>:
 800940c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009410:	4607      	mov	r7, r0
 8009412:	4688      	mov	r8, r1
 8009414:	4614      	mov	r4, r2
 8009416:	2600      	movs	r6, #0
 8009418:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800941c:	f1b9 0901 	subs.w	r9, r9, #1
 8009420:	d505      	bpl.n	800942e <_fwalk_sglue+0x22>
 8009422:	6824      	ldr	r4, [r4, #0]
 8009424:	2c00      	cmp	r4, #0
 8009426:	d1f7      	bne.n	8009418 <_fwalk_sglue+0xc>
 8009428:	4630      	mov	r0, r6
 800942a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800942e:	89ab      	ldrh	r3, [r5, #12]
 8009430:	2b01      	cmp	r3, #1
 8009432:	d907      	bls.n	8009444 <_fwalk_sglue+0x38>
 8009434:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009438:	3301      	adds	r3, #1
 800943a:	d003      	beq.n	8009444 <_fwalk_sglue+0x38>
 800943c:	4629      	mov	r1, r5
 800943e:	4638      	mov	r0, r7
 8009440:	47c0      	blx	r8
 8009442:	4306      	orrs	r6, r0
 8009444:	3568      	adds	r5, #104	@ 0x68
 8009446:	e7e9      	b.n	800941c <_fwalk_sglue+0x10>

08009448 <iprintf>:
 8009448:	b40f      	push	{r0, r1, r2, r3}
 800944a:	b507      	push	{r0, r1, r2, lr}
 800944c:	4906      	ldr	r1, [pc, #24]	@ (8009468 <iprintf+0x20>)
 800944e:	ab04      	add	r3, sp, #16
 8009450:	6808      	ldr	r0, [r1, #0]
 8009452:	f853 2b04 	ldr.w	r2, [r3], #4
 8009456:	6881      	ldr	r1, [r0, #8]
 8009458:	9301      	str	r3, [sp, #4]
 800945a:	f002 fcff 	bl	800be5c <_vfiprintf_r>
 800945e:	b003      	add	sp, #12
 8009460:	f85d eb04 	ldr.w	lr, [sp], #4
 8009464:	b004      	add	sp, #16
 8009466:	4770      	bx	lr
 8009468:	2000007c 	.word	0x2000007c

0800946c <siprintf>:
 800946c:	b40e      	push	{r1, r2, r3}
 800946e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009472:	b500      	push	{lr}
 8009474:	b09c      	sub	sp, #112	@ 0x70
 8009476:	ab1d      	add	r3, sp, #116	@ 0x74
 8009478:	9002      	str	r0, [sp, #8]
 800947a:	9006      	str	r0, [sp, #24]
 800947c:	9107      	str	r1, [sp, #28]
 800947e:	9104      	str	r1, [sp, #16]
 8009480:	4808      	ldr	r0, [pc, #32]	@ (80094a4 <siprintf+0x38>)
 8009482:	4909      	ldr	r1, [pc, #36]	@ (80094a8 <siprintf+0x3c>)
 8009484:	f853 2b04 	ldr.w	r2, [r3], #4
 8009488:	9105      	str	r1, [sp, #20]
 800948a:	6800      	ldr	r0, [r0, #0]
 800948c:	a902      	add	r1, sp, #8
 800948e:	9301      	str	r3, [sp, #4]
 8009490:	f002 fbc0 	bl	800bc14 <_svfiprintf_r>
 8009494:	2200      	movs	r2, #0
 8009496:	9b02      	ldr	r3, [sp, #8]
 8009498:	701a      	strb	r2, [r3, #0]
 800949a:	b01c      	add	sp, #112	@ 0x70
 800949c:	f85d eb04 	ldr.w	lr, [sp], #4
 80094a0:	b003      	add	sp, #12
 80094a2:	4770      	bx	lr
 80094a4:	2000007c 	.word	0x2000007c
 80094a8:	ffff0208 	.word	0xffff0208

080094ac <__sread>:
 80094ac:	b510      	push	{r4, lr}
 80094ae:	460c      	mov	r4, r1
 80094b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094b4:	f000 f86c 	bl	8009590 <_read_r>
 80094b8:	2800      	cmp	r0, #0
 80094ba:	bfab      	itete	ge
 80094bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80094be:	89a3      	ldrhlt	r3, [r4, #12]
 80094c0:	181b      	addge	r3, r3, r0
 80094c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80094c6:	bfac      	ite	ge
 80094c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80094ca:	81a3      	strhlt	r3, [r4, #12]
 80094cc:	bd10      	pop	{r4, pc}

080094ce <__swrite>:
 80094ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094d2:	461f      	mov	r7, r3
 80094d4:	898b      	ldrh	r3, [r1, #12]
 80094d6:	4605      	mov	r5, r0
 80094d8:	05db      	lsls	r3, r3, #23
 80094da:	460c      	mov	r4, r1
 80094dc:	4616      	mov	r6, r2
 80094de:	d505      	bpl.n	80094ec <__swrite+0x1e>
 80094e0:	2302      	movs	r3, #2
 80094e2:	2200      	movs	r2, #0
 80094e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094e8:	f000 f840 	bl	800956c <_lseek_r>
 80094ec:	89a3      	ldrh	r3, [r4, #12]
 80094ee:	4632      	mov	r2, r6
 80094f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80094f4:	81a3      	strh	r3, [r4, #12]
 80094f6:	4628      	mov	r0, r5
 80094f8:	463b      	mov	r3, r7
 80094fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009502:	f000 b857 	b.w	80095b4 <_write_r>

08009506 <__sseek>:
 8009506:	b510      	push	{r4, lr}
 8009508:	460c      	mov	r4, r1
 800950a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800950e:	f000 f82d 	bl	800956c <_lseek_r>
 8009512:	1c43      	adds	r3, r0, #1
 8009514:	89a3      	ldrh	r3, [r4, #12]
 8009516:	bf15      	itete	ne
 8009518:	6560      	strne	r0, [r4, #84]	@ 0x54
 800951a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800951e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009522:	81a3      	strheq	r3, [r4, #12]
 8009524:	bf18      	it	ne
 8009526:	81a3      	strhne	r3, [r4, #12]
 8009528:	bd10      	pop	{r4, pc}

0800952a <__sclose>:
 800952a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800952e:	f000 b80d 	b.w	800954c <_close_r>

08009532 <memset>:
 8009532:	4603      	mov	r3, r0
 8009534:	4402      	add	r2, r0
 8009536:	4293      	cmp	r3, r2
 8009538:	d100      	bne.n	800953c <memset+0xa>
 800953a:	4770      	bx	lr
 800953c:	f803 1b01 	strb.w	r1, [r3], #1
 8009540:	e7f9      	b.n	8009536 <memset+0x4>
	...

08009544 <_localeconv_r>:
 8009544:	4800      	ldr	r0, [pc, #0]	@ (8009548 <_localeconv_r+0x4>)
 8009546:	4770      	bx	lr
 8009548:	200001bc 	.word	0x200001bc

0800954c <_close_r>:
 800954c:	b538      	push	{r3, r4, r5, lr}
 800954e:	2300      	movs	r3, #0
 8009550:	4d05      	ldr	r5, [pc, #20]	@ (8009568 <_close_r+0x1c>)
 8009552:	4604      	mov	r4, r0
 8009554:	4608      	mov	r0, r1
 8009556:	602b      	str	r3, [r5, #0]
 8009558:	f7fa f8ab 	bl	80036b2 <_close>
 800955c:	1c43      	adds	r3, r0, #1
 800955e:	d102      	bne.n	8009566 <_close_r+0x1a>
 8009560:	682b      	ldr	r3, [r5, #0]
 8009562:	b103      	cbz	r3, 8009566 <_close_r+0x1a>
 8009564:	6023      	str	r3, [r4, #0]
 8009566:	bd38      	pop	{r3, r4, r5, pc}
 8009568:	20000d34 	.word	0x20000d34

0800956c <_lseek_r>:
 800956c:	b538      	push	{r3, r4, r5, lr}
 800956e:	4604      	mov	r4, r0
 8009570:	4608      	mov	r0, r1
 8009572:	4611      	mov	r1, r2
 8009574:	2200      	movs	r2, #0
 8009576:	4d05      	ldr	r5, [pc, #20]	@ (800958c <_lseek_r+0x20>)
 8009578:	602a      	str	r2, [r5, #0]
 800957a:	461a      	mov	r2, r3
 800957c:	f7fa f8bd 	bl	80036fa <_lseek>
 8009580:	1c43      	adds	r3, r0, #1
 8009582:	d102      	bne.n	800958a <_lseek_r+0x1e>
 8009584:	682b      	ldr	r3, [r5, #0]
 8009586:	b103      	cbz	r3, 800958a <_lseek_r+0x1e>
 8009588:	6023      	str	r3, [r4, #0]
 800958a:	bd38      	pop	{r3, r4, r5, pc}
 800958c:	20000d34 	.word	0x20000d34

08009590 <_read_r>:
 8009590:	b538      	push	{r3, r4, r5, lr}
 8009592:	4604      	mov	r4, r0
 8009594:	4608      	mov	r0, r1
 8009596:	4611      	mov	r1, r2
 8009598:	2200      	movs	r2, #0
 800959a:	4d05      	ldr	r5, [pc, #20]	@ (80095b0 <_read_r+0x20>)
 800959c:	602a      	str	r2, [r5, #0]
 800959e:	461a      	mov	r2, r3
 80095a0:	f7fa f84e 	bl	8003640 <_read>
 80095a4:	1c43      	adds	r3, r0, #1
 80095a6:	d102      	bne.n	80095ae <_read_r+0x1e>
 80095a8:	682b      	ldr	r3, [r5, #0]
 80095aa:	b103      	cbz	r3, 80095ae <_read_r+0x1e>
 80095ac:	6023      	str	r3, [r4, #0]
 80095ae:	bd38      	pop	{r3, r4, r5, pc}
 80095b0:	20000d34 	.word	0x20000d34

080095b4 <_write_r>:
 80095b4:	b538      	push	{r3, r4, r5, lr}
 80095b6:	4604      	mov	r4, r0
 80095b8:	4608      	mov	r0, r1
 80095ba:	4611      	mov	r1, r2
 80095bc:	2200      	movs	r2, #0
 80095be:	4d05      	ldr	r5, [pc, #20]	@ (80095d4 <_write_r+0x20>)
 80095c0:	602a      	str	r2, [r5, #0]
 80095c2:	461a      	mov	r2, r3
 80095c4:	f7fa f859 	bl	800367a <_write>
 80095c8:	1c43      	adds	r3, r0, #1
 80095ca:	d102      	bne.n	80095d2 <_write_r+0x1e>
 80095cc:	682b      	ldr	r3, [r5, #0]
 80095ce:	b103      	cbz	r3, 80095d2 <_write_r+0x1e>
 80095d0:	6023      	str	r3, [r4, #0]
 80095d2:	bd38      	pop	{r3, r4, r5, pc}
 80095d4:	20000d34 	.word	0x20000d34

080095d8 <__errno>:
 80095d8:	4b01      	ldr	r3, [pc, #4]	@ (80095e0 <__errno+0x8>)
 80095da:	6818      	ldr	r0, [r3, #0]
 80095dc:	4770      	bx	lr
 80095de:	bf00      	nop
 80095e0:	2000007c 	.word	0x2000007c

080095e4 <__libc_init_array>:
 80095e4:	b570      	push	{r4, r5, r6, lr}
 80095e6:	2600      	movs	r6, #0
 80095e8:	4d0c      	ldr	r5, [pc, #48]	@ (800961c <__libc_init_array+0x38>)
 80095ea:	4c0d      	ldr	r4, [pc, #52]	@ (8009620 <__libc_init_array+0x3c>)
 80095ec:	1b64      	subs	r4, r4, r5
 80095ee:	10a4      	asrs	r4, r4, #2
 80095f0:	42a6      	cmp	r6, r4
 80095f2:	d109      	bne.n	8009608 <__libc_init_array+0x24>
 80095f4:	f003 fb6a 	bl	800cccc <_init>
 80095f8:	2600      	movs	r6, #0
 80095fa:	4d0a      	ldr	r5, [pc, #40]	@ (8009624 <__libc_init_array+0x40>)
 80095fc:	4c0a      	ldr	r4, [pc, #40]	@ (8009628 <__libc_init_array+0x44>)
 80095fe:	1b64      	subs	r4, r4, r5
 8009600:	10a4      	asrs	r4, r4, #2
 8009602:	42a6      	cmp	r6, r4
 8009604:	d105      	bne.n	8009612 <__libc_init_array+0x2e>
 8009606:	bd70      	pop	{r4, r5, r6, pc}
 8009608:	f855 3b04 	ldr.w	r3, [r5], #4
 800960c:	4798      	blx	r3
 800960e:	3601      	adds	r6, #1
 8009610:	e7ee      	b.n	80095f0 <__libc_init_array+0xc>
 8009612:	f855 3b04 	ldr.w	r3, [r5], #4
 8009616:	4798      	blx	r3
 8009618:	3601      	adds	r6, #1
 800961a:	e7f2      	b.n	8009602 <__libc_init_array+0x1e>
 800961c:	0800d168 	.word	0x0800d168
 8009620:	0800d168 	.word	0x0800d168
 8009624:	0800d168 	.word	0x0800d168
 8009628:	0800d16c 	.word	0x0800d16c

0800962c <__retarget_lock_init_recursive>:
 800962c:	4770      	bx	lr

0800962e <__retarget_lock_acquire_recursive>:
 800962e:	4770      	bx	lr

08009630 <__retarget_lock_release_recursive>:
 8009630:	4770      	bx	lr

08009632 <memchr>:
 8009632:	4603      	mov	r3, r0
 8009634:	b510      	push	{r4, lr}
 8009636:	b2c9      	uxtb	r1, r1
 8009638:	4402      	add	r2, r0
 800963a:	4293      	cmp	r3, r2
 800963c:	4618      	mov	r0, r3
 800963e:	d101      	bne.n	8009644 <memchr+0x12>
 8009640:	2000      	movs	r0, #0
 8009642:	e003      	b.n	800964c <memchr+0x1a>
 8009644:	7804      	ldrb	r4, [r0, #0]
 8009646:	3301      	adds	r3, #1
 8009648:	428c      	cmp	r4, r1
 800964a:	d1f6      	bne.n	800963a <memchr+0x8>
 800964c:	bd10      	pop	{r4, pc}

0800964e <memcpy>:
 800964e:	440a      	add	r2, r1
 8009650:	4291      	cmp	r1, r2
 8009652:	f100 33ff 	add.w	r3, r0, #4294967295
 8009656:	d100      	bne.n	800965a <memcpy+0xc>
 8009658:	4770      	bx	lr
 800965a:	b510      	push	{r4, lr}
 800965c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009660:	4291      	cmp	r1, r2
 8009662:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009666:	d1f9      	bne.n	800965c <memcpy+0xe>
 8009668:	bd10      	pop	{r4, pc}
	...

0800966c <nanf>:
 800966c:	4800      	ldr	r0, [pc, #0]	@ (8009670 <nanf+0x4>)
 800966e:	4770      	bx	lr
 8009670:	7fc00000 	.word	0x7fc00000

08009674 <quorem>:
 8009674:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009678:	6903      	ldr	r3, [r0, #16]
 800967a:	690c      	ldr	r4, [r1, #16]
 800967c:	4607      	mov	r7, r0
 800967e:	42a3      	cmp	r3, r4
 8009680:	db7e      	blt.n	8009780 <quorem+0x10c>
 8009682:	3c01      	subs	r4, #1
 8009684:	00a3      	lsls	r3, r4, #2
 8009686:	f100 0514 	add.w	r5, r0, #20
 800968a:	f101 0814 	add.w	r8, r1, #20
 800968e:	9300      	str	r3, [sp, #0]
 8009690:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009694:	9301      	str	r3, [sp, #4]
 8009696:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800969a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800969e:	3301      	adds	r3, #1
 80096a0:	429a      	cmp	r2, r3
 80096a2:	fbb2 f6f3 	udiv	r6, r2, r3
 80096a6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80096aa:	d32e      	bcc.n	800970a <quorem+0x96>
 80096ac:	f04f 0a00 	mov.w	sl, #0
 80096b0:	46c4      	mov	ip, r8
 80096b2:	46ae      	mov	lr, r5
 80096b4:	46d3      	mov	fp, sl
 80096b6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80096ba:	b298      	uxth	r0, r3
 80096bc:	fb06 a000 	mla	r0, r6, r0, sl
 80096c0:	0c1b      	lsrs	r3, r3, #16
 80096c2:	0c02      	lsrs	r2, r0, #16
 80096c4:	fb06 2303 	mla	r3, r6, r3, r2
 80096c8:	f8de 2000 	ldr.w	r2, [lr]
 80096cc:	b280      	uxth	r0, r0
 80096ce:	b292      	uxth	r2, r2
 80096d0:	1a12      	subs	r2, r2, r0
 80096d2:	445a      	add	r2, fp
 80096d4:	f8de 0000 	ldr.w	r0, [lr]
 80096d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80096dc:	b29b      	uxth	r3, r3
 80096de:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80096e2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80096e6:	b292      	uxth	r2, r2
 80096e8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80096ec:	45e1      	cmp	r9, ip
 80096ee:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80096f2:	f84e 2b04 	str.w	r2, [lr], #4
 80096f6:	d2de      	bcs.n	80096b6 <quorem+0x42>
 80096f8:	9b00      	ldr	r3, [sp, #0]
 80096fa:	58eb      	ldr	r3, [r5, r3]
 80096fc:	b92b      	cbnz	r3, 800970a <quorem+0x96>
 80096fe:	9b01      	ldr	r3, [sp, #4]
 8009700:	3b04      	subs	r3, #4
 8009702:	429d      	cmp	r5, r3
 8009704:	461a      	mov	r2, r3
 8009706:	d32f      	bcc.n	8009768 <quorem+0xf4>
 8009708:	613c      	str	r4, [r7, #16]
 800970a:	4638      	mov	r0, r7
 800970c:	f001 f9c4 	bl	800aa98 <__mcmp>
 8009710:	2800      	cmp	r0, #0
 8009712:	db25      	blt.n	8009760 <quorem+0xec>
 8009714:	4629      	mov	r1, r5
 8009716:	2000      	movs	r0, #0
 8009718:	f858 2b04 	ldr.w	r2, [r8], #4
 800971c:	f8d1 c000 	ldr.w	ip, [r1]
 8009720:	fa1f fe82 	uxth.w	lr, r2
 8009724:	fa1f f38c 	uxth.w	r3, ip
 8009728:	eba3 030e 	sub.w	r3, r3, lr
 800972c:	4403      	add	r3, r0
 800972e:	0c12      	lsrs	r2, r2, #16
 8009730:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009734:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009738:	b29b      	uxth	r3, r3
 800973a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800973e:	45c1      	cmp	r9, r8
 8009740:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009744:	f841 3b04 	str.w	r3, [r1], #4
 8009748:	d2e6      	bcs.n	8009718 <quorem+0xa4>
 800974a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800974e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009752:	b922      	cbnz	r2, 800975e <quorem+0xea>
 8009754:	3b04      	subs	r3, #4
 8009756:	429d      	cmp	r5, r3
 8009758:	461a      	mov	r2, r3
 800975a:	d30b      	bcc.n	8009774 <quorem+0x100>
 800975c:	613c      	str	r4, [r7, #16]
 800975e:	3601      	adds	r6, #1
 8009760:	4630      	mov	r0, r6
 8009762:	b003      	add	sp, #12
 8009764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009768:	6812      	ldr	r2, [r2, #0]
 800976a:	3b04      	subs	r3, #4
 800976c:	2a00      	cmp	r2, #0
 800976e:	d1cb      	bne.n	8009708 <quorem+0x94>
 8009770:	3c01      	subs	r4, #1
 8009772:	e7c6      	b.n	8009702 <quorem+0x8e>
 8009774:	6812      	ldr	r2, [r2, #0]
 8009776:	3b04      	subs	r3, #4
 8009778:	2a00      	cmp	r2, #0
 800977a:	d1ef      	bne.n	800975c <quorem+0xe8>
 800977c:	3c01      	subs	r4, #1
 800977e:	e7ea      	b.n	8009756 <quorem+0xe2>
 8009780:	2000      	movs	r0, #0
 8009782:	e7ee      	b.n	8009762 <quorem+0xee>
 8009784:	0000      	movs	r0, r0
	...

08009788 <_dtoa_r>:
 8009788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800978c:	4614      	mov	r4, r2
 800978e:	461d      	mov	r5, r3
 8009790:	69c7      	ldr	r7, [r0, #28]
 8009792:	b097      	sub	sp, #92	@ 0x5c
 8009794:	4683      	mov	fp, r0
 8009796:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800979a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800979c:	b97f      	cbnz	r7, 80097be <_dtoa_r+0x36>
 800979e:	2010      	movs	r0, #16
 80097a0:	f000 fe02 	bl	800a3a8 <malloc>
 80097a4:	4602      	mov	r2, r0
 80097a6:	f8cb 001c 	str.w	r0, [fp, #28]
 80097aa:	b920      	cbnz	r0, 80097b6 <_dtoa_r+0x2e>
 80097ac:	21ef      	movs	r1, #239	@ 0xef
 80097ae:	4ba8      	ldr	r3, [pc, #672]	@ (8009a50 <_dtoa_r+0x2c8>)
 80097b0:	48a8      	ldr	r0, [pc, #672]	@ (8009a54 <_dtoa_r+0x2cc>)
 80097b2:	f002 fde9 	bl	800c388 <__assert_func>
 80097b6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80097ba:	6007      	str	r7, [r0, #0]
 80097bc:	60c7      	str	r7, [r0, #12]
 80097be:	f8db 301c 	ldr.w	r3, [fp, #28]
 80097c2:	6819      	ldr	r1, [r3, #0]
 80097c4:	b159      	cbz	r1, 80097de <_dtoa_r+0x56>
 80097c6:	685a      	ldr	r2, [r3, #4]
 80097c8:	2301      	movs	r3, #1
 80097ca:	4093      	lsls	r3, r2
 80097cc:	604a      	str	r2, [r1, #4]
 80097ce:	608b      	str	r3, [r1, #8]
 80097d0:	4658      	mov	r0, fp
 80097d2:	f000 fedf 	bl	800a594 <_Bfree>
 80097d6:	2200      	movs	r2, #0
 80097d8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80097dc:	601a      	str	r2, [r3, #0]
 80097de:	1e2b      	subs	r3, r5, #0
 80097e0:	bfaf      	iteee	ge
 80097e2:	2300      	movge	r3, #0
 80097e4:	2201      	movlt	r2, #1
 80097e6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80097ea:	9303      	strlt	r3, [sp, #12]
 80097ec:	bfa8      	it	ge
 80097ee:	6033      	strge	r3, [r6, #0]
 80097f0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80097f4:	4b98      	ldr	r3, [pc, #608]	@ (8009a58 <_dtoa_r+0x2d0>)
 80097f6:	bfb8      	it	lt
 80097f8:	6032      	strlt	r2, [r6, #0]
 80097fa:	ea33 0308 	bics.w	r3, r3, r8
 80097fe:	d112      	bne.n	8009826 <_dtoa_r+0x9e>
 8009800:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009804:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009806:	6013      	str	r3, [r2, #0]
 8009808:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800980c:	4323      	orrs	r3, r4
 800980e:	f000 8550 	beq.w	800a2b2 <_dtoa_r+0xb2a>
 8009812:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009814:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8009a5c <_dtoa_r+0x2d4>
 8009818:	2b00      	cmp	r3, #0
 800981a:	f000 8552 	beq.w	800a2c2 <_dtoa_r+0xb3a>
 800981e:	f10a 0303 	add.w	r3, sl, #3
 8009822:	f000 bd4c 	b.w	800a2be <_dtoa_r+0xb36>
 8009826:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800982a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800982e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009832:	2200      	movs	r2, #0
 8009834:	2300      	movs	r3, #0
 8009836:	f7f7 f8b7 	bl	80009a8 <__aeabi_dcmpeq>
 800983a:	4607      	mov	r7, r0
 800983c:	b158      	cbz	r0, 8009856 <_dtoa_r+0xce>
 800983e:	2301      	movs	r3, #1
 8009840:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009842:	6013      	str	r3, [r2, #0]
 8009844:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009846:	b113      	cbz	r3, 800984e <_dtoa_r+0xc6>
 8009848:	4b85      	ldr	r3, [pc, #532]	@ (8009a60 <_dtoa_r+0x2d8>)
 800984a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800984c:	6013      	str	r3, [r2, #0]
 800984e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8009a64 <_dtoa_r+0x2dc>
 8009852:	f000 bd36 	b.w	800a2c2 <_dtoa_r+0xb3a>
 8009856:	ab14      	add	r3, sp, #80	@ 0x50
 8009858:	9301      	str	r3, [sp, #4]
 800985a:	ab15      	add	r3, sp, #84	@ 0x54
 800985c:	9300      	str	r3, [sp, #0]
 800985e:	4658      	mov	r0, fp
 8009860:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009864:	f001 fa30 	bl	800acc8 <__d2b>
 8009868:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800986c:	4681      	mov	r9, r0
 800986e:	2e00      	cmp	r6, #0
 8009870:	d077      	beq.n	8009962 <_dtoa_r+0x1da>
 8009872:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009876:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009878:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800987c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009880:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009884:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009888:	9712      	str	r7, [sp, #72]	@ 0x48
 800988a:	4619      	mov	r1, r3
 800988c:	2200      	movs	r2, #0
 800988e:	4b76      	ldr	r3, [pc, #472]	@ (8009a68 <_dtoa_r+0x2e0>)
 8009890:	f7f6 fc6a 	bl	8000168 <__aeabi_dsub>
 8009894:	a368      	add	r3, pc, #416	@ (adr r3, 8009a38 <_dtoa_r+0x2b0>)
 8009896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989a:	f7f6 fe1d 	bl	80004d8 <__aeabi_dmul>
 800989e:	a368      	add	r3, pc, #416	@ (adr r3, 8009a40 <_dtoa_r+0x2b8>)
 80098a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a4:	f7f6 fc62 	bl	800016c <__adddf3>
 80098a8:	4604      	mov	r4, r0
 80098aa:	4630      	mov	r0, r6
 80098ac:	460d      	mov	r5, r1
 80098ae:	f7f6 fda9 	bl	8000404 <__aeabi_i2d>
 80098b2:	a365      	add	r3, pc, #404	@ (adr r3, 8009a48 <_dtoa_r+0x2c0>)
 80098b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b8:	f7f6 fe0e 	bl	80004d8 <__aeabi_dmul>
 80098bc:	4602      	mov	r2, r0
 80098be:	460b      	mov	r3, r1
 80098c0:	4620      	mov	r0, r4
 80098c2:	4629      	mov	r1, r5
 80098c4:	f7f6 fc52 	bl	800016c <__adddf3>
 80098c8:	4604      	mov	r4, r0
 80098ca:	460d      	mov	r5, r1
 80098cc:	f7f7 f8b4 	bl	8000a38 <__aeabi_d2iz>
 80098d0:	2200      	movs	r2, #0
 80098d2:	4607      	mov	r7, r0
 80098d4:	2300      	movs	r3, #0
 80098d6:	4620      	mov	r0, r4
 80098d8:	4629      	mov	r1, r5
 80098da:	f7f7 f86f 	bl	80009bc <__aeabi_dcmplt>
 80098de:	b140      	cbz	r0, 80098f2 <_dtoa_r+0x16a>
 80098e0:	4638      	mov	r0, r7
 80098e2:	f7f6 fd8f 	bl	8000404 <__aeabi_i2d>
 80098e6:	4622      	mov	r2, r4
 80098e8:	462b      	mov	r3, r5
 80098ea:	f7f7 f85d 	bl	80009a8 <__aeabi_dcmpeq>
 80098ee:	b900      	cbnz	r0, 80098f2 <_dtoa_r+0x16a>
 80098f0:	3f01      	subs	r7, #1
 80098f2:	2f16      	cmp	r7, #22
 80098f4:	d853      	bhi.n	800999e <_dtoa_r+0x216>
 80098f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80098fa:	4b5c      	ldr	r3, [pc, #368]	@ (8009a6c <_dtoa_r+0x2e4>)
 80098fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009904:	f7f7 f85a 	bl	80009bc <__aeabi_dcmplt>
 8009908:	2800      	cmp	r0, #0
 800990a:	d04a      	beq.n	80099a2 <_dtoa_r+0x21a>
 800990c:	2300      	movs	r3, #0
 800990e:	3f01      	subs	r7, #1
 8009910:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009912:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009914:	1b9b      	subs	r3, r3, r6
 8009916:	1e5a      	subs	r2, r3, #1
 8009918:	bf46      	itte	mi
 800991a:	f1c3 0801 	rsbmi	r8, r3, #1
 800991e:	2300      	movmi	r3, #0
 8009920:	f04f 0800 	movpl.w	r8, #0
 8009924:	9209      	str	r2, [sp, #36]	@ 0x24
 8009926:	bf48      	it	mi
 8009928:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800992a:	2f00      	cmp	r7, #0
 800992c:	db3b      	blt.n	80099a6 <_dtoa_r+0x21e>
 800992e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009930:	970e      	str	r7, [sp, #56]	@ 0x38
 8009932:	443b      	add	r3, r7
 8009934:	9309      	str	r3, [sp, #36]	@ 0x24
 8009936:	2300      	movs	r3, #0
 8009938:	930a      	str	r3, [sp, #40]	@ 0x28
 800993a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800993c:	2b09      	cmp	r3, #9
 800993e:	d866      	bhi.n	8009a0e <_dtoa_r+0x286>
 8009940:	2b05      	cmp	r3, #5
 8009942:	bfc4      	itt	gt
 8009944:	3b04      	subgt	r3, #4
 8009946:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8009948:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800994a:	bfc8      	it	gt
 800994c:	2400      	movgt	r4, #0
 800994e:	f1a3 0302 	sub.w	r3, r3, #2
 8009952:	bfd8      	it	le
 8009954:	2401      	movle	r4, #1
 8009956:	2b03      	cmp	r3, #3
 8009958:	d864      	bhi.n	8009a24 <_dtoa_r+0x29c>
 800995a:	e8df f003 	tbb	[pc, r3]
 800995e:	382b      	.short	0x382b
 8009960:	5636      	.short	0x5636
 8009962:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009966:	441e      	add	r6, r3
 8009968:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800996c:	2b20      	cmp	r3, #32
 800996e:	bfc1      	itttt	gt
 8009970:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009974:	fa08 f803 	lslgt.w	r8, r8, r3
 8009978:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800997c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009980:	bfd6      	itet	le
 8009982:	f1c3 0320 	rsble	r3, r3, #32
 8009986:	ea48 0003 	orrgt.w	r0, r8, r3
 800998a:	fa04 f003 	lslle.w	r0, r4, r3
 800998e:	f7f6 fd29 	bl	80003e4 <__aeabi_ui2d>
 8009992:	2201      	movs	r2, #1
 8009994:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009998:	3e01      	subs	r6, #1
 800999a:	9212      	str	r2, [sp, #72]	@ 0x48
 800999c:	e775      	b.n	800988a <_dtoa_r+0x102>
 800999e:	2301      	movs	r3, #1
 80099a0:	e7b6      	b.n	8009910 <_dtoa_r+0x188>
 80099a2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80099a4:	e7b5      	b.n	8009912 <_dtoa_r+0x18a>
 80099a6:	427b      	negs	r3, r7
 80099a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80099aa:	2300      	movs	r3, #0
 80099ac:	eba8 0807 	sub.w	r8, r8, r7
 80099b0:	930e      	str	r3, [sp, #56]	@ 0x38
 80099b2:	e7c2      	b.n	800993a <_dtoa_r+0x1b2>
 80099b4:	2300      	movs	r3, #0
 80099b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80099b8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	dc35      	bgt.n	8009a2a <_dtoa_r+0x2a2>
 80099be:	2301      	movs	r3, #1
 80099c0:	461a      	mov	r2, r3
 80099c2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80099c6:	9221      	str	r2, [sp, #132]	@ 0x84
 80099c8:	e00b      	b.n	80099e2 <_dtoa_r+0x25a>
 80099ca:	2301      	movs	r3, #1
 80099cc:	e7f3      	b.n	80099b6 <_dtoa_r+0x22e>
 80099ce:	2300      	movs	r3, #0
 80099d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80099d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80099d4:	18fb      	adds	r3, r7, r3
 80099d6:	9308      	str	r3, [sp, #32]
 80099d8:	3301      	adds	r3, #1
 80099da:	2b01      	cmp	r3, #1
 80099dc:	9307      	str	r3, [sp, #28]
 80099de:	bfb8      	it	lt
 80099e0:	2301      	movlt	r3, #1
 80099e2:	2100      	movs	r1, #0
 80099e4:	2204      	movs	r2, #4
 80099e6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80099ea:	f102 0514 	add.w	r5, r2, #20
 80099ee:	429d      	cmp	r5, r3
 80099f0:	d91f      	bls.n	8009a32 <_dtoa_r+0x2aa>
 80099f2:	6041      	str	r1, [r0, #4]
 80099f4:	4658      	mov	r0, fp
 80099f6:	f000 fd8d 	bl	800a514 <_Balloc>
 80099fa:	4682      	mov	sl, r0
 80099fc:	2800      	cmp	r0, #0
 80099fe:	d139      	bne.n	8009a74 <_dtoa_r+0x2ec>
 8009a00:	4602      	mov	r2, r0
 8009a02:	f240 11af 	movw	r1, #431	@ 0x1af
 8009a06:	4b1a      	ldr	r3, [pc, #104]	@ (8009a70 <_dtoa_r+0x2e8>)
 8009a08:	e6d2      	b.n	80097b0 <_dtoa_r+0x28>
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	e7e0      	b.n	80099d0 <_dtoa_r+0x248>
 8009a0e:	2401      	movs	r4, #1
 8009a10:	2300      	movs	r3, #0
 8009a12:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009a14:	9320      	str	r3, [sp, #128]	@ 0x80
 8009a16:	f04f 33ff 	mov.w	r3, #4294967295
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009a20:	2312      	movs	r3, #18
 8009a22:	e7d0      	b.n	80099c6 <_dtoa_r+0x23e>
 8009a24:	2301      	movs	r3, #1
 8009a26:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a28:	e7f5      	b.n	8009a16 <_dtoa_r+0x28e>
 8009a2a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009a2c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009a30:	e7d7      	b.n	80099e2 <_dtoa_r+0x25a>
 8009a32:	3101      	adds	r1, #1
 8009a34:	0052      	lsls	r2, r2, #1
 8009a36:	e7d8      	b.n	80099ea <_dtoa_r+0x262>
 8009a38:	636f4361 	.word	0x636f4361
 8009a3c:	3fd287a7 	.word	0x3fd287a7
 8009a40:	8b60c8b3 	.word	0x8b60c8b3
 8009a44:	3fc68a28 	.word	0x3fc68a28
 8009a48:	509f79fb 	.word	0x509f79fb
 8009a4c:	3fd34413 	.word	0x3fd34413
 8009a50:	0800cd74 	.word	0x0800cd74
 8009a54:	0800cd8b 	.word	0x0800cd8b
 8009a58:	7ff00000 	.word	0x7ff00000
 8009a5c:	0800cd70 	.word	0x0800cd70
 8009a60:	0800cd3f 	.word	0x0800cd3f
 8009a64:	0800cd3e 	.word	0x0800cd3e
 8009a68:	3ff80000 	.word	0x3ff80000
 8009a6c:	0800ce88 	.word	0x0800ce88
 8009a70:	0800cde3 	.word	0x0800cde3
 8009a74:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009a78:	6018      	str	r0, [r3, #0]
 8009a7a:	9b07      	ldr	r3, [sp, #28]
 8009a7c:	2b0e      	cmp	r3, #14
 8009a7e:	f200 80a4 	bhi.w	8009bca <_dtoa_r+0x442>
 8009a82:	2c00      	cmp	r4, #0
 8009a84:	f000 80a1 	beq.w	8009bca <_dtoa_r+0x442>
 8009a88:	2f00      	cmp	r7, #0
 8009a8a:	dd33      	ble.n	8009af4 <_dtoa_r+0x36c>
 8009a8c:	4b86      	ldr	r3, [pc, #536]	@ (8009ca8 <_dtoa_r+0x520>)
 8009a8e:	f007 020f 	and.w	r2, r7, #15
 8009a92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a96:	05f8      	lsls	r0, r7, #23
 8009a98:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009a9c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009aa0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009aa4:	d516      	bpl.n	8009ad4 <_dtoa_r+0x34c>
 8009aa6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009aaa:	4b80      	ldr	r3, [pc, #512]	@ (8009cac <_dtoa_r+0x524>)
 8009aac:	2603      	movs	r6, #3
 8009aae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009ab2:	f7f6 fe3b 	bl	800072c <__aeabi_ddiv>
 8009ab6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009aba:	f004 040f 	and.w	r4, r4, #15
 8009abe:	4d7b      	ldr	r5, [pc, #492]	@ (8009cac <_dtoa_r+0x524>)
 8009ac0:	b954      	cbnz	r4, 8009ad8 <_dtoa_r+0x350>
 8009ac2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ac6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009aca:	f7f6 fe2f 	bl	800072c <__aeabi_ddiv>
 8009ace:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ad2:	e028      	b.n	8009b26 <_dtoa_r+0x39e>
 8009ad4:	2602      	movs	r6, #2
 8009ad6:	e7f2      	b.n	8009abe <_dtoa_r+0x336>
 8009ad8:	07e1      	lsls	r1, r4, #31
 8009ada:	d508      	bpl.n	8009aee <_dtoa_r+0x366>
 8009adc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ae0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009ae4:	f7f6 fcf8 	bl	80004d8 <__aeabi_dmul>
 8009ae8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009aec:	3601      	adds	r6, #1
 8009aee:	1064      	asrs	r4, r4, #1
 8009af0:	3508      	adds	r5, #8
 8009af2:	e7e5      	b.n	8009ac0 <_dtoa_r+0x338>
 8009af4:	f000 80d2 	beq.w	8009c9c <_dtoa_r+0x514>
 8009af8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009afc:	427c      	negs	r4, r7
 8009afe:	4b6a      	ldr	r3, [pc, #424]	@ (8009ca8 <_dtoa_r+0x520>)
 8009b00:	f004 020f 	and.w	r2, r4, #15
 8009b04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0c:	f7f6 fce4 	bl	80004d8 <__aeabi_dmul>
 8009b10:	2602      	movs	r6, #2
 8009b12:	2300      	movs	r3, #0
 8009b14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b18:	4d64      	ldr	r5, [pc, #400]	@ (8009cac <_dtoa_r+0x524>)
 8009b1a:	1124      	asrs	r4, r4, #4
 8009b1c:	2c00      	cmp	r4, #0
 8009b1e:	f040 80b2 	bne.w	8009c86 <_dtoa_r+0x4fe>
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d1d3      	bne.n	8009ace <_dtoa_r+0x346>
 8009b26:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009b2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	f000 80b7 	beq.w	8009ca0 <_dtoa_r+0x518>
 8009b32:	2200      	movs	r2, #0
 8009b34:	4620      	mov	r0, r4
 8009b36:	4629      	mov	r1, r5
 8009b38:	4b5d      	ldr	r3, [pc, #372]	@ (8009cb0 <_dtoa_r+0x528>)
 8009b3a:	f7f6 ff3f 	bl	80009bc <__aeabi_dcmplt>
 8009b3e:	2800      	cmp	r0, #0
 8009b40:	f000 80ae 	beq.w	8009ca0 <_dtoa_r+0x518>
 8009b44:	9b07      	ldr	r3, [sp, #28]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	f000 80aa 	beq.w	8009ca0 <_dtoa_r+0x518>
 8009b4c:	9b08      	ldr	r3, [sp, #32]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	dd37      	ble.n	8009bc2 <_dtoa_r+0x43a>
 8009b52:	1e7b      	subs	r3, r7, #1
 8009b54:	4620      	mov	r0, r4
 8009b56:	9304      	str	r3, [sp, #16]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	4629      	mov	r1, r5
 8009b5c:	4b55      	ldr	r3, [pc, #340]	@ (8009cb4 <_dtoa_r+0x52c>)
 8009b5e:	f7f6 fcbb 	bl	80004d8 <__aeabi_dmul>
 8009b62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b66:	9c08      	ldr	r4, [sp, #32]
 8009b68:	3601      	adds	r6, #1
 8009b6a:	4630      	mov	r0, r6
 8009b6c:	f7f6 fc4a 	bl	8000404 <__aeabi_i2d>
 8009b70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b74:	f7f6 fcb0 	bl	80004d8 <__aeabi_dmul>
 8009b78:	2200      	movs	r2, #0
 8009b7a:	4b4f      	ldr	r3, [pc, #316]	@ (8009cb8 <_dtoa_r+0x530>)
 8009b7c:	f7f6 faf6 	bl	800016c <__adddf3>
 8009b80:	4605      	mov	r5, r0
 8009b82:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009b86:	2c00      	cmp	r4, #0
 8009b88:	f040 809a 	bne.w	8009cc0 <_dtoa_r+0x538>
 8009b8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b90:	2200      	movs	r2, #0
 8009b92:	4b4a      	ldr	r3, [pc, #296]	@ (8009cbc <_dtoa_r+0x534>)
 8009b94:	f7f6 fae8 	bl	8000168 <__aeabi_dsub>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	460b      	mov	r3, r1
 8009b9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009ba0:	462a      	mov	r2, r5
 8009ba2:	4633      	mov	r3, r6
 8009ba4:	f7f6 ff28 	bl	80009f8 <__aeabi_dcmpgt>
 8009ba8:	2800      	cmp	r0, #0
 8009baa:	f040 828e 	bne.w	800a0ca <_dtoa_r+0x942>
 8009bae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bb2:	462a      	mov	r2, r5
 8009bb4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009bb8:	f7f6 ff00 	bl	80009bc <__aeabi_dcmplt>
 8009bbc:	2800      	cmp	r0, #0
 8009bbe:	f040 8127 	bne.w	8009e10 <_dtoa_r+0x688>
 8009bc2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009bc6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009bca:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	f2c0 8163 	blt.w	8009e98 <_dtoa_r+0x710>
 8009bd2:	2f0e      	cmp	r7, #14
 8009bd4:	f300 8160 	bgt.w	8009e98 <_dtoa_r+0x710>
 8009bd8:	4b33      	ldr	r3, [pc, #204]	@ (8009ca8 <_dtoa_r+0x520>)
 8009bda:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009bde:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009be2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009be6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	da03      	bge.n	8009bf4 <_dtoa_r+0x46c>
 8009bec:	9b07      	ldr	r3, [sp, #28]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	f340 8100 	ble.w	8009df4 <_dtoa_r+0x66c>
 8009bf4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009bf8:	4656      	mov	r6, sl
 8009bfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009bfe:	4620      	mov	r0, r4
 8009c00:	4629      	mov	r1, r5
 8009c02:	f7f6 fd93 	bl	800072c <__aeabi_ddiv>
 8009c06:	f7f6 ff17 	bl	8000a38 <__aeabi_d2iz>
 8009c0a:	4680      	mov	r8, r0
 8009c0c:	f7f6 fbfa 	bl	8000404 <__aeabi_i2d>
 8009c10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c14:	f7f6 fc60 	bl	80004d8 <__aeabi_dmul>
 8009c18:	4602      	mov	r2, r0
 8009c1a:	460b      	mov	r3, r1
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	4629      	mov	r1, r5
 8009c20:	f7f6 faa2 	bl	8000168 <__aeabi_dsub>
 8009c24:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009c28:	9d07      	ldr	r5, [sp, #28]
 8009c2a:	f806 4b01 	strb.w	r4, [r6], #1
 8009c2e:	eba6 040a 	sub.w	r4, r6, sl
 8009c32:	42a5      	cmp	r5, r4
 8009c34:	4602      	mov	r2, r0
 8009c36:	460b      	mov	r3, r1
 8009c38:	f040 8116 	bne.w	8009e68 <_dtoa_r+0x6e0>
 8009c3c:	f7f6 fa96 	bl	800016c <__adddf3>
 8009c40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c44:	4604      	mov	r4, r0
 8009c46:	460d      	mov	r5, r1
 8009c48:	f7f6 fed6 	bl	80009f8 <__aeabi_dcmpgt>
 8009c4c:	2800      	cmp	r0, #0
 8009c4e:	f040 80f8 	bne.w	8009e42 <_dtoa_r+0x6ba>
 8009c52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c56:	4620      	mov	r0, r4
 8009c58:	4629      	mov	r1, r5
 8009c5a:	f7f6 fea5 	bl	80009a8 <__aeabi_dcmpeq>
 8009c5e:	b118      	cbz	r0, 8009c68 <_dtoa_r+0x4e0>
 8009c60:	f018 0f01 	tst.w	r8, #1
 8009c64:	f040 80ed 	bne.w	8009e42 <_dtoa_r+0x6ba>
 8009c68:	4649      	mov	r1, r9
 8009c6a:	4658      	mov	r0, fp
 8009c6c:	f000 fc92 	bl	800a594 <_Bfree>
 8009c70:	2300      	movs	r3, #0
 8009c72:	7033      	strb	r3, [r6, #0]
 8009c74:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009c76:	3701      	adds	r7, #1
 8009c78:	601f      	str	r7, [r3, #0]
 8009c7a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	f000 8320 	beq.w	800a2c2 <_dtoa_r+0xb3a>
 8009c82:	601e      	str	r6, [r3, #0]
 8009c84:	e31d      	b.n	800a2c2 <_dtoa_r+0xb3a>
 8009c86:	07e2      	lsls	r2, r4, #31
 8009c88:	d505      	bpl.n	8009c96 <_dtoa_r+0x50e>
 8009c8a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009c8e:	f7f6 fc23 	bl	80004d8 <__aeabi_dmul>
 8009c92:	2301      	movs	r3, #1
 8009c94:	3601      	adds	r6, #1
 8009c96:	1064      	asrs	r4, r4, #1
 8009c98:	3508      	adds	r5, #8
 8009c9a:	e73f      	b.n	8009b1c <_dtoa_r+0x394>
 8009c9c:	2602      	movs	r6, #2
 8009c9e:	e742      	b.n	8009b26 <_dtoa_r+0x39e>
 8009ca0:	9c07      	ldr	r4, [sp, #28]
 8009ca2:	9704      	str	r7, [sp, #16]
 8009ca4:	e761      	b.n	8009b6a <_dtoa_r+0x3e2>
 8009ca6:	bf00      	nop
 8009ca8:	0800ce88 	.word	0x0800ce88
 8009cac:	0800ce60 	.word	0x0800ce60
 8009cb0:	3ff00000 	.word	0x3ff00000
 8009cb4:	40240000 	.word	0x40240000
 8009cb8:	401c0000 	.word	0x401c0000
 8009cbc:	40140000 	.word	0x40140000
 8009cc0:	4b70      	ldr	r3, [pc, #448]	@ (8009e84 <_dtoa_r+0x6fc>)
 8009cc2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009cc4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009cc8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009ccc:	4454      	add	r4, sl
 8009cce:	2900      	cmp	r1, #0
 8009cd0:	d045      	beq.n	8009d5e <_dtoa_r+0x5d6>
 8009cd2:	2000      	movs	r0, #0
 8009cd4:	496c      	ldr	r1, [pc, #432]	@ (8009e88 <_dtoa_r+0x700>)
 8009cd6:	f7f6 fd29 	bl	800072c <__aeabi_ddiv>
 8009cda:	4633      	mov	r3, r6
 8009cdc:	462a      	mov	r2, r5
 8009cde:	f7f6 fa43 	bl	8000168 <__aeabi_dsub>
 8009ce2:	4656      	mov	r6, sl
 8009ce4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009ce8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cec:	f7f6 fea4 	bl	8000a38 <__aeabi_d2iz>
 8009cf0:	4605      	mov	r5, r0
 8009cf2:	f7f6 fb87 	bl	8000404 <__aeabi_i2d>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	460b      	mov	r3, r1
 8009cfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cfe:	f7f6 fa33 	bl	8000168 <__aeabi_dsub>
 8009d02:	4602      	mov	r2, r0
 8009d04:	460b      	mov	r3, r1
 8009d06:	3530      	adds	r5, #48	@ 0x30
 8009d08:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009d0c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009d10:	f806 5b01 	strb.w	r5, [r6], #1
 8009d14:	f7f6 fe52 	bl	80009bc <__aeabi_dcmplt>
 8009d18:	2800      	cmp	r0, #0
 8009d1a:	d163      	bne.n	8009de4 <_dtoa_r+0x65c>
 8009d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d20:	2000      	movs	r0, #0
 8009d22:	495a      	ldr	r1, [pc, #360]	@ (8009e8c <_dtoa_r+0x704>)
 8009d24:	f7f6 fa20 	bl	8000168 <__aeabi_dsub>
 8009d28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009d2c:	f7f6 fe46 	bl	80009bc <__aeabi_dcmplt>
 8009d30:	2800      	cmp	r0, #0
 8009d32:	f040 8087 	bne.w	8009e44 <_dtoa_r+0x6bc>
 8009d36:	42a6      	cmp	r6, r4
 8009d38:	f43f af43 	beq.w	8009bc2 <_dtoa_r+0x43a>
 8009d3c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009d40:	2200      	movs	r2, #0
 8009d42:	4b53      	ldr	r3, [pc, #332]	@ (8009e90 <_dtoa_r+0x708>)
 8009d44:	f7f6 fbc8 	bl	80004d8 <__aeabi_dmul>
 8009d48:	2200      	movs	r2, #0
 8009d4a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009d4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d52:	4b4f      	ldr	r3, [pc, #316]	@ (8009e90 <_dtoa_r+0x708>)
 8009d54:	f7f6 fbc0 	bl	80004d8 <__aeabi_dmul>
 8009d58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d5c:	e7c4      	b.n	8009ce8 <_dtoa_r+0x560>
 8009d5e:	4631      	mov	r1, r6
 8009d60:	4628      	mov	r0, r5
 8009d62:	f7f6 fbb9 	bl	80004d8 <__aeabi_dmul>
 8009d66:	4656      	mov	r6, sl
 8009d68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009d6c:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009d6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d72:	f7f6 fe61 	bl	8000a38 <__aeabi_d2iz>
 8009d76:	4605      	mov	r5, r0
 8009d78:	f7f6 fb44 	bl	8000404 <__aeabi_i2d>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	460b      	mov	r3, r1
 8009d80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d84:	f7f6 f9f0 	bl	8000168 <__aeabi_dsub>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	3530      	adds	r5, #48	@ 0x30
 8009d8e:	f806 5b01 	strb.w	r5, [r6], #1
 8009d92:	42a6      	cmp	r6, r4
 8009d94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009d98:	f04f 0200 	mov.w	r2, #0
 8009d9c:	d124      	bne.n	8009de8 <_dtoa_r+0x660>
 8009d9e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009da2:	4b39      	ldr	r3, [pc, #228]	@ (8009e88 <_dtoa_r+0x700>)
 8009da4:	f7f6 f9e2 	bl	800016c <__adddf3>
 8009da8:	4602      	mov	r2, r0
 8009daa:	460b      	mov	r3, r1
 8009dac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009db0:	f7f6 fe22 	bl	80009f8 <__aeabi_dcmpgt>
 8009db4:	2800      	cmp	r0, #0
 8009db6:	d145      	bne.n	8009e44 <_dtoa_r+0x6bc>
 8009db8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009dbc:	2000      	movs	r0, #0
 8009dbe:	4932      	ldr	r1, [pc, #200]	@ (8009e88 <_dtoa_r+0x700>)
 8009dc0:	f7f6 f9d2 	bl	8000168 <__aeabi_dsub>
 8009dc4:	4602      	mov	r2, r0
 8009dc6:	460b      	mov	r3, r1
 8009dc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009dcc:	f7f6 fdf6 	bl	80009bc <__aeabi_dcmplt>
 8009dd0:	2800      	cmp	r0, #0
 8009dd2:	f43f aef6 	beq.w	8009bc2 <_dtoa_r+0x43a>
 8009dd6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009dd8:	1e73      	subs	r3, r6, #1
 8009dda:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009ddc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009de0:	2b30      	cmp	r3, #48	@ 0x30
 8009de2:	d0f8      	beq.n	8009dd6 <_dtoa_r+0x64e>
 8009de4:	9f04      	ldr	r7, [sp, #16]
 8009de6:	e73f      	b.n	8009c68 <_dtoa_r+0x4e0>
 8009de8:	4b29      	ldr	r3, [pc, #164]	@ (8009e90 <_dtoa_r+0x708>)
 8009dea:	f7f6 fb75 	bl	80004d8 <__aeabi_dmul>
 8009dee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009df2:	e7bc      	b.n	8009d6e <_dtoa_r+0x5e6>
 8009df4:	d10c      	bne.n	8009e10 <_dtoa_r+0x688>
 8009df6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	4b25      	ldr	r3, [pc, #148]	@ (8009e94 <_dtoa_r+0x70c>)
 8009dfe:	f7f6 fb6b 	bl	80004d8 <__aeabi_dmul>
 8009e02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e06:	f7f6 fded 	bl	80009e4 <__aeabi_dcmpge>
 8009e0a:	2800      	cmp	r0, #0
 8009e0c:	f000 815b 	beq.w	800a0c6 <_dtoa_r+0x93e>
 8009e10:	2400      	movs	r4, #0
 8009e12:	4625      	mov	r5, r4
 8009e14:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009e16:	4656      	mov	r6, sl
 8009e18:	43db      	mvns	r3, r3
 8009e1a:	9304      	str	r3, [sp, #16]
 8009e1c:	2700      	movs	r7, #0
 8009e1e:	4621      	mov	r1, r4
 8009e20:	4658      	mov	r0, fp
 8009e22:	f000 fbb7 	bl	800a594 <_Bfree>
 8009e26:	2d00      	cmp	r5, #0
 8009e28:	d0dc      	beq.n	8009de4 <_dtoa_r+0x65c>
 8009e2a:	b12f      	cbz	r7, 8009e38 <_dtoa_r+0x6b0>
 8009e2c:	42af      	cmp	r7, r5
 8009e2e:	d003      	beq.n	8009e38 <_dtoa_r+0x6b0>
 8009e30:	4639      	mov	r1, r7
 8009e32:	4658      	mov	r0, fp
 8009e34:	f000 fbae 	bl	800a594 <_Bfree>
 8009e38:	4629      	mov	r1, r5
 8009e3a:	4658      	mov	r0, fp
 8009e3c:	f000 fbaa 	bl	800a594 <_Bfree>
 8009e40:	e7d0      	b.n	8009de4 <_dtoa_r+0x65c>
 8009e42:	9704      	str	r7, [sp, #16]
 8009e44:	4633      	mov	r3, r6
 8009e46:	461e      	mov	r6, r3
 8009e48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e4c:	2a39      	cmp	r2, #57	@ 0x39
 8009e4e:	d107      	bne.n	8009e60 <_dtoa_r+0x6d8>
 8009e50:	459a      	cmp	sl, r3
 8009e52:	d1f8      	bne.n	8009e46 <_dtoa_r+0x6be>
 8009e54:	9a04      	ldr	r2, [sp, #16]
 8009e56:	3201      	adds	r2, #1
 8009e58:	9204      	str	r2, [sp, #16]
 8009e5a:	2230      	movs	r2, #48	@ 0x30
 8009e5c:	f88a 2000 	strb.w	r2, [sl]
 8009e60:	781a      	ldrb	r2, [r3, #0]
 8009e62:	3201      	adds	r2, #1
 8009e64:	701a      	strb	r2, [r3, #0]
 8009e66:	e7bd      	b.n	8009de4 <_dtoa_r+0x65c>
 8009e68:	2200      	movs	r2, #0
 8009e6a:	4b09      	ldr	r3, [pc, #36]	@ (8009e90 <_dtoa_r+0x708>)
 8009e6c:	f7f6 fb34 	bl	80004d8 <__aeabi_dmul>
 8009e70:	2200      	movs	r2, #0
 8009e72:	2300      	movs	r3, #0
 8009e74:	4604      	mov	r4, r0
 8009e76:	460d      	mov	r5, r1
 8009e78:	f7f6 fd96 	bl	80009a8 <__aeabi_dcmpeq>
 8009e7c:	2800      	cmp	r0, #0
 8009e7e:	f43f aebc 	beq.w	8009bfa <_dtoa_r+0x472>
 8009e82:	e6f1      	b.n	8009c68 <_dtoa_r+0x4e0>
 8009e84:	0800ce88 	.word	0x0800ce88
 8009e88:	3fe00000 	.word	0x3fe00000
 8009e8c:	3ff00000 	.word	0x3ff00000
 8009e90:	40240000 	.word	0x40240000
 8009e94:	40140000 	.word	0x40140000
 8009e98:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009e9a:	2a00      	cmp	r2, #0
 8009e9c:	f000 80db 	beq.w	800a056 <_dtoa_r+0x8ce>
 8009ea0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009ea2:	2a01      	cmp	r2, #1
 8009ea4:	f300 80bf 	bgt.w	800a026 <_dtoa_r+0x89e>
 8009ea8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009eaa:	2a00      	cmp	r2, #0
 8009eac:	f000 80b7 	beq.w	800a01e <_dtoa_r+0x896>
 8009eb0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009eb4:	4646      	mov	r6, r8
 8009eb6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009eb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009eba:	2101      	movs	r1, #1
 8009ebc:	441a      	add	r2, r3
 8009ebe:	4658      	mov	r0, fp
 8009ec0:	4498      	add	r8, r3
 8009ec2:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ec4:	f000 fc64 	bl	800a790 <__i2b>
 8009ec8:	4605      	mov	r5, r0
 8009eca:	b15e      	cbz	r6, 8009ee4 <_dtoa_r+0x75c>
 8009ecc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	dd08      	ble.n	8009ee4 <_dtoa_r+0x75c>
 8009ed2:	42b3      	cmp	r3, r6
 8009ed4:	bfa8      	it	ge
 8009ed6:	4633      	movge	r3, r6
 8009ed8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009eda:	eba8 0803 	sub.w	r8, r8, r3
 8009ede:	1af6      	subs	r6, r6, r3
 8009ee0:	1ad3      	subs	r3, r2, r3
 8009ee2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ee4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ee6:	b1f3      	cbz	r3, 8009f26 <_dtoa_r+0x79e>
 8009ee8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	f000 80b7 	beq.w	800a05e <_dtoa_r+0x8d6>
 8009ef0:	b18c      	cbz	r4, 8009f16 <_dtoa_r+0x78e>
 8009ef2:	4629      	mov	r1, r5
 8009ef4:	4622      	mov	r2, r4
 8009ef6:	4658      	mov	r0, fp
 8009ef8:	f000 fd08 	bl	800a90c <__pow5mult>
 8009efc:	464a      	mov	r2, r9
 8009efe:	4601      	mov	r1, r0
 8009f00:	4605      	mov	r5, r0
 8009f02:	4658      	mov	r0, fp
 8009f04:	f000 fc5a 	bl	800a7bc <__multiply>
 8009f08:	4649      	mov	r1, r9
 8009f0a:	9004      	str	r0, [sp, #16]
 8009f0c:	4658      	mov	r0, fp
 8009f0e:	f000 fb41 	bl	800a594 <_Bfree>
 8009f12:	9b04      	ldr	r3, [sp, #16]
 8009f14:	4699      	mov	r9, r3
 8009f16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f18:	1b1a      	subs	r2, r3, r4
 8009f1a:	d004      	beq.n	8009f26 <_dtoa_r+0x79e>
 8009f1c:	4649      	mov	r1, r9
 8009f1e:	4658      	mov	r0, fp
 8009f20:	f000 fcf4 	bl	800a90c <__pow5mult>
 8009f24:	4681      	mov	r9, r0
 8009f26:	2101      	movs	r1, #1
 8009f28:	4658      	mov	r0, fp
 8009f2a:	f000 fc31 	bl	800a790 <__i2b>
 8009f2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f30:	4604      	mov	r4, r0
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	f000 81c9 	beq.w	800a2ca <_dtoa_r+0xb42>
 8009f38:	461a      	mov	r2, r3
 8009f3a:	4601      	mov	r1, r0
 8009f3c:	4658      	mov	r0, fp
 8009f3e:	f000 fce5 	bl	800a90c <__pow5mult>
 8009f42:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009f44:	4604      	mov	r4, r0
 8009f46:	2b01      	cmp	r3, #1
 8009f48:	f300 808f 	bgt.w	800a06a <_dtoa_r+0x8e2>
 8009f4c:	9b02      	ldr	r3, [sp, #8]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	f040 8087 	bne.w	800a062 <_dtoa_r+0x8da>
 8009f54:	9b03      	ldr	r3, [sp, #12]
 8009f56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	f040 8083 	bne.w	800a066 <_dtoa_r+0x8de>
 8009f60:	9b03      	ldr	r3, [sp, #12]
 8009f62:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009f66:	0d1b      	lsrs	r3, r3, #20
 8009f68:	051b      	lsls	r3, r3, #20
 8009f6a:	b12b      	cbz	r3, 8009f78 <_dtoa_r+0x7f0>
 8009f6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f6e:	f108 0801 	add.w	r8, r8, #1
 8009f72:	3301      	adds	r3, #1
 8009f74:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f76:	2301      	movs	r3, #1
 8009f78:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	f000 81aa 	beq.w	800a2d6 <_dtoa_r+0xb4e>
 8009f82:	6923      	ldr	r3, [r4, #16]
 8009f84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009f88:	6918      	ldr	r0, [r3, #16]
 8009f8a:	f000 fbb5 	bl	800a6f8 <__hi0bits>
 8009f8e:	f1c0 0020 	rsb	r0, r0, #32
 8009f92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f94:	4418      	add	r0, r3
 8009f96:	f010 001f 	ands.w	r0, r0, #31
 8009f9a:	d071      	beq.n	800a080 <_dtoa_r+0x8f8>
 8009f9c:	f1c0 0320 	rsb	r3, r0, #32
 8009fa0:	2b04      	cmp	r3, #4
 8009fa2:	dd65      	ble.n	800a070 <_dtoa_r+0x8e8>
 8009fa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fa6:	f1c0 001c 	rsb	r0, r0, #28
 8009faa:	4403      	add	r3, r0
 8009fac:	4480      	add	r8, r0
 8009fae:	4406      	add	r6, r0
 8009fb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fb2:	f1b8 0f00 	cmp.w	r8, #0
 8009fb6:	dd05      	ble.n	8009fc4 <_dtoa_r+0x83c>
 8009fb8:	4649      	mov	r1, r9
 8009fba:	4642      	mov	r2, r8
 8009fbc:	4658      	mov	r0, fp
 8009fbe:	f000 fcff 	bl	800a9c0 <__lshift>
 8009fc2:	4681      	mov	r9, r0
 8009fc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	dd05      	ble.n	8009fd6 <_dtoa_r+0x84e>
 8009fca:	4621      	mov	r1, r4
 8009fcc:	461a      	mov	r2, r3
 8009fce:	4658      	mov	r0, fp
 8009fd0:	f000 fcf6 	bl	800a9c0 <__lshift>
 8009fd4:	4604      	mov	r4, r0
 8009fd6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d053      	beq.n	800a084 <_dtoa_r+0x8fc>
 8009fdc:	4621      	mov	r1, r4
 8009fde:	4648      	mov	r0, r9
 8009fe0:	f000 fd5a 	bl	800aa98 <__mcmp>
 8009fe4:	2800      	cmp	r0, #0
 8009fe6:	da4d      	bge.n	800a084 <_dtoa_r+0x8fc>
 8009fe8:	1e7b      	subs	r3, r7, #1
 8009fea:	4649      	mov	r1, r9
 8009fec:	9304      	str	r3, [sp, #16]
 8009fee:	220a      	movs	r2, #10
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	4658      	mov	r0, fp
 8009ff4:	f000 faf0 	bl	800a5d8 <__multadd>
 8009ff8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ffa:	4681      	mov	r9, r0
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	f000 816c 	beq.w	800a2da <_dtoa_r+0xb52>
 800a002:	2300      	movs	r3, #0
 800a004:	4629      	mov	r1, r5
 800a006:	220a      	movs	r2, #10
 800a008:	4658      	mov	r0, fp
 800a00a:	f000 fae5 	bl	800a5d8 <__multadd>
 800a00e:	9b08      	ldr	r3, [sp, #32]
 800a010:	4605      	mov	r5, r0
 800a012:	2b00      	cmp	r3, #0
 800a014:	dc61      	bgt.n	800a0da <_dtoa_r+0x952>
 800a016:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a018:	2b02      	cmp	r3, #2
 800a01a:	dc3b      	bgt.n	800a094 <_dtoa_r+0x90c>
 800a01c:	e05d      	b.n	800a0da <_dtoa_r+0x952>
 800a01e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a020:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a024:	e746      	b.n	8009eb4 <_dtoa_r+0x72c>
 800a026:	9b07      	ldr	r3, [sp, #28]
 800a028:	1e5c      	subs	r4, r3, #1
 800a02a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a02c:	42a3      	cmp	r3, r4
 800a02e:	bfbf      	itttt	lt
 800a030:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a032:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800a034:	1ae3      	sublt	r3, r4, r3
 800a036:	18d2      	addlt	r2, r2, r3
 800a038:	bfa8      	it	ge
 800a03a:	1b1c      	subge	r4, r3, r4
 800a03c:	9b07      	ldr	r3, [sp, #28]
 800a03e:	bfbe      	ittt	lt
 800a040:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a042:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800a044:	2400      	movlt	r4, #0
 800a046:	2b00      	cmp	r3, #0
 800a048:	bfb5      	itete	lt
 800a04a:	eba8 0603 	sublt.w	r6, r8, r3
 800a04e:	4646      	movge	r6, r8
 800a050:	2300      	movlt	r3, #0
 800a052:	9b07      	ldrge	r3, [sp, #28]
 800a054:	e730      	b.n	8009eb8 <_dtoa_r+0x730>
 800a056:	4646      	mov	r6, r8
 800a058:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a05a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a05c:	e735      	b.n	8009eca <_dtoa_r+0x742>
 800a05e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a060:	e75c      	b.n	8009f1c <_dtoa_r+0x794>
 800a062:	2300      	movs	r3, #0
 800a064:	e788      	b.n	8009f78 <_dtoa_r+0x7f0>
 800a066:	9b02      	ldr	r3, [sp, #8]
 800a068:	e786      	b.n	8009f78 <_dtoa_r+0x7f0>
 800a06a:	2300      	movs	r3, #0
 800a06c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a06e:	e788      	b.n	8009f82 <_dtoa_r+0x7fa>
 800a070:	d09f      	beq.n	8009fb2 <_dtoa_r+0x82a>
 800a072:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a074:	331c      	adds	r3, #28
 800a076:	441a      	add	r2, r3
 800a078:	4498      	add	r8, r3
 800a07a:	441e      	add	r6, r3
 800a07c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a07e:	e798      	b.n	8009fb2 <_dtoa_r+0x82a>
 800a080:	4603      	mov	r3, r0
 800a082:	e7f6      	b.n	800a072 <_dtoa_r+0x8ea>
 800a084:	9b07      	ldr	r3, [sp, #28]
 800a086:	9704      	str	r7, [sp, #16]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	dc20      	bgt.n	800a0ce <_dtoa_r+0x946>
 800a08c:	9308      	str	r3, [sp, #32]
 800a08e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a090:	2b02      	cmp	r3, #2
 800a092:	dd1e      	ble.n	800a0d2 <_dtoa_r+0x94a>
 800a094:	9b08      	ldr	r3, [sp, #32]
 800a096:	2b00      	cmp	r3, #0
 800a098:	f47f aebc 	bne.w	8009e14 <_dtoa_r+0x68c>
 800a09c:	4621      	mov	r1, r4
 800a09e:	2205      	movs	r2, #5
 800a0a0:	4658      	mov	r0, fp
 800a0a2:	f000 fa99 	bl	800a5d8 <__multadd>
 800a0a6:	4601      	mov	r1, r0
 800a0a8:	4604      	mov	r4, r0
 800a0aa:	4648      	mov	r0, r9
 800a0ac:	f000 fcf4 	bl	800aa98 <__mcmp>
 800a0b0:	2800      	cmp	r0, #0
 800a0b2:	f77f aeaf 	ble.w	8009e14 <_dtoa_r+0x68c>
 800a0b6:	2331      	movs	r3, #49	@ 0x31
 800a0b8:	4656      	mov	r6, sl
 800a0ba:	f806 3b01 	strb.w	r3, [r6], #1
 800a0be:	9b04      	ldr	r3, [sp, #16]
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	9304      	str	r3, [sp, #16]
 800a0c4:	e6aa      	b.n	8009e1c <_dtoa_r+0x694>
 800a0c6:	9c07      	ldr	r4, [sp, #28]
 800a0c8:	9704      	str	r7, [sp, #16]
 800a0ca:	4625      	mov	r5, r4
 800a0cc:	e7f3      	b.n	800a0b6 <_dtoa_r+0x92e>
 800a0ce:	9b07      	ldr	r3, [sp, #28]
 800a0d0:	9308      	str	r3, [sp, #32]
 800a0d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	f000 8104 	beq.w	800a2e2 <_dtoa_r+0xb5a>
 800a0da:	2e00      	cmp	r6, #0
 800a0dc:	dd05      	ble.n	800a0ea <_dtoa_r+0x962>
 800a0de:	4629      	mov	r1, r5
 800a0e0:	4632      	mov	r2, r6
 800a0e2:	4658      	mov	r0, fp
 800a0e4:	f000 fc6c 	bl	800a9c0 <__lshift>
 800a0e8:	4605      	mov	r5, r0
 800a0ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d05a      	beq.n	800a1a6 <_dtoa_r+0xa1e>
 800a0f0:	4658      	mov	r0, fp
 800a0f2:	6869      	ldr	r1, [r5, #4]
 800a0f4:	f000 fa0e 	bl	800a514 <_Balloc>
 800a0f8:	4606      	mov	r6, r0
 800a0fa:	b928      	cbnz	r0, 800a108 <_dtoa_r+0x980>
 800a0fc:	4602      	mov	r2, r0
 800a0fe:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a102:	4b83      	ldr	r3, [pc, #524]	@ (800a310 <_dtoa_r+0xb88>)
 800a104:	f7ff bb54 	b.w	80097b0 <_dtoa_r+0x28>
 800a108:	692a      	ldr	r2, [r5, #16]
 800a10a:	f105 010c 	add.w	r1, r5, #12
 800a10e:	3202      	adds	r2, #2
 800a110:	0092      	lsls	r2, r2, #2
 800a112:	300c      	adds	r0, #12
 800a114:	f7ff fa9b 	bl	800964e <memcpy>
 800a118:	2201      	movs	r2, #1
 800a11a:	4631      	mov	r1, r6
 800a11c:	4658      	mov	r0, fp
 800a11e:	f000 fc4f 	bl	800a9c0 <__lshift>
 800a122:	462f      	mov	r7, r5
 800a124:	4605      	mov	r5, r0
 800a126:	f10a 0301 	add.w	r3, sl, #1
 800a12a:	9307      	str	r3, [sp, #28]
 800a12c:	9b08      	ldr	r3, [sp, #32]
 800a12e:	4453      	add	r3, sl
 800a130:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a132:	9b02      	ldr	r3, [sp, #8]
 800a134:	f003 0301 	and.w	r3, r3, #1
 800a138:	930a      	str	r3, [sp, #40]	@ 0x28
 800a13a:	9b07      	ldr	r3, [sp, #28]
 800a13c:	4621      	mov	r1, r4
 800a13e:	3b01      	subs	r3, #1
 800a140:	4648      	mov	r0, r9
 800a142:	9302      	str	r3, [sp, #8]
 800a144:	f7ff fa96 	bl	8009674 <quorem>
 800a148:	4639      	mov	r1, r7
 800a14a:	9008      	str	r0, [sp, #32]
 800a14c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a150:	4648      	mov	r0, r9
 800a152:	f000 fca1 	bl	800aa98 <__mcmp>
 800a156:	462a      	mov	r2, r5
 800a158:	9009      	str	r0, [sp, #36]	@ 0x24
 800a15a:	4621      	mov	r1, r4
 800a15c:	4658      	mov	r0, fp
 800a15e:	f000 fcb7 	bl	800aad0 <__mdiff>
 800a162:	68c2      	ldr	r2, [r0, #12]
 800a164:	4606      	mov	r6, r0
 800a166:	bb02      	cbnz	r2, 800a1aa <_dtoa_r+0xa22>
 800a168:	4601      	mov	r1, r0
 800a16a:	4648      	mov	r0, r9
 800a16c:	f000 fc94 	bl	800aa98 <__mcmp>
 800a170:	4602      	mov	r2, r0
 800a172:	4631      	mov	r1, r6
 800a174:	4658      	mov	r0, fp
 800a176:	920c      	str	r2, [sp, #48]	@ 0x30
 800a178:	f000 fa0c 	bl	800a594 <_Bfree>
 800a17c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a17e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a180:	9e07      	ldr	r6, [sp, #28]
 800a182:	ea43 0102 	orr.w	r1, r3, r2
 800a186:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a188:	4319      	orrs	r1, r3
 800a18a:	d110      	bne.n	800a1ae <_dtoa_r+0xa26>
 800a18c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a190:	d029      	beq.n	800a1e6 <_dtoa_r+0xa5e>
 800a192:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a194:	2b00      	cmp	r3, #0
 800a196:	dd02      	ble.n	800a19e <_dtoa_r+0xa16>
 800a198:	9b08      	ldr	r3, [sp, #32]
 800a19a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a19e:	9b02      	ldr	r3, [sp, #8]
 800a1a0:	f883 8000 	strb.w	r8, [r3]
 800a1a4:	e63b      	b.n	8009e1e <_dtoa_r+0x696>
 800a1a6:	4628      	mov	r0, r5
 800a1a8:	e7bb      	b.n	800a122 <_dtoa_r+0x99a>
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	e7e1      	b.n	800a172 <_dtoa_r+0x9ea>
 800a1ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	db04      	blt.n	800a1be <_dtoa_r+0xa36>
 800a1b4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800a1b6:	430b      	orrs	r3, r1
 800a1b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a1ba:	430b      	orrs	r3, r1
 800a1bc:	d120      	bne.n	800a200 <_dtoa_r+0xa78>
 800a1be:	2a00      	cmp	r2, #0
 800a1c0:	dded      	ble.n	800a19e <_dtoa_r+0xa16>
 800a1c2:	4649      	mov	r1, r9
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	4658      	mov	r0, fp
 800a1c8:	f000 fbfa 	bl	800a9c0 <__lshift>
 800a1cc:	4621      	mov	r1, r4
 800a1ce:	4681      	mov	r9, r0
 800a1d0:	f000 fc62 	bl	800aa98 <__mcmp>
 800a1d4:	2800      	cmp	r0, #0
 800a1d6:	dc03      	bgt.n	800a1e0 <_dtoa_r+0xa58>
 800a1d8:	d1e1      	bne.n	800a19e <_dtoa_r+0xa16>
 800a1da:	f018 0f01 	tst.w	r8, #1
 800a1de:	d0de      	beq.n	800a19e <_dtoa_r+0xa16>
 800a1e0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a1e4:	d1d8      	bne.n	800a198 <_dtoa_r+0xa10>
 800a1e6:	2339      	movs	r3, #57	@ 0x39
 800a1e8:	9a02      	ldr	r2, [sp, #8]
 800a1ea:	7013      	strb	r3, [r2, #0]
 800a1ec:	4633      	mov	r3, r6
 800a1ee:	461e      	mov	r6, r3
 800a1f0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a1f4:	3b01      	subs	r3, #1
 800a1f6:	2a39      	cmp	r2, #57	@ 0x39
 800a1f8:	d052      	beq.n	800a2a0 <_dtoa_r+0xb18>
 800a1fa:	3201      	adds	r2, #1
 800a1fc:	701a      	strb	r2, [r3, #0]
 800a1fe:	e60e      	b.n	8009e1e <_dtoa_r+0x696>
 800a200:	2a00      	cmp	r2, #0
 800a202:	dd07      	ble.n	800a214 <_dtoa_r+0xa8c>
 800a204:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a208:	d0ed      	beq.n	800a1e6 <_dtoa_r+0xa5e>
 800a20a:	9a02      	ldr	r2, [sp, #8]
 800a20c:	f108 0301 	add.w	r3, r8, #1
 800a210:	7013      	strb	r3, [r2, #0]
 800a212:	e604      	b.n	8009e1e <_dtoa_r+0x696>
 800a214:	9b07      	ldr	r3, [sp, #28]
 800a216:	9a07      	ldr	r2, [sp, #28]
 800a218:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a21c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a21e:	4293      	cmp	r3, r2
 800a220:	d028      	beq.n	800a274 <_dtoa_r+0xaec>
 800a222:	4649      	mov	r1, r9
 800a224:	2300      	movs	r3, #0
 800a226:	220a      	movs	r2, #10
 800a228:	4658      	mov	r0, fp
 800a22a:	f000 f9d5 	bl	800a5d8 <__multadd>
 800a22e:	42af      	cmp	r7, r5
 800a230:	4681      	mov	r9, r0
 800a232:	f04f 0300 	mov.w	r3, #0
 800a236:	f04f 020a 	mov.w	r2, #10
 800a23a:	4639      	mov	r1, r7
 800a23c:	4658      	mov	r0, fp
 800a23e:	d107      	bne.n	800a250 <_dtoa_r+0xac8>
 800a240:	f000 f9ca 	bl	800a5d8 <__multadd>
 800a244:	4607      	mov	r7, r0
 800a246:	4605      	mov	r5, r0
 800a248:	9b07      	ldr	r3, [sp, #28]
 800a24a:	3301      	adds	r3, #1
 800a24c:	9307      	str	r3, [sp, #28]
 800a24e:	e774      	b.n	800a13a <_dtoa_r+0x9b2>
 800a250:	f000 f9c2 	bl	800a5d8 <__multadd>
 800a254:	4629      	mov	r1, r5
 800a256:	4607      	mov	r7, r0
 800a258:	2300      	movs	r3, #0
 800a25a:	220a      	movs	r2, #10
 800a25c:	4658      	mov	r0, fp
 800a25e:	f000 f9bb 	bl	800a5d8 <__multadd>
 800a262:	4605      	mov	r5, r0
 800a264:	e7f0      	b.n	800a248 <_dtoa_r+0xac0>
 800a266:	9b08      	ldr	r3, [sp, #32]
 800a268:	2700      	movs	r7, #0
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	bfcc      	ite	gt
 800a26e:	461e      	movgt	r6, r3
 800a270:	2601      	movle	r6, #1
 800a272:	4456      	add	r6, sl
 800a274:	4649      	mov	r1, r9
 800a276:	2201      	movs	r2, #1
 800a278:	4658      	mov	r0, fp
 800a27a:	f000 fba1 	bl	800a9c0 <__lshift>
 800a27e:	4621      	mov	r1, r4
 800a280:	4681      	mov	r9, r0
 800a282:	f000 fc09 	bl	800aa98 <__mcmp>
 800a286:	2800      	cmp	r0, #0
 800a288:	dcb0      	bgt.n	800a1ec <_dtoa_r+0xa64>
 800a28a:	d102      	bne.n	800a292 <_dtoa_r+0xb0a>
 800a28c:	f018 0f01 	tst.w	r8, #1
 800a290:	d1ac      	bne.n	800a1ec <_dtoa_r+0xa64>
 800a292:	4633      	mov	r3, r6
 800a294:	461e      	mov	r6, r3
 800a296:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a29a:	2a30      	cmp	r2, #48	@ 0x30
 800a29c:	d0fa      	beq.n	800a294 <_dtoa_r+0xb0c>
 800a29e:	e5be      	b.n	8009e1e <_dtoa_r+0x696>
 800a2a0:	459a      	cmp	sl, r3
 800a2a2:	d1a4      	bne.n	800a1ee <_dtoa_r+0xa66>
 800a2a4:	9b04      	ldr	r3, [sp, #16]
 800a2a6:	3301      	adds	r3, #1
 800a2a8:	9304      	str	r3, [sp, #16]
 800a2aa:	2331      	movs	r3, #49	@ 0x31
 800a2ac:	f88a 3000 	strb.w	r3, [sl]
 800a2b0:	e5b5      	b.n	8009e1e <_dtoa_r+0x696>
 800a2b2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a2b4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a314 <_dtoa_r+0xb8c>
 800a2b8:	b11b      	cbz	r3, 800a2c2 <_dtoa_r+0xb3a>
 800a2ba:	f10a 0308 	add.w	r3, sl, #8
 800a2be:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a2c0:	6013      	str	r3, [r2, #0]
 800a2c2:	4650      	mov	r0, sl
 800a2c4:	b017      	add	sp, #92	@ 0x5c
 800a2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	f77f ae3d 	ble.w	8009f4c <_dtoa_r+0x7c4>
 800a2d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a2d4:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2d6:	2001      	movs	r0, #1
 800a2d8:	e65b      	b.n	8009f92 <_dtoa_r+0x80a>
 800a2da:	9b08      	ldr	r3, [sp, #32]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	f77f aed6 	ble.w	800a08e <_dtoa_r+0x906>
 800a2e2:	4656      	mov	r6, sl
 800a2e4:	4621      	mov	r1, r4
 800a2e6:	4648      	mov	r0, r9
 800a2e8:	f7ff f9c4 	bl	8009674 <quorem>
 800a2ec:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a2f0:	9b08      	ldr	r3, [sp, #32]
 800a2f2:	f806 8b01 	strb.w	r8, [r6], #1
 800a2f6:	eba6 020a 	sub.w	r2, r6, sl
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	ddb3      	ble.n	800a266 <_dtoa_r+0xade>
 800a2fe:	4649      	mov	r1, r9
 800a300:	2300      	movs	r3, #0
 800a302:	220a      	movs	r2, #10
 800a304:	4658      	mov	r0, fp
 800a306:	f000 f967 	bl	800a5d8 <__multadd>
 800a30a:	4681      	mov	r9, r0
 800a30c:	e7ea      	b.n	800a2e4 <_dtoa_r+0xb5c>
 800a30e:	bf00      	nop
 800a310:	0800cde3 	.word	0x0800cde3
 800a314:	0800cd67 	.word	0x0800cd67

0800a318 <_free_r>:
 800a318:	b538      	push	{r3, r4, r5, lr}
 800a31a:	4605      	mov	r5, r0
 800a31c:	2900      	cmp	r1, #0
 800a31e:	d040      	beq.n	800a3a2 <_free_r+0x8a>
 800a320:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a324:	1f0c      	subs	r4, r1, #4
 800a326:	2b00      	cmp	r3, #0
 800a328:	bfb8      	it	lt
 800a32a:	18e4      	addlt	r4, r4, r3
 800a32c:	f000 f8e6 	bl	800a4fc <__malloc_lock>
 800a330:	4a1c      	ldr	r2, [pc, #112]	@ (800a3a4 <_free_r+0x8c>)
 800a332:	6813      	ldr	r3, [r2, #0]
 800a334:	b933      	cbnz	r3, 800a344 <_free_r+0x2c>
 800a336:	6063      	str	r3, [r4, #4]
 800a338:	6014      	str	r4, [r2, #0]
 800a33a:	4628      	mov	r0, r5
 800a33c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a340:	f000 b8e2 	b.w	800a508 <__malloc_unlock>
 800a344:	42a3      	cmp	r3, r4
 800a346:	d908      	bls.n	800a35a <_free_r+0x42>
 800a348:	6820      	ldr	r0, [r4, #0]
 800a34a:	1821      	adds	r1, r4, r0
 800a34c:	428b      	cmp	r3, r1
 800a34e:	bf01      	itttt	eq
 800a350:	6819      	ldreq	r1, [r3, #0]
 800a352:	685b      	ldreq	r3, [r3, #4]
 800a354:	1809      	addeq	r1, r1, r0
 800a356:	6021      	streq	r1, [r4, #0]
 800a358:	e7ed      	b.n	800a336 <_free_r+0x1e>
 800a35a:	461a      	mov	r2, r3
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	b10b      	cbz	r3, 800a364 <_free_r+0x4c>
 800a360:	42a3      	cmp	r3, r4
 800a362:	d9fa      	bls.n	800a35a <_free_r+0x42>
 800a364:	6811      	ldr	r1, [r2, #0]
 800a366:	1850      	adds	r0, r2, r1
 800a368:	42a0      	cmp	r0, r4
 800a36a:	d10b      	bne.n	800a384 <_free_r+0x6c>
 800a36c:	6820      	ldr	r0, [r4, #0]
 800a36e:	4401      	add	r1, r0
 800a370:	1850      	adds	r0, r2, r1
 800a372:	4283      	cmp	r3, r0
 800a374:	6011      	str	r1, [r2, #0]
 800a376:	d1e0      	bne.n	800a33a <_free_r+0x22>
 800a378:	6818      	ldr	r0, [r3, #0]
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	4408      	add	r0, r1
 800a37e:	6010      	str	r0, [r2, #0]
 800a380:	6053      	str	r3, [r2, #4]
 800a382:	e7da      	b.n	800a33a <_free_r+0x22>
 800a384:	d902      	bls.n	800a38c <_free_r+0x74>
 800a386:	230c      	movs	r3, #12
 800a388:	602b      	str	r3, [r5, #0]
 800a38a:	e7d6      	b.n	800a33a <_free_r+0x22>
 800a38c:	6820      	ldr	r0, [r4, #0]
 800a38e:	1821      	adds	r1, r4, r0
 800a390:	428b      	cmp	r3, r1
 800a392:	bf01      	itttt	eq
 800a394:	6819      	ldreq	r1, [r3, #0]
 800a396:	685b      	ldreq	r3, [r3, #4]
 800a398:	1809      	addeq	r1, r1, r0
 800a39a:	6021      	streq	r1, [r4, #0]
 800a39c:	6063      	str	r3, [r4, #4]
 800a39e:	6054      	str	r4, [r2, #4]
 800a3a0:	e7cb      	b.n	800a33a <_free_r+0x22>
 800a3a2:	bd38      	pop	{r3, r4, r5, pc}
 800a3a4:	20000d40 	.word	0x20000d40

0800a3a8 <malloc>:
 800a3a8:	4b02      	ldr	r3, [pc, #8]	@ (800a3b4 <malloc+0xc>)
 800a3aa:	4601      	mov	r1, r0
 800a3ac:	6818      	ldr	r0, [r3, #0]
 800a3ae:	f000 b825 	b.w	800a3fc <_malloc_r>
 800a3b2:	bf00      	nop
 800a3b4:	2000007c 	.word	0x2000007c

0800a3b8 <sbrk_aligned>:
 800a3b8:	b570      	push	{r4, r5, r6, lr}
 800a3ba:	4e0f      	ldr	r6, [pc, #60]	@ (800a3f8 <sbrk_aligned+0x40>)
 800a3bc:	460c      	mov	r4, r1
 800a3be:	6831      	ldr	r1, [r6, #0]
 800a3c0:	4605      	mov	r5, r0
 800a3c2:	b911      	cbnz	r1, 800a3ca <sbrk_aligned+0x12>
 800a3c4:	f001 ffca 	bl	800c35c <_sbrk_r>
 800a3c8:	6030      	str	r0, [r6, #0]
 800a3ca:	4621      	mov	r1, r4
 800a3cc:	4628      	mov	r0, r5
 800a3ce:	f001 ffc5 	bl	800c35c <_sbrk_r>
 800a3d2:	1c43      	adds	r3, r0, #1
 800a3d4:	d103      	bne.n	800a3de <sbrk_aligned+0x26>
 800a3d6:	f04f 34ff 	mov.w	r4, #4294967295
 800a3da:	4620      	mov	r0, r4
 800a3dc:	bd70      	pop	{r4, r5, r6, pc}
 800a3de:	1cc4      	adds	r4, r0, #3
 800a3e0:	f024 0403 	bic.w	r4, r4, #3
 800a3e4:	42a0      	cmp	r0, r4
 800a3e6:	d0f8      	beq.n	800a3da <sbrk_aligned+0x22>
 800a3e8:	1a21      	subs	r1, r4, r0
 800a3ea:	4628      	mov	r0, r5
 800a3ec:	f001 ffb6 	bl	800c35c <_sbrk_r>
 800a3f0:	3001      	adds	r0, #1
 800a3f2:	d1f2      	bne.n	800a3da <sbrk_aligned+0x22>
 800a3f4:	e7ef      	b.n	800a3d6 <sbrk_aligned+0x1e>
 800a3f6:	bf00      	nop
 800a3f8:	20000d3c 	.word	0x20000d3c

0800a3fc <_malloc_r>:
 800a3fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a400:	1ccd      	adds	r5, r1, #3
 800a402:	f025 0503 	bic.w	r5, r5, #3
 800a406:	3508      	adds	r5, #8
 800a408:	2d0c      	cmp	r5, #12
 800a40a:	bf38      	it	cc
 800a40c:	250c      	movcc	r5, #12
 800a40e:	2d00      	cmp	r5, #0
 800a410:	4606      	mov	r6, r0
 800a412:	db01      	blt.n	800a418 <_malloc_r+0x1c>
 800a414:	42a9      	cmp	r1, r5
 800a416:	d904      	bls.n	800a422 <_malloc_r+0x26>
 800a418:	230c      	movs	r3, #12
 800a41a:	6033      	str	r3, [r6, #0]
 800a41c:	2000      	movs	r0, #0
 800a41e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a422:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a4f8 <_malloc_r+0xfc>
 800a426:	f000 f869 	bl	800a4fc <__malloc_lock>
 800a42a:	f8d8 3000 	ldr.w	r3, [r8]
 800a42e:	461c      	mov	r4, r3
 800a430:	bb44      	cbnz	r4, 800a484 <_malloc_r+0x88>
 800a432:	4629      	mov	r1, r5
 800a434:	4630      	mov	r0, r6
 800a436:	f7ff ffbf 	bl	800a3b8 <sbrk_aligned>
 800a43a:	1c43      	adds	r3, r0, #1
 800a43c:	4604      	mov	r4, r0
 800a43e:	d158      	bne.n	800a4f2 <_malloc_r+0xf6>
 800a440:	f8d8 4000 	ldr.w	r4, [r8]
 800a444:	4627      	mov	r7, r4
 800a446:	2f00      	cmp	r7, #0
 800a448:	d143      	bne.n	800a4d2 <_malloc_r+0xd6>
 800a44a:	2c00      	cmp	r4, #0
 800a44c:	d04b      	beq.n	800a4e6 <_malloc_r+0xea>
 800a44e:	6823      	ldr	r3, [r4, #0]
 800a450:	4639      	mov	r1, r7
 800a452:	4630      	mov	r0, r6
 800a454:	eb04 0903 	add.w	r9, r4, r3
 800a458:	f001 ff80 	bl	800c35c <_sbrk_r>
 800a45c:	4581      	cmp	r9, r0
 800a45e:	d142      	bne.n	800a4e6 <_malloc_r+0xea>
 800a460:	6821      	ldr	r1, [r4, #0]
 800a462:	4630      	mov	r0, r6
 800a464:	1a6d      	subs	r5, r5, r1
 800a466:	4629      	mov	r1, r5
 800a468:	f7ff ffa6 	bl	800a3b8 <sbrk_aligned>
 800a46c:	3001      	adds	r0, #1
 800a46e:	d03a      	beq.n	800a4e6 <_malloc_r+0xea>
 800a470:	6823      	ldr	r3, [r4, #0]
 800a472:	442b      	add	r3, r5
 800a474:	6023      	str	r3, [r4, #0]
 800a476:	f8d8 3000 	ldr.w	r3, [r8]
 800a47a:	685a      	ldr	r2, [r3, #4]
 800a47c:	bb62      	cbnz	r2, 800a4d8 <_malloc_r+0xdc>
 800a47e:	f8c8 7000 	str.w	r7, [r8]
 800a482:	e00f      	b.n	800a4a4 <_malloc_r+0xa8>
 800a484:	6822      	ldr	r2, [r4, #0]
 800a486:	1b52      	subs	r2, r2, r5
 800a488:	d420      	bmi.n	800a4cc <_malloc_r+0xd0>
 800a48a:	2a0b      	cmp	r2, #11
 800a48c:	d917      	bls.n	800a4be <_malloc_r+0xc2>
 800a48e:	1961      	adds	r1, r4, r5
 800a490:	42a3      	cmp	r3, r4
 800a492:	6025      	str	r5, [r4, #0]
 800a494:	bf18      	it	ne
 800a496:	6059      	strne	r1, [r3, #4]
 800a498:	6863      	ldr	r3, [r4, #4]
 800a49a:	bf08      	it	eq
 800a49c:	f8c8 1000 	streq.w	r1, [r8]
 800a4a0:	5162      	str	r2, [r4, r5]
 800a4a2:	604b      	str	r3, [r1, #4]
 800a4a4:	4630      	mov	r0, r6
 800a4a6:	f000 f82f 	bl	800a508 <__malloc_unlock>
 800a4aa:	f104 000b 	add.w	r0, r4, #11
 800a4ae:	1d23      	adds	r3, r4, #4
 800a4b0:	f020 0007 	bic.w	r0, r0, #7
 800a4b4:	1ac2      	subs	r2, r0, r3
 800a4b6:	bf1c      	itt	ne
 800a4b8:	1a1b      	subne	r3, r3, r0
 800a4ba:	50a3      	strne	r3, [r4, r2]
 800a4bc:	e7af      	b.n	800a41e <_malloc_r+0x22>
 800a4be:	6862      	ldr	r2, [r4, #4]
 800a4c0:	42a3      	cmp	r3, r4
 800a4c2:	bf0c      	ite	eq
 800a4c4:	f8c8 2000 	streq.w	r2, [r8]
 800a4c8:	605a      	strne	r2, [r3, #4]
 800a4ca:	e7eb      	b.n	800a4a4 <_malloc_r+0xa8>
 800a4cc:	4623      	mov	r3, r4
 800a4ce:	6864      	ldr	r4, [r4, #4]
 800a4d0:	e7ae      	b.n	800a430 <_malloc_r+0x34>
 800a4d2:	463c      	mov	r4, r7
 800a4d4:	687f      	ldr	r7, [r7, #4]
 800a4d6:	e7b6      	b.n	800a446 <_malloc_r+0x4a>
 800a4d8:	461a      	mov	r2, r3
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	42a3      	cmp	r3, r4
 800a4de:	d1fb      	bne.n	800a4d8 <_malloc_r+0xdc>
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	6053      	str	r3, [r2, #4]
 800a4e4:	e7de      	b.n	800a4a4 <_malloc_r+0xa8>
 800a4e6:	230c      	movs	r3, #12
 800a4e8:	4630      	mov	r0, r6
 800a4ea:	6033      	str	r3, [r6, #0]
 800a4ec:	f000 f80c 	bl	800a508 <__malloc_unlock>
 800a4f0:	e794      	b.n	800a41c <_malloc_r+0x20>
 800a4f2:	6005      	str	r5, [r0, #0]
 800a4f4:	e7d6      	b.n	800a4a4 <_malloc_r+0xa8>
 800a4f6:	bf00      	nop
 800a4f8:	20000d40 	.word	0x20000d40

0800a4fc <__malloc_lock>:
 800a4fc:	4801      	ldr	r0, [pc, #4]	@ (800a504 <__malloc_lock+0x8>)
 800a4fe:	f7ff b896 	b.w	800962e <__retarget_lock_acquire_recursive>
 800a502:	bf00      	nop
 800a504:	20000d38 	.word	0x20000d38

0800a508 <__malloc_unlock>:
 800a508:	4801      	ldr	r0, [pc, #4]	@ (800a510 <__malloc_unlock+0x8>)
 800a50a:	f7ff b891 	b.w	8009630 <__retarget_lock_release_recursive>
 800a50e:	bf00      	nop
 800a510:	20000d38 	.word	0x20000d38

0800a514 <_Balloc>:
 800a514:	b570      	push	{r4, r5, r6, lr}
 800a516:	69c6      	ldr	r6, [r0, #28]
 800a518:	4604      	mov	r4, r0
 800a51a:	460d      	mov	r5, r1
 800a51c:	b976      	cbnz	r6, 800a53c <_Balloc+0x28>
 800a51e:	2010      	movs	r0, #16
 800a520:	f7ff ff42 	bl	800a3a8 <malloc>
 800a524:	4602      	mov	r2, r0
 800a526:	61e0      	str	r0, [r4, #28]
 800a528:	b920      	cbnz	r0, 800a534 <_Balloc+0x20>
 800a52a:	216b      	movs	r1, #107	@ 0x6b
 800a52c:	4b17      	ldr	r3, [pc, #92]	@ (800a58c <_Balloc+0x78>)
 800a52e:	4818      	ldr	r0, [pc, #96]	@ (800a590 <_Balloc+0x7c>)
 800a530:	f001 ff2a 	bl	800c388 <__assert_func>
 800a534:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a538:	6006      	str	r6, [r0, #0]
 800a53a:	60c6      	str	r6, [r0, #12]
 800a53c:	69e6      	ldr	r6, [r4, #28]
 800a53e:	68f3      	ldr	r3, [r6, #12]
 800a540:	b183      	cbz	r3, 800a564 <_Balloc+0x50>
 800a542:	69e3      	ldr	r3, [r4, #28]
 800a544:	68db      	ldr	r3, [r3, #12]
 800a546:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a54a:	b9b8      	cbnz	r0, 800a57c <_Balloc+0x68>
 800a54c:	2101      	movs	r1, #1
 800a54e:	fa01 f605 	lsl.w	r6, r1, r5
 800a552:	1d72      	adds	r2, r6, #5
 800a554:	4620      	mov	r0, r4
 800a556:	0092      	lsls	r2, r2, #2
 800a558:	f001 ff34 	bl	800c3c4 <_calloc_r>
 800a55c:	b160      	cbz	r0, 800a578 <_Balloc+0x64>
 800a55e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a562:	e00e      	b.n	800a582 <_Balloc+0x6e>
 800a564:	2221      	movs	r2, #33	@ 0x21
 800a566:	2104      	movs	r1, #4
 800a568:	4620      	mov	r0, r4
 800a56a:	f001 ff2b 	bl	800c3c4 <_calloc_r>
 800a56e:	69e3      	ldr	r3, [r4, #28]
 800a570:	60f0      	str	r0, [r6, #12]
 800a572:	68db      	ldr	r3, [r3, #12]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d1e4      	bne.n	800a542 <_Balloc+0x2e>
 800a578:	2000      	movs	r0, #0
 800a57a:	bd70      	pop	{r4, r5, r6, pc}
 800a57c:	6802      	ldr	r2, [r0, #0]
 800a57e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a582:	2300      	movs	r3, #0
 800a584:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a588:	e7f7      	b.n	800a57a <_Balloc+0x66>
 800a58a:	bf00      	nop
 800a58c:	0800cd74 	.word	0x0800cd74
 800a590:	0800cdf4 	.word	0x0800cdf4

0800a594 <_Bfree>:
 800a594:	b570      	push	{r4, r5, r6, lr}
 800a596:	69c6      	ldr	r6, [r0, #28]
 800a598:	4605      	mov	r5, r0
 800a59a:	460c      	mov	r4, r1
 800a59c:	b976      	cbnz	r6, 800a5bc <_Bfree+0x28>
 800a59e:	2010      	movs	r0, #16
 800a5a0:	f7ff ff02 	bl	800a3a8 <malloc>
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	61e8      	str	r0, [r5, #28]
 800a5a8:	b920      	cbnz	r0, 800a5b4 <_Bfree+0x20>
 800a5aa:	218f      	movs	r1, #143	@ 0x8f
 800a5ac:	4b08      	ldr	r3, [pc, #32]	@ (800a5d0 <_Bfree+0x3c>)
 800a5ae:	4809      	ldr	r0, [pc, #36]	@ (800a5d4 <_Bfree+0x40>)
 800a5b0:	f001 feea 	bl	800c388 <__assert_func>
 800a5b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a5b8:	6006      	str	r6, [r0, #0]
 800a5ba:	60c6      	str	r6, [r0, #12]
 800a5bc:	b13c      	cbz	r4, 800a5ce <_Bfree+0x3a>
 800a5be:	69eb      	ldr	r3, [r5, #28]
 800a5c0:	6862      	ldr	r2, [r4, #4]
 800a5c2:	68db      	ldr	r3, [r3, #12]
 800a5c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a5c8:	6021      	str	r1, [r4, #0]
 800a5ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a5ce:	bd70      	pop	{r4, r5, r6, pc}
 800a5d0:	0800cd74 	.word	0x0800cd74
 800a5d4:	0800cdf4 	.word	0x0800cdf4

0800a5d8 <__multadd>:
 800a5d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5dc:	4607      	mov	r7, r0
 800a5de:	460c      	mov	r4, r1
 800a5e0:	461e      	mov	r6, r3
 800a5e2:	2000      	movs	r0, #0
 800a5e4:	690d      	ldr	r5, [r1, #16]
 800a5e6:	f101 0c14 	add.w	ip, r1, #20
 800a5ea:	f8dc 3000 	ldr.w	r3, [ip]
 800a5ee:	3001      	adds	r0, #1
 800a5f0:	b299      	uxth	r1, r3
 800a5f2:	fb02 6101 	mla	r1, r2, r1, r6
 800a5f6:	0c1e      	lsrs	r6, r3, #16
 800a5f8:	0c0b      	lsrs	r3, r1, #16
 800a5fa:	fb02 3306 	mla	r3, r2, r6, r3
 800a5fe:	b289      	uxth	r1, r1
 800a600:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a604:	4285      	cmp	r5, r0
 800a606:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a60a:	f84c 1b04 	str.w	r1, [ip], #4
 800a60e:	dcec      	bgt.n	800a5ea <__multadd+0x12>
 800a610:	b30e      	cbz	r6, 800a656 <__multadd+0x7e>
 800a612:	68a3      	ldr	r3, [r4, #8]
 800a614:	42ab      	cmp	r3, r5
 800a616:	dc19      	bgt.n	800a64c <__multadd+0x74>
 800a618:	6861      	ldr	r1, [r4, #4]
 800a61a:	4638      	mov	r0, r7
 800a61c:	3101      	adds	r1, #1
 800a61e:	f7ff ff79 	bl	800a514 <_Balloc>
 800a622:	4680      	mov	r8, r0
 800a624:	b928      	cbnz	r0, 800a632 <__multadd+0x5a>
 800a626:	4602      	mov	r2, r0
 800a628:	21ba      	movs	r1, #186	@ 0xba
 800a62a:	4b0c      	ldr	r3, [pc, #48]	@ (800a65c <__multadd+0x84>)
 800a62c:	480c      	ldr	r0, [pc, #48]	@ (800a660 <__multadd+0x88>)
 800a62e:	f001 feab 	bl	800c388 <__assert_func>
 800a632:	6922      	ldr	r2, [r4, #16]
 800a634:	f104 010c 	add.w	r1, r4, #12
 800a638:	3202      	adds	r2, #2
 800a63a:	0092      	lsls	r2, r2, #2
 800a63c:	300c      	adds	r0, #12
 800a63e:	f7ff f806 	bl	800964e <memcpy>
 800a642:	4621      	mov	r1, r4
 800a644:	4638      	mov	r0, r7
 800a646:	f7ff ffa5 	bl	800a594 <_Bfree>
 800a64a:	4644      	mov	r4, r8
 800a64c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a650:	3501      	adds	r5, #1
 800a652:	615e      	str	r6, [r3, #20]
 800a654:	6125      	str	r5, [r4, #16]
 800a656:	4620      	mov	r0, r4
 800a658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a65c:	0800cde3 	.word	0x0800cde3
 800a660:	0800cdf4 	.word	0x0800cdf4

0800a664 <__s2b>:
 800a664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a668:	4615      	mov	r5, r2
 800a66a:	2209      	movs	r2, #9
 800a66c:	461f      	mov	r7, r3
 800a66e:	3308      	adds	r3, #8
 800a670:	460c      	mov	r4, r1
 800a672:	fb93 f3f2 	sdiv	r3, r3, r2
 800a676:	4606      	mov	r6, r0
 800a678:	2201      	movs	r2, #1
 800a67a:	2100      	movs	r1, #0
 800a67c:	429a      	cmp	r2, r3
 800a67e:	db09      	blt.n	800a694 <__s2b+0x30>
 800a680:	4630      	mov	r0, r6
 800a682:	f7ff ff47 	bl	800a514 <_Balloc>
 800a686:	b940      	cbnz	r0, 800a69a <__s2b+0x36>
 800a688:	4602      	mov	r2, r0
 800a68a:	21d3      	movs	r1, #211	@ 0xd3
 800a68c:	4b18      	ldr	r3, [pc, #96]	@ (800a6f0 <__s2b+0x8c>)
 800a68e:	4819      	ldr	r0, [pc, #100]	@ (800a6f4 <__s2b+0x90>)
 800a690:	f001 fe7a 	bl	800c388 <__assert_func>
 800a694:	0052      	lsls	r2, r2, #1
 800a696:	3101      	adds	r1, #1
 800a698:	e7f0      	b.n	800a67c <__s2b+0x18>
 800a69a:	9b08      	ldr	r3, [sp, #32]
 800a69c:	2d09      	cmp	r5, #9
 800a69e:	6143      	str	r3, [r0, #20]
 800a6a0:	f04f 0301 	mov.w	r3, #1
 800a6a4:	6103      	str	r3, [r0, #16]
 800a6a6:	dd16      	ble.n	800a6d6 <__s2b+0x72>
 800a6a8:	f104 0909 	add.w	r9, r4, #9
 800a6ac:	46c8      	mov	r8, r9
 800a6ae:	442c      	add	r4, r5
 800a6b0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a6b4:	4601      	mov	r1, r0
 800a6b6:	220a      	movs	r2, #10
 800a6b8:	4630      	mov	r0, r6
 800a6ba:	3b30      	subs	r3, #48	@ 0x30
 800a6bc:	f7ff ff8c 	bl	800a5d8 <__multadd>
 800a6c0:	45a0      	cmp	r8, r4
 800a6c2:	d1f5      	bne.n	800a6b0 <__s2b+0x4c>
 800a6c4:	f1a5 0408 	sub.w	r4, r5, #8
 800a6c8:	444c      	add	r4, r9
 800a6ca:	1b2d      	subs	r5, r5, r4
 800a6cc:	1963      	adds	r3, r4, r5
 800a6ce:	42bb      	cmp	r3, r7
 800a6d0:	db04      	blt.n	800a6dc <__s2b+0x78>
 800a6d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6d6:	2509      	movs	r5, #9
 800a6d8:	340a      	adds	r4, #10
 800a6da:	e7f6      	b.n	800a6ca <__s2b+0x66>
 800a6dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a6e0:	4601      	mov	r1, r0
 800a6e2:	220a      	movs	r2, #10
 800a6e4:	4630      	mov	r0, r6
 800a6e6:	3b30      	subs	r3, #48	@ 0x30
 800a6e8:	f7ff ff76 	bl	800a5d8 <__multadd>
 800a6ec:	e7ee      	b.n	800a6cc <__s2b+0x68>
 800a6ee:	bf00      	nop
 800a6f0:	0800cde3 	.word	0x0800cde3
 800a6f4:	0800cdf4 	.word	0x0800cdf4

0800a6f8 <__hi0bits>:
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a6fe:	bf3a      	itte	cc
 800a700:	0403      	lslcc	r3, r0, #16
 800a702:	2010      	movcc	r0, #16
 800a704:	2000      	movcs	r0, #0
 800a706:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a70a:	bf3c      	itt	cc
 800a70c:	021b      	lslcc	r3, r3, #8
 800a70e:	3008      	addcc	r0, #8
 800a710:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a714:	bf3c      	itt	cc
 800a716:	011b      	lslcc	r3, r3, #4
 800a718:	3004      	addcc	r0, #4
 800a71a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a71e:	bf3c      	itt	cc
 800a720:	009b      	lslcc	r3, r3, #2
 800a722:	3002      	addcc	r0, #2
 800a724:	2b00      	cmp	r3, #0
 800a726:	db05      	blt.n	800a734 <__hi0bits+0x3c>
 800a728:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a72c:	f100 0001 	add.w	r0, r0, #1
 800a730:	bf08      	it	eq
 800a732:	2020      	moveq	r0, #32
 800a734:	4770      	bx	lr

0800a736 <__lo0bits>:
 800a736:	6803      	ldr	r3, [r0, #0]
 800a738:	4602      	mov	r2, r0
 800a73a:	f013 0007 	ands.w	r0, r3, #7
 800a73e:	d00b      	beq.n	800a758 <__lo0bits+0x22>
 800a740:	07d9      	lsls	r1, r3, #31
 800a742:	d421      	bmi.n	800a788 <__lo0bits+0x52>
 800a744:	0798      	lsls	r0, r3, #30
 800a746:	bf49      	itett	mi
 800a748:	085b      	lsrmi	r3, r3, #1
 800a74a:	089b      	lsrpl	r3, r3, #2
 800a74c:	2001      	movmi	r0, #1
 800a74e:	6013      	strmi	r3, [r2, #0]
 800a750:	bf5c      	itt	pl
 800a752:	2002      	movpl	r0, #2
 800a754:	6013      	strpl	r3, [r2, #0]
 800a756:	4770      	bx	lr
 800a758:	b299      	uxth	r1, r3
 800a75a:	b909      	cbnz	r1, 800a760 <__lo0bits+0x2a>
 800a75c:	2010      	movs	r0, #16
 800a75e:	0c1b      	lsrs	r3, r3, #16
 800a760:	b2d9      	uxtb	r1, r3
 800a762:	b909      	cbnz	r1, 800a768 <__lo0bits+0x32>
 800a764:	3008      	adds	r0, #8
 800a766:	0a1b      	lsrs	r3, r3, #8
 800a768:	0719      	lsls	r1, r3, #28
 800a76a:	bf04      	itt	eq
 800a76c:	091b      	lsreq	r3, r3, #4
 800a76e:	3004      	addeq	r0, #4
 800a770:	0799      	lsls	r1, r3, #30
 800a772:	bf04      	itt	eq
 800a774:	089b      	lsreq	r3, r3, #2
 800a776:	3002      	addeq	r0, #2
 800a778:	07d9      	lsls	r1, r3, #31
 800a77a:	d403      	bmi.n	800a784 <__lo0bits+0x4e>
 800a77c:	085b      	lsrs	r3, r3, #1
 800a77e:	f100 0001 	add.w	r0, r0, #1
 800a782:	d003      	beq.n	800a78c <__lo0bits+0x56>
 800a784:	6013      	str	r3, [r2, #0]
 800a786:	4770      	bx	lr
 800a788:	2000      	movs	r0, #0
 800a78a:	4770      	bx	lr
 800a78c:	2020      	movs	r0, #32
 800a78e:	4770      	bx	lr

0800a790 <__i2b>:
 800a790:	b510      	push	{r4, lr}
 800a792:	460c      	mov	r4, r1
 800a794:	2101      	movs	r1, #1
 800a796:	f7ff febd 	bl	800a514 <_Balloc>
 800a79a:	4602      	mov	r2, r0
 800a79c:	b928      	cbnz	r0, 800a7aa <__i2b+0x1a>
 800a79e:	f240 1145 	movw	r1, #325	@ 0x145
 800a7a2:	4b04      	ldr	r3, [pc, #16]	@ (800a7b4 <__i2b+0x24>)
 800a7a4:	4804      	ldr	r0, [pc, #16]	@ (800a7b8 <__i2b+0x28>)
 800a7a6:	f001 fdef 	bl	800c388 <__assert_func>
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	6144      	str	r4, [r0, #20]
 800a7ae:	6103      	str	r3, [r0, #16]
 800a7b0:	bd10      	pop	{r4, pc}
 800a7b2:	bf00      	nop
 800a7b4:	0800cde3 	.word	0x0800cde3
 800a7b8:	0800cdf4 	.word	0x0800cdf4

0800a7bc <__multiply>:
 800a7bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7c0:	4614      	mov	r4, r2
 800a7c2:	690a      	ldr	r2, [r1, #16]
 800a7c4:	6923      	ldr	r3, [r4, #16]
 800a7c6:	460f      	mov	r7, r1
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	bfa2      	ittt	ge
 800a7cc:	4623      	movge	r3, r4
 800a7ce:	460c      	movge	r4, r1
 800a7d0:	461f      	movge	r7, r3
 800a7d2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a7d6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a7da:	68a3      	ldr	r3, [r4, #8]
 800a7dc:	6861      	ldr	r1, [r4, #4]
 800a7de:	eb0a 0609 	add.w	r6, sl, r9
 800a7e2:	42b3      	cmp	r3, r6
 800a7e4:	b085      	sub	sp, #20
 800a7e6:	bfb8      	it	lt
 800a7e8:	3101      	addlt	r1, #1
 800a7ea:	f7ff fe93 	bl	800a514 <_Balloc>
 800a7ee:	b930      	cbnz	r0, 800a7fe <__multiply+0x42>
 800a7f0:	4602      	mov	r2, r0
 800a7f2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a7f6:	4b43      	ldr	r3, [pc, #268]	@ (800a904 <__multiply+0x148>)
 800a7f8:	4843      	ldr	r0, [pc, #268]	@ (800a908 <__multiply+0x14c>)
 800a7fa:	f001 fdc5 	bl	800c388 <__assert_func>
 800a7fe:	f100 0514 	add.w	r5, r0, #20
 800a802:	462b      	mov	r3, r5
 800a804:	2200      	movs	r2, #0
 800a806:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a80a:	4543      	cmp	r3, r8
 800a80c:	d321      	bcc.n	800a852 <__multiply+0x96>
 800a80e:	f107 0114 	add.w	r1, r7, #20
 800a812:	f104 0214 	add.w	r2, r4, #20
 800a816:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a81a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a81e:	9302      	str	r3, [sp, #8]
 800a820:	1b13      	subs	r3, r2, r4
 800a822:	3b15      	subs	r3, #21
 800a824:	f023 0303 	bic.w	r3, r3, #3
 800a828:	3304      	adds	r3, #4
 800a82a:	f104 0715 	add.w	r7, r4, #21
 800a82e:	42ba      	cmp	r2, r7
 800a830:	bf38      	it	cc
 800a832:	2304      	movcc	r3, #4
 800a834:	9301      	str	r3, [sp, #4]
 800a836:	9b02      	ldr	r3, [sp, #8]
 800a838:	9103      	str	r1, [sp, #12]
 800a83a:	428b      	cmp	r3, r1
 800a83c:	d80c      	bhi.n	800a858 <__multiply+0x9c>
 800a83e:	2e00      	cmp	r6, #0
 800a840:	dd03      	ble.n	800a84a <__multiply+0x8e>
 800a842:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a846:	2b00      	cmp	r3, #0
 800a848:	d05a      	beq.n	800a900 <__multiply+0x144>
 800a84a:	6106      	str	r6, [r0, #16]
 800a84c:	b005      	add	sp, #20
 800a84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a852:	f843 2b04 	str.w	r2, [r3], #4
 800a856:	e7d8      	b.n	800a80a <__multiply+0x4e>
 800a858:	f8b1 a000 	ldrh.w	sl, [r1]
 800a85c:	f1ba 0f00 	cmp.w	sl, #0
 800a860:	d023      	beq.n	800a8aa <__multiply+0xee>
 800a862:	46a9      	mov	r9, r5
 800a864:	f04f 0c00 	mov.w	ip, #0
 800a868:	f104 0e14 	add.w	lr, r4, #20
 800a86c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a870:	f8d9 3000 	ldr.w	r3, [r9]
 800a874:	fa1f fb87 	uxth.w	fp, r7
 800a878:	b29b      	uxth	r3, r3
 800a87a:	fb0a 330b 	mla	r3, sl, fp, r3
 800a87e:	4463      	add	r3, ip
 800a880:	f8d9 c000 	ldr.w	ip, [r9]
 800a884:	0c3f      	lsrs	r7, r7, #16
 800a886:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a88a:	fb0a c707 	mla	r7, sl, r7, ip
 800a88e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a892:	b29b      	uxth	r3, r3
 800a894:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a898:	4572      	cmp	r2, lr
 800a89a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a89e:	f849 3b04 	str.w	r3, [r9], #4
 800a8a2:	d8e3      	bhi.n	800a86c <__multiply+0xb0>
 800a8a4:	9b01      	ldr	r3, [sp, #4]
 800a8a6:	f845 c003 	str.w	ip, [r5, r3]
 800a8aa:	9b03      	ldr	r3, [sp, #12]
 800a8ac:	3104      	adds	r1, #4
 800a8ae:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a8b2:	f1b9 0f00 	cmp.w	r9, #0
 800a8b6:	d021      	beq.n	800a8fc <__multiply+0x140>
 800a8b8:	46ae      	mov	lr, r5
 800a8ba:	f04f 0a00 	mov.w	sl, #0
 800a8be:	682b      	ldr	r3, [r5, #0]
 800a8c0:	f104 0c14 	add.w	ip, r4, #20
 800a8c4:	f8bc b000 	ldrh.w	fp, [ip]
 800a8c8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a8cc:	b29b      	uxth	r3, r3
 800a8ce:	fb09 770b 	mla	r7, r9, fp, r7
 800a8d2:	4457      	add	r7, sl
 800a8d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a8d8:	f84e 3b04 	str.w	r3, [lr], #4
 800a8dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a8e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a8e4:	f8be 3000 	ldrh.w	r3, [lr]
 800a8e8:	4562      	cmp	r2, ip
 800a8ea:	fb09 330a 	mla	r3, r9, sl, r3
 800a8ee:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a8f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a8f6:	d8e5      	bhi.n	800a8c4 <__multiply+0x108>
 800a8f8:	9f01      	ldr	r7, [sp, #4]
 800a8fa:	51eb      	str	r3, [r5, r7]
 800a8fc:	3504      	adds	r5, #4
 800a8fe:	e79a      	b.n	800a836 <__multiply+0x7a>
 800a900:	3e01      	subs	r6, #1
 800a902:	e79c      	b.n	800a83e <__multiply+0x82>
 800a904:	0800cde3 	.word	0x0800cde3
 800a908:	0800cdf4 	.word	0x0800cdf4

0800a90c <__pow5mult>:
 800a90c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a910:	4615      	mov	r5, r2
 800a912:	f012 0203 	ands.w	r2, r2, #3
 800a916:	4607      	mov	r7, r0
 800a918:	460e      	mov	r6, r1
 800a91a:	d007      	beq.n	800a92c <__pow5mult+0x20>
 800a91c:	4c25      	ldr	r4, [pc, #148]	@ (800a9b4 <__pow5mult+0xa8>)
 800a91e:	3a01      	subs	r2, #1
 800a920:	2300      	movs	r3, #0
 800a922:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a926:	f7ff fe57 	bl	800a5d8 <__multadd>
 800a92a:	4606      	mov	r6, r0
 800a92c:	10ad      	asrs	r5, r5, #2
 800a92e:	d03d      	beq.n	800a9ac <__pow5mult+0xa0>
 800a930:	69fc      	ldr	r4, [r7, #28]
 800a932:	b97c      	cbnz	r4, 800a954 <__pow5mult+0x48>
 800a934:	2010      	movs	r0, #16
 800a936:	f7ff fd37 	bl	800a3a8 <malloc>
 800a93a:	4602      	mov	r2, r0
 800a93c:	61f8      	str	r0, [r7, #28]
 800a93e:	b928      	cbnz	r0, 800a94c <__pow5mult+0x40>
 800a940:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a944:	4b1c      	ldr	r3, [pc, #112]	@ (800a9b8 <__pow5mult+0xac>)
 800a946:	481d      	ldr	r0, [pc, #116]	@ (800a9bc <__pow5mult+0xb0>)
 800a948:	f001 fd1e 	bl	800c388 <__assert_func>
 800a94c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a950:	6004      	str	r4, [r0, #0]
 800a952:	60c4      	str	r4, [r0, #12]
 800a954:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a958:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a95c:	b94c      	cbnz	r4, 800a972 <__pow5mult+0x66>
 800a95e:	f240 2171 	movw	r1, #625	@ 0x271
 800a962:	4638      	mov	r0, r7
 800a964:	f7ff ff14 	bl	800a790 <__i2b>
 800a968:	2300      	movs	r3, #0
 800a96a:	4604      	mov	r4, r0
 800a96c:	f8c8 0008 	str.w	r0, [r8, #8]
 800a970:	6003      	str	r3, [r0, #0]
 800a972:	f04f 0900 	mov.w	r9, #0
 800a976:	07eb      	lsls	r3, r5, #31
 800a978:	d50a      	bpl.n	800a990 <__pow5mult+0x84>
 800a97a:	4631      	mov	r1, r6
 800a97c:	4622      	mov	r2, r4
 800a97e:	4638      	mov	r0, r7
 800a980:	f7ff ff1c 	bl	800a7bc <__multiply>
 800a984:	4680      	mov	r8, r0
 800a986:	4631      	mov	r1, r6
 800a988:	4638      	mov	r0, r7
 800a98a:	f7ff fe03 	bl	800a594 <_Bfree>
 800a98e:	4646      	mov	r6, r8
 800a990:	106d      	asrs	r5, r5, #1
 800a992:	d00b      	beq.n	800a9ac <__pow5mult+0xa0>
 800a994:	6820      	ldr	r0, [r4, #0]
 800a996:	b938      	cbnz	r0, 800a9a8 <__pow5mult+0x9c>
 800a998:	4622      	mov	r2, r4
 800a99a:	4621      	mov	r1, r4
 800a99c:	4638      	mov	r0, r7
 800a99e:	f7ff ff0d 	bl	800a7bc <__multiply>
 800a9a2:	6020      	str	r0, [r4, #0]
 800a9a4:	f8c0 9000 	str.w	r9, [r0]
 800a9a8:	4604      	mov	r4, r0
 800a9aa:	e7e4      	b.n	800a976 <__pow5mult+0x6a>
 800a9ac:	4630      	mov	r0, r6
 800a9ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9b2:	bf00      	nop
 800a9b4:	0800ce50 	.word	0x0800ce50
 800a9b8:	0800cd74 	.word	0x0800cd74
 800a9bc:	0800cdf4 	.word	0x0800cdf4

0800a9c0 <__lshift>:
 800a9c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9c4:	460c      	mov	r4, r1
 800a9c6:	4607      	mov	r7, r0
 800a9c8:	4691      	mov	r9, r2
 800a9ca:	6923      	ldr	r3, [r4, #16]
 800a9cc:	6849      	ldr	r1, [r1, #4]
 800a9ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a9d2:	68a3      	ldr	r3, [r4, #8]
 800a9d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a9d8:	f108 0601 	add.w	r6, r8, #1
 800a9dc:	42b3      	cmp	r3, r6
 800a9de:	db0b      	blt.n	800a9f8 <__lshift+0x38>
 800a9e0:	4638      	mov	r0, r7
 800a9e2:	f7ff fd97 	bl	800a514 <_Balloc>
 800a9e6:	4605      	mov	r5, r0
 800a9e8:	b948      	cbnz	r0, 800a9fe <__lshift+0x3e>
 800a9ea:	4602      	mov	r2, r0
 800a9ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a9f0:	4b27      	ldr	r3, [pc, #156]	@ (800aa90 <__lshift+0xd0>)
 800a9f2:	4828      	ldr	r0, [pc, #160]	@ (800aa94 <__lshift+0xd4>)
 800a9f4:	f001 fcc8 	bl	800c388 <__assert_func>
 800a9f8:	3101      	adds	r1, #1
 800a9fa:	005b      	lsls	r3, r3, #1
 800a9fc:	e7ee      	b.n	800a9dc <__lshift+0x1c>
 800a9fe:	2300      	movs	r3, #0
 800aa00:	f100 0114 	add.w	r1, r0, #20
 800aa04:	f100 0210 	add.w	r2, r0, #16
 800aa08:	4618      	mov	r0, r3
 800aa0a:	4553      	cmp	r3, sl
 800aa0c:	db33      	blt.n	800aa76 <__lshift+0xb6>
 800aa0e:	6920      	ldr	r0, [r4, #16]
 800aa10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aa14:	f104 0314 	add.w	r3, r4, #20
 800aa18:	f019 091f 	ands.w	r9, r9, #31
 800aa1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aa20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aa24:	d02b      	beq.n	800aa7e <__lshift+0xbe>
 800aa26:	468a      	mov	sl, r1
 800aa28:	2200      	movs	r2, #0
 800aa2a:	f1c9 0e20 	rsb	lr, r9, #32
 800aa2e:	6818      	ldr	r0, [r3, #0]
 800aa30:	fa00 f009 	lsl.w	r0, r0, r9
 800aa34:	4310      	orrs	r0, r2
 800aa36:	f84a 0b04 	str.w	r0, [sl], #4
 800aa3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa3e:	459c      	cmp	ip, r3
 800aa40:	fa22 f20e 	lsr.w	r2, r2, lr
 800aa44:	d8f3      	bhi.n	800aa2e <__lshift+0x6e>
 800aa46:	ebac 0304 	sub.w	r3, ip, r4
 800aa4a:	3b15      	subs	r3, #21
 800aa4c:	f023 0303 	bic.w	r3, r3, #3
 800aa50:	3304      	adds	r3, #4
 800aa52:	f104 0015 	add.w	r0, r4, #21
 800aa56:	4584      	cmp	ip, r0
 800aa58:	bf38      	it	cc
 800aa5a:	2304      	movcc	r3, #4
 800aa5c:	50ca      	str	r2, [r1, r3]
 800aa5e:	b10a      	cbz	r2, 800aa64 <__lshift+0xa4>
 800aa60:	f108 0602 	add.w	r6, r8, #2
 800aa64:	3e01      	subs	r6, #1
 800aa66:	4638      	mov	r0, r7
 800aa68:	4621      	mov	r1, r4
 800aa6a:	612e      	str	r6, [r5, #16]
 800aa6c:	f7ff fd92 	bl	800a594 <_Bfree>
 800aa70:	4628      	mov	r0, r5
 800aa72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa76:	f842 0f04 	str.w	r0, [r2, #4]!
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	e7c5      	b.n	800aa0a <__lshift+0x4a>
 800aa7e:	3904      	subs	r1, #4
 800aa80:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa84:	459c      	cmp	ip, r3
 800aa86:	f841 2f04 	str.w	r2, [r1, #4]!
 800aa8a:	d8f9      	bhi.n	800aa80 <__lshift+0xc0>
 800aa8c:	e7ea      	b.n	800aa64 <__lshift+0xa4>
 800aa8e:	bf00      	nop
 800aa90:	0800cde3 	.word	0x0800cde3
 800aa94:	0800cdf4 	.word	0x0800cdf4

0800aa98 <__mcmp>:
 800aa98:	4603      	mov	r3, r0
 800aa9a:	690a      	ldr	r2, [r1, #16]
 800aa9c:	6900      	ldr	r0, [r0, #16]
 800aa9e:	b530      	push	{r4, r5, lr}
 800aaa0:	1a80      	subs	r0, r0, r2
 800aaa2:	d10e      	bne.n	800aac2 <__mcmp+0x2a>
 800aaa4:	3314      	adds	r3, #20
 800aaa6:	3114      	adds	r1, #20
 800aaa8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800aaac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800aab0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aab4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aab8:	4295      	cmp	r5, r2
 800aaba:	d003      	beq.n	800aac4 <__mcmp+0x2c>
 800aabc:	d205      	bcs.n	800aaca <__mcmp+0x32>
 800aabe:	f04f 30ff 	mov.w	r0, #4294967295
 800aac2:	bd30      	pop	{r4, r5, pc}
 800aac4:	42a3      	cmp	r3, r4
 800aac6:	d3f3      	bcc.n	800aab0 <__mcmp+0x18>
 800aac8:	e7fb      	b.n	800aac2 <__mcmp+0x2a>
 800aaca:	2001      	movs	r0, #1
 800aacc:	e7f9      	b.n	800aac2 <__mcmp+0x2a>
	...

0800aad0 <__mdiff>:
 800aad0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aad4:	4689      	mov	r9, r1
 800aad6:	4606      	mov	r6, r0
 800aad8:	4611      	mov	r1, r2
 800aada:	4648      	mov	r0, r9
 800aadc:	4614      	mov	r4, r2
 800aade:	f7ff ffdb 	bl	800aa98 <__mcmp>
 800aae2:	1e05      	subs	r5, r0, #0
 800aae4:	d112      	bne.n	800ab0c <__mdiff+0x3c>
 800aae6:	4629      	mov	r1, r5
 800aae8:	4630      	mov	r0, r6
 800aaea:	f7ff fd13 	bl	800a514 <_Balloc>
 800aaee:	4602      	mov	r2, r0
 800aaf0:	b928      	cbnz	r0, 800aafe <__mdiff+0x2e>
 800aaf2:	f240 2137 	movw	r1, #567	@ 0x237
 800aaf6:	4b3e      	ldr	r3, [pc, #248]	@ (800abf0 <__mdiff+0x120>)
 800aaf8:	483e      	ldr	r0, [pc, #248]	@ (800abf4 <__mdiff+0x124>)
 800aafa:	f001 fc45 	bl	800c388 <__assert_func>
 800aafe:	2301      	movs	r3, #1
 800ab00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ab04:	4610      	mov	r0, r2
 800ab06:	b003      	add	sp, #12
 800ab08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab0c:	bfbc      	itt	lt
 800ab0e:	464b      	movlt	r3, r9
 800ab10:	46a1      	movlt	r9, r4
 800ab12:	4630      	mov	r0, r6
 800ab14:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ab18:	bfba      	itte	lt
 800ab1a:	461c      	movlt	r4, r3
 800ab1c:	2501      	movlt	r5, #1
 800ab1e:	2500      	movge	r5, #0
 800ab20:	f7ff fcf8 	bl	800a514 <_Balloc>
 800ab24:	4602      	mov	r2, r0
 800ab26:	b918      	cbnz	r0, 800ab30 <__mdiff+0x60>
 800ab28:	f240 2145 	movw	r1, #581	@ 0x245
 800ab2c:	4b30      	ldr	r3, [pc, #192]	@ (800abf0 <__mdiff+0x120>)
 800ab2e:	e7e3      	b.n	800aaf8 <__mdiff+0x28>
 800ab30:	f100 0b14 	add.w	fp, r0, #20
 800ab34:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ab38:	f109 0310 	add.w	r3, r9, #16
 800ab3c:	60c5      	str	r5, [r0, #12]
 800ab3e:	f04f 0c00 	mov.w	ip, #0
 800ab42:	f109 0514 	add.w	r5, r9, #20
 800ab46:	46d9      	mov	r9, fp
 800ab48:	6926      	ldr	r6, [r4, #16]
 800ab4a:	f104 0e14 	add.w	lr, r4, #20
 800ab4e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ab52:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ab56:	9301      	str	r3, [sp, #4]
 800ab58:	9b01      	ldr	r3, [sp, #4]
 800ab5a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ab5e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ab62:	b281      	uxth	r1, r0
 800ab64:	9301      	str	r3, [sp, #4]
 800ab66:	fa1f f38a 	uxth.w	r3, sl
 800ab6a:	1a5b      	subs	r3, r3, r1
 800ab6c:	0c00      	lsrs	r0, r0, #16
 800ab6e:	4463      	add	r3, ip
 800ab70:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ab74:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ab78:	b29b      	uxth	r3, r3
 800ab7a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ab7e:	4576      	cmp	r6, lr
 800ab80:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ab84:	f849 3b04 	str.w	r3, [r9], #4
 800ab88:	d8e6      	bhi.n	800ab58 <__mdiff+0x88>
 800ab8a:	1b33      	subs	r3, r6, r4
 800ab8c:	3b15      	subs	r3, #21
 800ab8e:	f023 0303 	bic.w	r3, r3, #3
 800ab92:	3415      	adds	r4, #21
 800ab94:	3304      	adds	r3, #4
 800ab96:	42a6      	cmp	r6, r4
 800ab98:	bf38      	it	cc
 800ab9a:	2304      	movcc	r3, #4
 800ab9c:	441d      	add	r5, r3
 800ab9e:	445b      	add	r3, fp
 800aba0:	461e      	mov	r6, r3
 800aba2:	462c      	mov	r4, r5
 800aba4:	4544      	cmp	r4, r8
 800aba6:	d30e      	bcc.n	800abc6 <__mdiff+0xf6>
 800aba8:	f108 0103 	add.w	r1, r8, #3
 800abac:	1b49      	subs	r1, r1, r5
 800abae:	f021 0103 	bic.w	r1, r1, #3
 800abb2:	3d03      	subs	r5, #3
 800abb4:	45a8      	cmp	r8, r5
 800abb6:	bf38      	it	cc
 800abb8:	2100      	movcc	r1, #0
 800abba:	440b      	add	r3, r1
 800abbc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800abc0:	b199      	cbz	r1, 800abea <__mdiff+0x11a>
 800abc2:	6117      	str	r7, [r2, #16]
 800abc4:	e79e      	b.n	800ab04 <__mdiff+0x34>
 800abc6:	46e6      	mov	lr, ip
 800abc8:	f854 1b04 	ldr.w	r1, [r4], #4
 800abcc:	fa1f fc81 	uxth.w	ip, r1
 800abd0:	44f4      	add	ip, lr
 800abd2:	0c08      	lsrs	r0, r1, #16
 800abd4:	4471      	add	r1, lr
 800abd6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800abda:	b289      	uxth	r1, r1
 800abdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800abe0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800abe4:	f846 1b04 	str.w	r1, [r6], #4
 800abe8:	e7dc      	b.n	800aba4 <__mdiff+0xd4>
 800abea:	3f01      	subs	r7, #1
 800abec:	e7e6      	b.n	800abbc <__mdiff+0xec>
 800abee:	bf00      	nop
 800abf0:	0800cde3 	.word	0x0800cde3
 800abf4:	0800cdf4 	.word	0x0800cdf4

0800abf8 <__ulp>:
 800abf8:	4b0e      	ldr	r3, [pc, #56]	@ (800ac34 <__ulp+0x3c>)
 800abfa:	400b      	ands	r3, r1
 800abfc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	dc08      	bgt.n	800ac16 <__ulp+0x1e>
 800ac04:	425b      	negs	r3, r3
 800ac06:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ac0a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ac0e:	da04      	bge.n	800ac1a <__ulp+0x22>
 800ac10:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ac14:	4113      	asrs	r3, r2
 800ac16:	2200      	movs	r2, #0
 800ac18:	e008      	b.n	800ac2c <__ulp+0x34>
 800ac1a:	f1a2 0314 	sub.w	r3, r2, #20
 800ac1e:	2b1e      	cmp	r3, #30
 800ac20:	bfd6      	itet	le
 800ac22:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ac26:	2201      	movgt	r2, #1
 800ac28:	40da      	lsrle	r2, r3
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	4610      	mov	r0, r2
 800ac30:	4770      	bx	lr
 800ac32:	bf00      	nop
 800ac34:	7ff00000 	.word	0x7ff00000

0800ac38 <__b2d>:
 800ac38:	6902      	ldr	r2, [r0, #16]
 800ac3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac3c:	f100 0614 	add.w	r6, r0, #20
 800ac40:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800ac44:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800ac48:	4f1e      	ldr	r7, [pc, #120]	@ (800acc4 <__b2d+0x8c>)
 800ac4a:	4620      	mov	r0, r4
 800ac4c:	f7ff fd54 	bl	800a6f8 <__hi0bits>
 800ac50:	4603      	mov	r3, r0
 800ac52:	f1c0 0020 	rsb	r0, r0, #32
 800ac56:	2b0a      	cmp	r3, #10
 800ac58:	f1a2 0504 	sub.w	r5, r2, #4
 800ac5c:	6008      	str	r0, [r1, #0]
 800ac5e:	dc12      	bgt.n	800ac86 <__b2d+0x4e>
 800ac60:	42ae      	cmp	r6, r5
 800ac62:	bf2c      	ite	cs
 800ac64:	2200      	movcs	r2, #0
 800ac66:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800ac6a:	f1c3 0c0b 	rsb	ip, r3, #11
 800ac6e:	3315      	adds	r3, #21
 800ac70:	fa24 fe0c 	lsr.w	lr, r4, ip
 800ac74:	fa04 f303 	lsl.w	r3, r4, r3
 800ac78:	fa22 f20c 	lsr.w	r2, r2, ip
 800ac7c:	ea4e 0107 	orr.w	r1, lr, r7
 800ac80:	431a      	orrs	r2, r3
 800ac82:	4610      	mov	r0, r2
 800ac84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac86:	42ae      	cmp	r6, r5
 800ac88:	bf36      	itet	cc
 800ac8a:	f1a2 0508 	subcc.w	r5, r2, #8
 800ac8e:	2200      	movcs	r2, #0
 800ac90:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800ac94:	3b0b      	subs	r3, #11
 800ac96:	d012      	beq.n	800acbe <__b2d+0x86>
 800ac98:	f1c3 0720 	rsb	r7, r3, #32
 800ac9c:	fa22 f107 	lsr.w	r1, r2, r7
 800aca0:	409c      	lsls	r4, r3
 800aca2:	430c      	orrs	r4, r1
 800aca4:	42b5      	cmp	r5, r6
 800aca6:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800acaa:	bf94      	ite	ls
 800acac:	2400      	movls	r4, #0
 800acae:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800acb2:	409a      	lsls	r2, r3
 800acb4:	40fc      	lsrs	r4, r7
 800acb6:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800acba:	4322      	orrs	r2, r4
 800acbc:	e7e1      	b.n	800ac82 <__b2d+0x4a>
 800acbe:	ea44 0107 	orr.w	r1, r4, r7
 800acc2:	e7de      	b.n	800ac82 <__b2d+0x4a>
 800acc4:	3ff00000 	.word	0x3ff00000

0800acc8 <__d2b>:
 800acc8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800accc:	2101      	movs	r1, #1
 800acce:	4690      	mov	r8, r2
 800acd0:	4699      	mov	r9, r3
 800acd2:	9e08      	ldr	r6, [sp, #32]
 800acd4:	f7ff fc1e 	bl	800a514 <_Balloc>
 800acd8:	4604      	mov	r4, r0
 800acda:	b930      	cbnz	r0, 800acea <__d2b+0x22>
 800acdc:	4602      	mov	r2, r0
 800acde:	f240 310f 	movw	r1, #783	@ 0x30f
 800ace2:	4b23      	ldr	r3, [pc, #140]	@ (800ad70 <__d2b+0xa8>)
 800ace4:	4823      	ldr	r0, [pc, #140]	@ (800ad74 <__d2b+0xac>)
 800ace6:	f001 fb4f 	bl	800c388 <__assert_func>
 800acea:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800acee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800acf2:	b10d      	cbz	r5, 800acf8 <__d2b+0x30>
 800acf4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800acf8:	9301      	str	r3, [sp, #4]
 800acfa:	f1b8 0300 	subs.w	r3, r8, #0
 800acfe:	d024      	beq.n	800ad4a <__d2b+0x82>
 800ad00:	4668      	mov	r0, sp
 800ad02:	9300      	str	r3, [sp, #0]
 800ad04:	f7ff fd17 	bl	800a736 <__lo0bits>
 800ad08:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ad0c:	b1d8      	cbz	r0, 800ad46 <__d2b+0x7e>
 800ad0e:	f1c0 0320 	rsb	r3, r0, #32
 800ad12:	fa02 f303 	lsl.w	r3, r2, r3
 800ad16:	430b      	orrs	r3, r1
 800ad18:	40c2      	lsrs	r2, r0
 800ad1a:	6163      	str	r3, [r4, #20]
 800ad1c:	9201      	str	r2, [sp, #4]
 800ad1e:	9b01      	ldr	r3, [sp, #4]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	bf0c      	ite	eq
 800ad24:	2201      	moveq	r2, #1
 800ad26:	2202      	movne	r2, #2
 800ad28:	61a3      	str	r3, [r4, #24]
 800ad2a:	6122      	str	r2, [r4, #16]
 800ad2c:	b1ad      	cbz	r5, 800ad5a <__d2b+0x92>
 800ad2e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ad32:	4405      	add	r5, r0
 800ad34:	6035      	str	r5, [r6, #0]
 800ad36:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ad3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad3c:	6018      	str	r0, [r3, #0]
 800ad3e:	4620      	mov	r0, r4
 800ad40:	b002      	add	sp, #8
 800ad42:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800ad46:	6161      	str	r1, [r4, #20]
 800ad48:	e7e9      	b.n	800ad1e <__d2b+0x56>
 800ad4a:	a801      	add	r0, sp, #4
 800ad4c:	f7ff fcf3 	bl	800a736 <__lo0bits>
 800ad50:	9b01      	ldr	r3, [sp, #4]
 800ad52:	2201      	movs	r2, #1
 800ad54:	6163      	str	r3, [r4, #20]
 800ad56:	3020      	adds	r0, #32
 800ad58:	e7e7      	b.n	800ad2a <__d2b+0x62>
 800ad5a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ad5e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ad62:	6030      	str	r0, [r6, #0]
 800ad64:	6918      	ldr	r0, [r3, #16]
 800ad66:	f7ff fcc7 	bl	800a6f8 <__hi0bits>
 800ad6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ad6e:	e7e4      	b.n	800ad3a <__d2b+0x72>
 800ad70:	0800cde3 	.word	0x0800cde3
 800ad74:	0800cdf4 	.word	0x0800cdf4

0800ad78 <__ratio>:
 800ad78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad7c:	b085      	sub	sp, #20
 800ad7e:	e9cd 1000 	strd	r1, r0, [sp]
 800ad82:	a902      	add	r1, sp, #8
 800ad84:	f7ff ff58 	bl	800ac38 <__b2d>
 800ad88:	468b      	mov	fp, r1
 800ad8a:	4606      	mov	r6, r0
 800ad8c:	460f      	mov	r7, r1
 800ad8e:	9800      	ldr	r0, [sp, #0]
 800ad90:	a903      	add	r1, sp, #12
 800ad92:	f7ff ff51 	bl	800ac38 <__b2d>
 800ad96:	460d      	mov	r5, r1
 800ad98:	9b01      	ldr	r3, [sp, #4]
 800ad9a:	4689      	mov	r9, r1
 800ad9c:	6919      	ldr	r1, [r3, #16]
 800ad9e:	9b00      	ldr	r3, [sp, #0]
 800ada0:	4604      	mov	r4, r0
 800ada2:	691b      	ldr	r3, [r3, #16]
 800ada4:	4630      	mov	r0, r6
 800ada6:	1ac9      	subs	r1, r1, r3
 800ada8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800adac:	1a9b      	subs	r3, r3, r2
 800adae:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	bfcd      	iteet	gt
 800adb6:	463a      	movgt	r2, r7
 800adb8:	462a      	movle	r2, r5
 800adba:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800adbe:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800adc2:	bfd8      	it	le
 800adc4:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800adc8:	464b      	mov	r3, r9
 800adca:	4622      	mov	r2, r4
 800adcc:	4659      	mov	r1, fp
 800adce:	f7f5 fcad 	bl	800072c <__aeabi_ddiv>
 800add2:	b005      	add	sp, #20
 800add4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800add8 <__copybits>:
 800add8:	3901      	subs	r1, #1
 800adda:	b570      	push	{r4, r5, r6, lr}
 800addc:	1149      	asrs	r1, r1, #5
 800adde:	6914      	ldr	r4, [r2, #16]
 800ade0:	3101      	adds	r1, #1
 800ade2:	f102 0314 	add.w	r3, r2, #20
 800ade6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800adea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800adee:	1f05      	subs	r5, r0, #4
 800adf0:	42a3      	cmp	r3, r4
 800adf2:	d30c      	bcc.n	800ae0e <__copybits+0x36>
 800adf4:	1aa3      	subs	r3, r4, r2
 800adf6:	3b11      	subs	r3, #17
 800adf8:	f023 0303 	bic.w	r3, r3, #3
 800adfc:	3211      	adds	r2, #17
 800adfe:	42a2      	cmp	r2, r4
 800ae00:	bf88      	it	hi
 800ae02:	2300      	movhi	r3, #0
 800ae04:	4418      	add	r0, r3
 800ae06:	2300      	movs	r3, #0
 800ae08:	4288      	cmp	r0, r1
 800ae0a:	d305      	bcc.n	800ae18 <__copybits+0x40>
 800ae0c:	bd70      	pop	{r4, r5, r6, pc}
 800ae0e:	f853 6b04 	ldr.w	r6, [r3], #4
 800ae12:	f845 6f04 	str.w	r6, [r5, #4]!
 800ae16:	e7eb      	b.n	800adf0 <__copybits+0x18>
 800ae18:	f840 3b04 	str.w	r3, [r0], #4
 800ae1c:	e7f4      	b.n	800ae08 <__copybits+0x30>

0800ae1e <__any_on>:
 800ae1e:	f100 0214 	add.w	r2, r0, #20
 800ae22:	6900      	ldr	r0, [r0, #16]
 800ae24:	114b      	asrs	r3, r1, #5
 800ae26:	4298      	cmp	r0, r3
 800ae28:	b510      	push	{r4, lr}
 800ae2a:	db11      	blt.n	800ae50 <__any_on+0x32>
 800ae2c:	dd0a      	ble.n	800ae44 <__any_on+0x26>
 800ae2e:	f011 011f 	ands.w	r1, r1, #31
 800ae32:	d007      	beq.n	800ae44 <__any_on+0x26>
 800ae34:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ae38:	fa24 f001 	lsr.w	r0, r4, r1
 800ae3c:	fa00 f101 	lsl.w	r1, r0, r1
 800ae40:	428c      	cmp	r4, r1
 800ae42:	d10b      	bne.n	800ae5c <__any_on+0x3e>
 800ae44:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d803      	bhi.n	800ae54 <__any_on+0x36>
 800ae4c:	2000      	movs	r0, #0
 800ae4e:	bd10      	pop	{r4, pc}
 800ae50:	4603      	mov	r3, r0
 800ae52:	e7f7      	b.n	800ae44 <__any_on+0x26>
 800ae54:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ae58:	2900      	cmp	r1, #0
 800ae5a:	d0f5      	beq.n	800ae48 <__any_on+0x2a>
 800ae5c:	2001      	movs	r0, #1
 800ae5e:	e7f6      	b.n	800ae4e <__any_on+0x30>

0800ae60 <sulp>:
 800ae60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae64:	460f      	mov	r7, r1
 800ae66:	4690      	mov	r8, r2
 800ae68:	f7ff fec6 	bl	800abf8 <__ulp>
 800ae6c:	4604      	mov	r4, r0
 800ae6e:	460d      	mov	r5, r1
 800ae70:	f1b8 0f00 	cmp.w	r8, #0
 800ae74:	d011      	beq.n	800ae9a <sulp+0x3a>
 800ae76:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800ae7a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	dd0b      	ble.n	800ae9a <sulp+0x3a>
 800ae82:	2400      	movs	r4, #0
 800ae84:	051b      	lsls	r3, r3, #20
 800ae86:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ae8a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ae8e:	4622      	mov	r2, r4
 800ae90:	462b      	mov	r3, r5
 800ae92:	f7f5 fb21 	bl	80004d8 <__aeabi_dmul>
 800ae96:	4604      	mov	r4, r0
 800ae98:	460d      	mov	r5, r1
 800ae9a:	4620      	mov	r0, r4
 800ae9c:	4629      	mov	r1, r5
 800ae9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aea2:	0000      	movs	r0, r0
 800aea4:	0000      	movs	r0, r0
	...

0800aea8 <_strtod_l>:
 800aea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeac:	b09f      	sub	sp, #124	@ 0x7c
 800aeae:	9217      	str	r2, [sp, #92]	@ 0x5c
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	460c      	mov	r4, r1
 800aeb4:	921a      	str	r2, [sp, #104]	@ 0x68
 800aeb6:	f04f 0a00 	mov.w	sl, #0
 800aeba:	f04f 0b00 	mov.w	fp, #0
 800aebe:	460a      	mov	r2, r1
 800aec0:	9005      	str	r0, [sp, #20]
 800aec2:	9219      	str	r2, [sp, #100]	@ 0x64
 800aec4:	7811      	ldrb	r1, [r2, #0]
 800aec6:	292b      	cmp	r1, #43	@ 0x2b
 800aec8:	d048      	beq.n	800af5c <_strtod_l+0xb4>
 800aeca:	d836      	bhi.n	800af3a <_strtod_l+0x92>
 800aecc:	290d      	cmp	r1, #13
 800aece:	d830      	bhi.n	800af32 <_strtod_l+0x8a>
 800aed0:	2908      	cmp	r1, #8
 800aed2:	d830      	bhi.n	800af36 <_strtod_l+0x8e>
 800aed4:	2900      	cmp	r1, #0
 800aed6:	d039      	beq.n	800af4c <_strtod_l+0xa4>
 800aed8:	2200      	movs	r2, #0
 800aeda:	920b      	str	r2, [sp, #44]	@ 0x2c
 800aedc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800aede:	782a      	ldrb	r2, [r5, #0]
 800aee0:	2a30      	cmp	r2, #48	@ 0x30
 800aee2:	f040 80b1 	bne.w	800b048 <_strtod_l+0x1a0>
 800aee6:	786a      	ldrb	r2, [r5, #1]
 800aee8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800aeec:	2a58      	cmp	r2, #88	@ 0x58
 800aeee:	d16c      	bne.n	800afca <_strtod_l+0x122>
 800aef0:	9302      	str	r3, [sp, #8]
 800aef2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aef4:	4a8e      	ldr	r2, [pc, #568]	@ (800b130 <_strtod_l+0x288>)
 800aef6:	9301      	str	r3, [sp, #4]
 800aef8:	ab1a      	add	r3, sp, #104	@ 0x68
 800aefa:	9300      	str	r3, [sp, #0]
 800aefc:	9805      	ldr	r0, [sp, #20]
 800aefe:	ab1b      	add	r3, sp, #108	@ 0x6c
 800af00:	a919      	add	r1, sp, #100	@ 0x64
 800af02:	f001 fadb 	bl	800c4bc <__gethex>
 800af06:	f010 060f 	ands.w	r6, r0, #15
 800af0a:	4604      	mov	r4, r0
 800af0c:	d005      	beq.n	800af1a <_strtod_l+0x72>
 800af0e:	2e06      	cmp	r6, #6
 800af10:	d126      	bne.n	800af60 <_strtod_l+0xb8>
 800af12:	2300      	movs	r3, #0
 800af14:	3501      	adds	r5, #1
 800af16:	9519      	str	r5, [sp, #100]	@ 0x64
 800af18:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af1a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	f040 8584 	bne.w	800ba2a <_strtod_l+0xb82>
 800af22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af24:	b1bb      	cbz	r3, 800af56 <_strtod_l+0xae>
 800af26:	4650      	mov	r0, sl
 800af28:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800af2c:	b01f      	add	sp, #124	@ 0x7c
 800af2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af32:	2920      	cmp	r1, #32
 800af34:	d1d0      	bne.n	800aed8 <_strtod_l+0x30>
 800af36:	3201      	adds	r2, #1
 800af38:	e7c3      	b.n	800aec2 <_strtod_l+0x1a>
 800af3a:	292d      	cmp	r1, #45	@ 0x2d
 800af3c:	d1cc      	bne.n	800aed8 <_strtod_l+0x30>
 800af3e:	2101      	movs	r1, #1
 800af40:	910b      	str	r1, [sp, #44]	@ 0x2c
 800af42:	1c51      	adds	r1, r2, #1
 800af44:	9119      	str	r1, [sp, #100]	@ 0x64
 800af46:	7852      	ldrb	r2, [r2, #1]
 800af48:	2a00      	cmp	r2, #0
 800af4a:	d1c7      	bne.n	800aedc <_strtod_l+0x34>
 800af4c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800af4e:	9419      	str	r4, [sp, #100]	@ 0x64
 800af50:	2b00      	cmp	r3, #0
 800af52:	f040 8568 	bne.w	800ba26 <_strtod_l+0xb7e>
 800af56:	4650      	mov	r0, sl
 800af58:	4659      	mov	r1, fp
 800af5a:	e7e7      	b.n	800af2c <_strtod_l+0x84>
 800af5c:	2100      	movs	r1, #0
 800af5e:	e7ef      	b.n	800af40 <_strtod_l+0x98>
 800af60:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800af62:	b13a      	cbz	r2, 800af74 <_strtod_l+0xcc>
 800af64:	2135      	movs	r1, #53	@ 0x35
 800af66:	a81c      	add	r0, sp, #112	@ 0x70
 800af68:	f7ff ff36 	bl	800add8 <__copybits>
 800af6c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800af6e:	9805      	ldr	r0, [sp, #20]
 800af70:	f7ff fb10 	bl	800a594 <_Bfree>
 800af74:	3e01      	subs	r6, #1
 800af76:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800af78:	2e04      	cmp	r6, #4
 800af7a:	d806      	bhi.n	800af8a <_strtod_l+0xe2>
 800af7c:	e8df f006 	tbb	[pc, r6]
 800af80:	201d0314 	.word	0x201d0314
 800af84:	14          	.byte	0x14
 800af85:	00          	.byte	0x00
 800af86:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800af8a:	05e1      	lsls	r1, r4, #23
 800af8c:	bf48      	it	mi
 800af8e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800af92:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800af96:	0d1b      	lsrs	r3, r3, #20
 800af98:	051b      	lsls	r3, r3, #20
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d1bd      	bne.n	800af1a <_strtod_l+0x72>
 800af9e:	f7fe fb1b 	bl	80095d8 <__errno>
 800afa2:	2322      	movs	r3, #34	@ 0x22
 800afa4:	6003      	str	r3, [r0, #0]
 800afa6:	e7b8      	b.n	800af1a <_strtod_l+0x72>
 800afa8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800afac:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800afb0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800afb4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800afb8:	e7e7      	b.n	800af8a <_strtod_l+0xe2>
 800afba:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800b134 <_strtod_l+0x28c>
 800afbe:	e7e4      	b.n	800af8a <_strtod_l+0xe2>
 800afc0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800afc4:	f04f 3aff 	mov.w	sl, #4294967295
 800afc8:	e7df      	b.n	800af8a <_strtod_l+0xe2>
 800afca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800afcc:	1c5a      	adds	r2, r3, #1
 800afce:	9219      	str	r2, [sp, #100]	@ 0x64
 800afd0:	785b      	ldrb	r3, [r3, #1]
 800afd2:	2b30      	cmp	r3, #48	@ 0x30
 800afd4:	d0f9      	beq.n	800afca <_strtod_l+0x122>
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d09f      	beq.n	800af1a <_strtod_l+0x72>
 800afda:	2301      	movs	r3, #1
 800afdc:	9309      	str	r3, [sp, #36]	@ 0x24
 800afde:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800afe0:	220a      	movs	r2, #10
 800afe2:	930c      	str	r3, [sp, #48]	@ 0x30
 800afe4:	2300      	movs	r3, #0
 800afe6:	461f      	mov	r7, r3
 800afe8:	9308      	str	r3, [sp, #32]
 800afea:	930a      	str	r3, [sp, #40]	@ 0x28
 800afec:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800afee:	7805      	ldrb	r5, [r0, #0]
 800aff0:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800aff4:	b2d9      	uxtb	r1, r3
 800aff6:	2909      	cmp	r1, #9
 800aff8:	d928      	bls.n	800b04c <_strtod_l+0x1a4>
 800affa:	2201      	movs	r2, #1
 800affc:	494e      	ldr	r1, [pc, #312]	@ (800b138 <_strtod_l+0x290>)
 800affe:	f001 f99b 	bl	800c338 <strncmp>
 800b002:	2800      	cmp	r0, #0
 800b004:	d032      	beq.n	800b06c <_strtod_l+0x1c4>
 800b006:	2000      	movs	r0, #0
 800b008:	462a      	mov	r2, r5
 800b00a:	4681      	mov	r9, r0
 800b00c:	463d      	mov	r5, r7
 800b00e:	4603      	mov	r3, r0
 800b010:	2a65      	cmp	r2, #101	@ 0x65
 800b012:	d001      	beq.n	800b018 <_strtod_l+0x170>
 800b014:	2a45      	cmp	r2, #69	@ 0x45
 800b016:	d114      	bne.n	800b042 <_strtod_l+0x19a>
 800b018:	b91d      	cbnz	r5, 800b022 <_strtod_l+0x17a>
 800b01a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b01c:	4302      	orrs	r2, r0
 800b01e:	d095      	beq.n	800af4c <_strtod_l+0xa4>
 800b020:	2500      	movs	r5, #0
 800b022:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b024:	1c62      	adds	r2, r4, #1
 800b026:	9219      	str	r2, [sp, #100]	@ 0x64
 800b028:	7862      	ldrb	r2, [r4, #1]
 800b02a:	2a2b      	cmp	r2, #43	@ 0x2b
 800b02c:	d077      	beq.n	800b11e <_strtod_l+0x276>
 800b02e:	2a2d      	cmp	r2, #45	@ 0x2d
 800b030:	d07b      	beq.n	800b12a <_strtod_l+0x282>
 800b032:	f04f 0c00 	mov.w	ip, #0
 800b036:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b03a:	2909      	cmp	r1, #9
 800b03c:	f240 8082 	bls.w	800b144 <_strtod_l+0x29c>
 800b040:	9419      	str	r4, [sp, #100]	@ 0x64
 800b042:	f04f 0800 	mov.w	r8, #0
 800b046:	e0a2      	b.n	800b18e <_strtod_l+0x2e6>
 800b048:	2300      	movs	r3, #0
 800b04a:	e7c7      	b.n	800afdc <_strtod_l+0x134>
 800b04c:	2f08      	cmp	r7, #8
 800b04e:	bfd5      	itete	le
 800b050:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b052:	9908      	ldrgt	r1, [sp, #32]
 800b054:	fb02 3301 	mlale	r3, r2, r1, r3
 800b058:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b05c:	f100 0001 	add.w	r0, r0, #1
 800b060:	bfd4      	ite	le
 800b062:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b064:	9308      	strgt	r3, [sp, #32]
 800b066:	3701      	adds	r7, #1
 800b068:	9019      	str	r0, [sp, #100]	@ 0x64
 800b06a:	e7bf      	b.n	800afec <_strtod_l+0x144>
 800b06c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b06e:	1c5a      	adds	r2, r3, #1
 800b070:	9219      	str	r2, [sp, #100]	@ 0x64
 800b072:	785a      	ldrb	r2, [r3, #1]
 800b074:	b37f      	cbz	r7, 800b0d6 <_strtod_l+0x22e>
 800b076:	4681      	mov	r9, r0
 800b078:	463d      	mov	r5, r7
 800b07a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b07e:	2b09      	cmp	r3, #9
 800b080:	d912      	bls.n	800b0a8 <_strtod_l+0x200>
 800b082:	2301      	movs	r3, #1
 800b084:	e7c4      	b.n	800b010 <_strtod_l+0x168>
 800b086:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b088:	3001      	adds	r0, #1
 800b08a:	1c5a      	adds	r2, r3, #1
 800b08c:	9219      	str	r2, [sp, #100]	@ 0x64
 800b08e:	785a      	ldrb	r2, [r3, #1]
 800b090:	2a30      	cmp	r2, #48	@ 0x30
 800b092:	d0f8      	beq.n	800b086 <_strtod_l+0x1de>
 800b094:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b098:	2b08      	cmp	r3, #8
 800b09a:	f200 84cb 	bhi.w	800ba34 <_strtod_l+0xb8c>
 800b09e:	4681      	mov	r9, r0
 800b0a0:	2000      	movs	r0, #0
 800b0a2:	4605      	mov	r5, r0
 800b0a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b0a6:	930c      	str	r3, [sp, #48]	@ 0x30
 800b0a8:	3a30      	subs	r2, #48	@ 0x30
 800b0aa:	f100 0301 	add.w	r3, r0, #1
 800b0ae:	d02a      	beq.n	800b106 <_strtod_l+0x25e>
 800b0b0:	4499      	add	r9, r3
 800b0b2:	210a      	movs	r1, #10
 800b0b4:	462b      	mov	r3, r5
 800b0b6:	eb00 0c05 	add.w	ip, r0, r5
 800b0ba:	4563      	cmp	r3, ip
 800b0bc:	d10d      	bne.n	800b0da <_strtod_l+0x232>
 800b0be:	1c69      	adds	r1, r5, #1
 800b0c0:	4401      	add	r1, r0
 800b0c2:	4428      	add	r0, r5
 800b0c4:	2808      	cmp	r0, #8
 800b0c6:	dc16      	bgt.n	800b0f6 <_strtod_l+0x24e>
 800b0c8:	230a      	movs	r3, #10
 800b0ca:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b0cc:	fb03 2300 	mla	r3, r3, r0, r2
 800b0d0:	930a      	str	r3, [sp, #40]	@ 0x28
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	e018      	b.n	800b108 <_strtod_l+0x260>
 800b0d6:	4638      	mov	r0, r7
 800b0d8:	e7da      	b.n	800b090 <_strtod_l+0x1e8>
 800b0da:	2b08      	cmp	r3, #8
 800b0dc:	f103 0301 	add.w	r3, r3, #1
 800b0e0:	dc03      	bgt.n	800b0ea <_strtod_l+0x242>
 800b0e2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b0e4:	434e      	muls	r6, r1
 800b0e6:	960a      	str	r6, [sp, #40]	@ 0x28
 800b0e8:	e7e7      	b.n	800b0ba <_strtod_l+0x212>
 800b0ea:	2b10      	cmp	r3, #16
 800b0ec:	bfde      	ittt	le
 800b0ee:	9e08      	ldrle	r6, [sp, #32]
 800b0f0:	434e      	mulle	r6, r1
 800b0f2:	9608      	strle	r6, [sp, #32]
 800b0f4:	e7e1      	b.n	800b0ba <_strtod_l+0x212>
 800b0f6:	280f      	cmp	r0, #15
 800b0f8:	dceb      	bgt.n	800b0d2 <_strtod_l+0x22a>
 800b0fa:	230a      	movs	r3, #10
 800b0fc:	9808      	ldr	r0, [sp, #32]
 800b0fe:	fb03 2300 	mla	r3, r3, r0, r2
 800b102:	9308      	str	r3, [sp, #32]
 800b104:	e7e5      	b.n	800b0d2 <_strtod_l+0x22a>
 800b106:	4629      	mov	r1, r5
 800b108:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b10a:	460d      	mov	r5, r1
 800b10c:	1c50      	adds	r0, r2, #1
 800b10e:	9019      	str	r0, [sp, #100]	@ 0x64
 800b110:	7852      	ldrb	r2, [r2, #1]
 800b112:	4618      	mov	r0, r3
 800b114:	e7b1      	b.n	800b07a <_strtod_l+0x1d2>
 800b116:	f04f 0900 	mov.w	r9, #0
 800b11a:	2301      	movs	r3, #1
 800b11c:	e77d      	b.n	800b01a <_strtod_l+0x172>
 800b11e:	f04f 0c00 	mov.w	ip, #0
 800b122:	1ca2      	adds	r2, r4, #2
 800b124:	9219      	str	r2, [sp, #100]	@ 0x64
 800b126:	78a2      	ldrb	r2, [r4, #2]
 800b128:	e785      	b.n	800b036 <_strtod_l+0x18e>
 800b12a:	f04f 0c01 	mov.w	ip, #1
 800b12e:	e7f8      	b.n	800b122 <_strtod_l+0x27a>
 800b130:	0800cf68 	.word	0x0800cf68
 800b134:	7ff00000 	.word	0x7ff00000
 800b138:	0800cf50 	.word	0x0800cf50
 800b13c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b13e:	1c51      	adds	r1, r2, #1
 800b140:	9119      	str	r1, [sp, #100]	@ 0x64
 800b142:	7852      	ldrb	r2, [r2, #1]
 800b144:	2a30      	cmp	r2, #48	@ 0x30
 800b146:	d0f9      	beq.n	800b13c <_strtod_l+0x294>
 800b148:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b14c:	2908      	cmp	r1, #8
 800b14e:	f63f af78 	bhi.w	800b042 <_strtod_l+0x19a>
 800b152:	f04f 080a 	mov.w	r8, #10
 800b156:	3a30      	subs	r2, #48	@ 0x30
 800b158:	920e      	str	r2, [sp, #56]	@ 0x38
 800b15a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b15c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b15e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b160:	1c56      	adds	r6, r2, #1
 800b162:	9619      	str	r6, [sp, #100]	@ 0x64
 800b164:	7852      	ldrb	r2, [r2, #1]
 800b166:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b16a:	f1be 0f09 	cmp.w	lr, #9
 800b16e:	d939      	bls.n	800b1e4 <_strtod_l+0x33c>
 800b170:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b172:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b176:	1a76      	subs	r6, r6, r1
 800b178:	2e08      	cmp	r6, #8
 800b17a:	dc03      	bgt.n	800b184 <_strtod_l+0x2dc>
 800b17c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b17e:	4588      	cmp	r8, r1
 800b180:	bfa8      	it	ge
 800b182:	4688      	movge	r8, r1
 800b184:	f1bc 0f00 	cmp.w	ip, #0
 800b188:	d001      	beq.n	800b18e <_strtod_l+0x2e6>
 800b18a:	f1c8 0800 	rsb	r8, r8, #0
 800b18e:	2d00      	cmp	r5, #0
 800b190:	d14e      	bne.n	800b230 <_strtod_l+0x388>
 800b192:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b194:	4308      	orrs	r0, r1
 800b196:	f47f aec0 	bne.w	800af1a <_strtod_l+0x72>
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	f47f aed6 	bne.w	800af4c <_strtod_l+0xa4>
 800b1a0:	2a69      	cmp	r2, #105	@ 0x69
 800b1a2:	d028      	beq.n	800b1f6 <_strtod_l+0x34e>
 800b1a4:	dc25      	bgt.n	800b1f2 <_strtod_l+0x34a>
 800b1a6:	2a49      	cmp	r2, #73	@ 0x49
 800b1a8:	d025      	beq.n	800b1f6 <_strtod_l+0x34e>
 800b1aa:	2a4e      	cmp	r2, #78	@ 0x4e
 800b1ac:	f47f aece 	bne.w	800af4c <_strtod_l+0xa4>
 800b1b0:	499a      	ldr	r1, [pc, #616]	@ (800b41c <_strtod_l+0x574>)
 800b1b2:	a819      	add	r0, sp, #100	@ 0x64
 800b1b4:	f001 fba4 	bl	800c900 <__match>
 800b1b8:	2800      	cmp	r0, #0
 800b1ba:	f43f aec7 	beq.w	800af4c <_strtod_l+0xa4>
 800b1be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b1c0:	781b      	ldrb	r3, [r3, #0]
 800b1c2:	2b28      	cmp	r3, #40	@ 0x28
 800b1c4:	d12e      	bne.n	800b224 <_strtod_l+0x37c>
 800b1c6:	4996      	ldr	r1, [pc, #600]	@ (800b420 <_strtod_l+0x578>)
 800b1c8:	aa1c      	add	r2, sp, #112	@ 0x70
 800b1ca:	a819      	add	r0, sp, #100	@ 0x64
 800b1cc:	f001 fbac 	bl	800c928 <__hexnan>
 800b1d0:	2805      	cmp	r0, #5
 800b1d2:	d127      	bne.n	800b224 <_strtod_l+0x37c>
 800b1d4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b1d6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b1da:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b1de:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b1e2:	e69a      	b.n	800af1a <_strtod_l+0x72>
 800b1e4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b1e6:	fb08 2101 	mla	r1, r8, r1, r2
 800b1ea:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b1ee:	920e      	str	r2, [sp, #56]	@ 0x38
 800b1f0:	e7b5      	b.n	800b15e <_strtod_l+0x2b6>
 800b1f2:	2a6e      	cmp	r2, #110	@ 0x6e
 800b1f4:	e7da      	b.n	800b1ac <_strtod_l+0x304>
 800b1f6:	498b      	ldr	r1, [pc, #556]	@ (800b424 <_strtod_l+0x57c>)
 800b1f8:	a819      	add	r0, sp, #100	@ 0x64
 800b1fa:	f001 fb81 	bl	800c900 <__match>
 800b1fe:	2800      	cmp	r0, #0
 800b200:	f43f aea4 	beq.w	800af4c <_strtod_l+0xa4>
 800b204:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b206:	4988      	ldr	r1, [pc, #544]	@ (800b428 <_strtod_l+0x580>)
 800b208:	3b01      	subs	r3, #1
 800b20a:	a819      	add	r0, sp, #100	@ 0x64
 800b20c:	9319      	str	r3, [sp, #100]	@ 0x64
 800b20e:	f001 fb77 	bl	800c900 <__match>
 800b212:	b910      	cbnz	r0, 800b21a <_strtod_l+0x372>
 800b214:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b216:	3301      	adds	r3, #1
 800b218:	9319      	str	r3, [sp, #100]	@ 0x64
 800b21a:	f04f 0a00 	mov.w	sl, #0
 800b21e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800b42c <_strtod_l+0x584>
 800b222:	e67a      	b.n	800af1a <_strtod_l+0x72>
 800b224:	4882      	ldr	r0, [pc, #520]	@ (800b430 <_strtod_l+0x588>)
 800b226:	f001 f8a9 	bl	800c37c <nan>
 800b22a:	4682      	mov	sl, r0
 800b22c:	468b      	mov	fp, r1
 800b22e:	e674      	b.n	800af1a <_strtod_l+0x72>
 800b230:	eba8 0309 	sub.w	r3, r8, r9
 800b234:	2f00      	cmp	r7, #0
 800b236:	bf08      	it	eq
 800b238:	462f      	moveq	r7, r5
 800b23a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b23c:	2d10      	cmp	r5, #16
 800b23e:	462c      	mov	r4, r5
 800b240:	9309      	str	r3, [sp, #36]	@ 0x24
 800b242:	bfa8      	it	ge
 800b244:	2410      	movge	r4, #16
 800b246:	f7f5 f8cd 	bl	80003e4 <__aeabi_ui2d>
 800b24a:	2d09      	cmp	r5, #9
 800b24c:	4682      	mov	sl, r0
 800b24e:	468b      	mov	fp, r1
 800b250:	dc11      	bgt.n	800b276 <_strtod_l+0x3ce>
 800b252:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b254:	2b00      	cmp	r3, #0
 800b256:	f43f ae60 	beq.w	800af1a <_strtod_l+0x72>
 800b25a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b25c:	dd76      	ble.n	800b34c <_strtod_l+0x4a4>
 800b25e:	2b16      	cmp	r3, #22
 800b260:	dc5d      	bgt.n	800b31e <_strtod_l+0x476>
 800b262:	4974      	ldr	r1, [pc, #464]	@ (800b434 <_strtod_l+0x58c>)
 800b264:	4652      	mov	r2, sl
 800b266:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b26a:	465b      	mov	r3, fp
 800b26c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b270:	f7f5 f932 	bl	80004d8 <__aeabi_dmul>
 800b274:	e7d9      	b.n	800b22a <_strtod_l+0x382>
 800b276:	4b6f      	ldr	r3, [pc, #444]	@ (800b434 <_strtod_l+0x58c>)
 800b278:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b27c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b280:	f7f5 f92a 	bl	80004d8 <__aeabi_dmul>
 800b284:	4682      	mov	sl, r0
 800b286:	9808      	ldr	r0, [sp, #32]
 800b288:	468b      	mov	fp, r1
 800b28a:	f7f5 f8ab 	bl	80003e4 <__aeabi_ui2d>
 800b28e:	4602      	mov	r2, r0
 800b290:	460b      	mov	r3, r1
 800b292:	4650      	mov	r0, sl
 800b294:	4659      	mov	r1, fp
 800b296:	f7f4 ff69 	bl	800016c <__adddf3>
 800b29a:	2d0f      	cmp	r5, #15
 800b29c:	4682      	mov	sl, r0
 800b29e:	468b      	mov	fp, r1
 800b2a0:	ddd7      	ble.n	800b252 <_strtod_l+0x3aa>
 800b2a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2a4:	1b2c      	subs	r4, r5, r4
 800b2a6:	441c      	add	r4, r3
 800b2a8:	2c00      	cmp	r4, #0
 800b2aa:	f340 8096 	ble.w	800b3da <_strtod_l+0x532>
 800b2ae:	f014 030f 	ands.w	r3, r4, #15
 800b2b2:	d00a      	beq.n	800b2ca <_strtod_l+0x422>
 800b2b4:	495f      	ldr	r1, [pc, #380]	@ (800b434 <_strtod_l+0x58c>)
 800b2b6:	4652      	mov	r2, sl
 800b2b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b2bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2c0:	465b      	mov	r3, fp
 800b2c2:	f7f5 f909 	bl	80004d8 <__aeabi_dmul>
 800b2c6:	4682      	mov	sl, r0
 800b2c8:	468b      	mov	fp, r1
 800b2ca:	f034 040f 	bics.w	r4, r4, #15
 800b2ce:	d073      	beq.n	800b3b8 <_strtod_l+0x510>
 800b2d0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b2d4:	dd48      	ble.n	800b368 <_strtod_l+0x4c0>
 800b2d6:	2400      	movs	r4, #0
 800b2d8:	46a0      	mov	r8, r4
 800b2da:	46a1      	mov	r9, r4
 800b2dc:	940a      	str	r4, [sp, #40]	@ 0x28
 800b2de:	2322      	movs	r3, #34	@ 0x22
 800b2e0:	f04f 0a00 	mov.w	sl, #0
 800b2e4:	9a05      	ldr	r2, [sp, #20]
 800b2e6:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800b42c <_strtod_l+0x584>
 800b2ea:	6013      	str	r3, [r2, #0]
 800b2ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	f43f ae13 	beq.w	800af1a <_strtod_l+0x72>
 800b2f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b2f6:	9805      	ldr	r0, [sp, #20]
 800b2f8:	f7ff f94c 	bl	800a594 <_Bfree>
 800b2fc:	4649      	mov	r1, r9
 800b2fe:	9805      	ldr	r0, [sp, #20]
 800b300:	f7ff f948 	bl	800a594 <_Bfree>
 800b304:	4641      	mov	r1, r8
 800b306:	9805      	ldr	r0, [sp, #20]
 800b308:	f7ff f944 	bl	800a594 <_Bfree>
 800b30c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b30e:	9805      	ldr	r0, [sp, #20]
 800b310:	f7ff f940 	bl	800a594 <_Bfree>
 800b314:	4621      	mov	r1, r4
 800b316:	9805      	ldr	r0, [sp, #20]
 800b318:	f7ff f93c 	bl	800a594 <_Bfree>
 800b31c:	e5fd      	b.n	800af1a <_strtod_l+0x72>
 800b31e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b320:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b324:	4293      	cmp	r3, r2
 800b326:	dbbc      	blt.n	800b2a2 <_strtod_l+0x3fa>
 800b328:	4c42      	ldr	r4, [pc, #264]	@ (800b434 <_strtod_l+0x58c>)
 800b32a:	f1c5 050f 	rsb	r5, r5, #15
 800b32e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b332:	4652      	mov	r2, sl
 800b334:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b338:	465b      	mov	r3, fp
 800b33a:	f7f5 f8cd 	bl	80004d8 <__aeabi_dmul>
 800b33e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b340:	1b5d      	subs	r5, r3, r5
 800b342:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b346:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b34a:	e791      	b.n	800b270 <_strtod_l+0x3c8>
 800b34c:	3316      	adds	r3, #22
 800b34e:	dba8      	blt.n	800b2a2 <_strtod_l+0x3fa>
 800b350:	4b38      	ldr	r3, [pc, #224]	@ (800b434 <_strtod_l+0x58c>)
 800b352:	eba9 0808 	sub.w	r8, r9, r8
 800b356:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b35a:	4650      	mov	r0, sl
 800b35c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b360:	4659      	mov	r1, fp
 800b362:	f7f5 f9e3 	bl	800072c <__aeabi_ddiv>
 800b366:	e760      	b.n	800b22a <_strtod_l+0x382>
 800b368:	4b33      	ldr	r3, [pc, #204]	@ (800b438 <_strtod_l+0x590>)
 800b36a:	4650      	mov	r0, sl
 800b36c:	9308      	str	r3, [sp, #32]
 800b36e:	2300      	movs	r3, #0
 800b370:	4659      	mov	r1, fp
 800b372:	461e      	mov	r6, r3
 800b374:	1124      	asrs	r4, r4, #4
 800b376:	2c01      	cmp	r4, #1
 800b378:	dc21      	bgt.n	800b3be <_strtod_l+0x516>
 800b37a:	b10b      	cbz	r3, 800b380 <_strtod_l+0x4d8>
 800b37c:	4682      	mov	sl, r0
 800b37e:	468b      	mov	fp, r1
 800b380:	492d      	ldr	r1, [pc, #180]	@ (800b438 <_strtod_l+0x590>)
 800b382:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b386:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b38a:	4652      	mov	r2, sl
 800b38c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b390:	465b      	mov	r3, fp
 800b392:	f7f5 f8a1 	bl	80004d8 <__aeabi_dmul>
 800b396:	4b25      	ldr	r3, [pc, #148]	@ (800b42c <_strtod_l+0x584>)
 800b398:	460a      	mov	r2, r1
 800b39a:	400b      	ands	r3, r1
 800b39c:	4927      	ldr	r1, [pc, #156]	@ (800b43c <_strtod_l+0x594>)
 800b39e:	4682      	mov	sl, r0
 800b3a0:	428b      	cmp	r3, r1
 800b3a2:	d898      	bhi.n	800b2d6 <_strtod_l+0x42e>
 800b3a4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b3a8:	428b      	cmp	r3, r1
 800b3aa:	bf86      	itte	hi
 800b3ac:	f04f 3aff 	movhi.w	sl, #4294967295
 800b3b0:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800b440 <_strtod_l+0x598>
 800b3b4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	9308      	str	r3, [sp, #32]
 800b3bc:	e07a      	b.n	800b4b4 <_strtod_l+0x60c>
 800b3be:	07e2      	lsls	r2, r4, #31
 800b3c0:	d505      	bpl.n	800b3ce <_strtod_l+0x526>
 800b3c2:	9b08      	ldr	r3, [sp, #32]
 800b3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c8:	f7f5 f886 	bl	80004d8 <__aeabi_dmul>
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	9a08      	ldr	r2, [sp, #32]
 800b3d0:	3601      	adds	r6, #1
 800b3d2:	3208      	adds	r2, #8
 800b3d4:	1064      	asrs	r4, r4, #1
 800b3d6:	9208      	str	r2, [sp, #32]
 800b3d8:	e7cd      	b.n	800b376 <_strtod_l+0x4ce>
 800b3da:	d0ed      	beq.n	800b3b8 <_strtod_l+0x510>
 800b3dc:	4264      	negs	r4, r4
 800b3de:	f014 020f 	ands.w	r2, r4, #15
 800b3e2:	d00a      	beq.n	800b3fa <_strtod_l+0x552>
 800b3e4:	4b13      	ldr	r3, [pc, #76]	@ (800b434 <_strtod_l+0x58c>)
 800b3e6:	4650      	mov	r0, sl
 800b3e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3ec:	4659      	mov	r1, fp
 800b3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f2:	f7f5 f99b 	bl	800072c <__aeabi_ddiv>
 800b3f6:	4682      	mov	sl, r0
 800b3f8:	468b      	mov	fp, r1
 800b3fa:	1124      	asrs	r4, r4, #4
 800b3fc:	d0dc      	beq.n	800b3b8 <_strtod_l+0x510>
 800b3fe:	2c1f      	cmp	r4, #31
 800b400:	dd20      	ble.n	800b444 <_strtod_l+0x59c>
 800b402:	2400      	movs	r4, #0
 800b404:	46a0      	mov	r8, r4
 800b406:	46a1      	mov	r9, r4
 800b408:	940a      	str	r4, [sp, #40]	@ 0x28
 800b40a:	2322      	movs	r3, #34	@ 0x22
 800b40c:	9a05      	ldr	r2, [sp, #20]
 800b40e:	f04f 0a00 	mov.w	sl, #0
 800b412:	f04f 0b00 	mov.w	fp, #0
 800b416:	6013      	str	r3, [r2, #0]
 800b418:	e768      	b.n	800b2ec <_strtod_l+0x444>
 800b41a:	bf00      	nop
 800b41c:	0800cd3b 	.word	0x0800cd3b
 800b420:	0800cf54 	.word	0x0800cf54
 800b424:	0800cd33 	.word	0x0800cd33
 800b428:	0800cd6a 	.word	0x0800cd6a
 800b42c:	7ff00000 	.word	0x7ff00000
 800b430:	0800d0fd 	.word	0x0800d0fd
 800b434:	0800ce88 	.word	0x0800ce88
 800b438:	0800ce60 	.word	0x0800ce60
 800b43c:	7ca00000 	.word	0x7ca00000
 800b440:	7fefffff 	.word	0x7fefffff
 800b444:	f014 0310 	ands.w	r3, r4, #16
 800b448:	bf18      	it	ne
 800b44a:	236a      	movne	r3, #106	@ 0x6a
 800b44c:	4650      	mov	r0, sl
 800b44e:	9308      	str	r3, [sp, #32]
 800b450:	4659      	mov	r1, fp
 800b452:	2300      	movs	r3, #0
 800b454:	4ea9      	ldr	r6, [pc, #676]	@ (800b6fc <_strtod_l+0x854>)
 800b456:	07e2      	lsls	r2, r4, #31
 800b458:	d504      	bpl.n	800b464 <_strtod_l+0x5bc>
 800b45a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b45e:	f7f5 f83b 	bl	80004d8 <__aeabi_dmul>
 800b462:	2301      	movs	r3, #1
 800b464:	1064      	asrs	r4, r4, #1
 800b466:	f106 0608 	add.w	r6, r6, #8
 800b46a:	d1f4      	bne.n	800b456 <_strtod_l+0x5ae>
 800b46c:	b10b      	cbz	r3, 800b472 <_strtod_l+0x5ca>
 800b46e:	4682      	mov	sl, r0
 800b470:	468b      	mov	fp, r1
 800b472:	9b08      	ldr	r3, [sp, #32]
 800b474:	b1b3      	cbz	r3, 800b4a4 <_strtod_l+0x5fc>
 800b476:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b47a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b47e:	2b00      	cmp	r3, #0
 800b480:	4659      	mov	r1, fp
 800b482:	dd0f      	ble.n	800b4a4 <_strtod_l+0x5fc>
 800b484:	2b1f      	cmp	r3, #31
 800b486:	dd57      	ble.n	800b538 <_strtod_l+0x690>
 800b488:	2b34      	cmp	r3, #52	@ 0x34
 800b48a:	bfd8      	it	le
 800b48c:	f04f 33ff 	movle.w	r3, #4294967295
 800b490:	f04f 0a00 	mov.w	sl, #0
 800b494:	bfcf      	iteee	gt
 800b496:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b49a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b49e:	4093      	lslle	r3, r2
 800b4a0:	ea03 0b01 	andle.w	fp, r3, r1
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	4650      	mov	r0, sl
 800b4aa:	4659      	mov	r1, fp
 800b4ac:	f7f5 fa7c 	bl	80009a8 <__aeabi_dcmpeq>
 800b4b0:	2800      	cmp	r0, #0
 800b4b2:	d1a6      	bne.n	800b402 <_strtod_l+0x55a>
 800b4b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4b6:	463a      	mov	r2, r7
 800b4b8:	9300      	str	r3, [sp, #0]
 800b4ba:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b4bc:	462b      	mov	r3, r5
 800b4be:	9805      	ldr	r0, [sp, #20]
 800b4c0:	f7ff f8d0 	bl	800a664 <__s2b>
 800b4c4:	900a      	str	r0, [sp, #40]	@ 0x28
 800b4c6:	2800      	cmp	r0, #0
 800b4c8:	f43f af05 	beq.w	800b2d6 <_strtod_l+0x42e>
 800b4cc:	2400      	movs	r4, #0
 800b4ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b4d0:	eba9 0308 	sub.w	r3, r9, r8
 800b4d4:	2a00      	cmp	r2, #0
 800b4d6:	bfa8      	it	ge
 800b4d8:	2300      	movge	r3, #0
 800b4da:	46a0      	mov	r8, r4
 800b4dc:	9312      	str	r3, [sp, #72]	@ 0x48
 800b4de:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b4e2:	9316      	str	r3, [sp, #88]	@ 0x58
 800b4e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4e6:	9805      	ldr	r0, [sp, #20]
 800b4e8:	6859      	ldr	r1, [r3, #4]
 800b4ea:	f7ff f813 	bl	800a514 <_Balloc>
 800b4ee:	4681      	mov	r9, r0
 800b4f0:	2800      	cmp	r0, #0
 800b4f2:	f43f aef4 	beq.w	800b2de <_strtod_l+0x436>
 800b4f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4f8:	300c      	adds	r0, #12
 800b4fa:	691a      	ldr	r2, [r3, #16]
 800b4fc:	f103 010c 	add.w	r1, r3, #12
 800b500:	3202      	adds	r2, #2
 800b502:	0092      	lsls	r2, r2, #2
 800b504:	f7fe f8a3 	bl	800964e <memcpy>
 800b508:	ab1c      	add	r3, sp, #112	@ 0x70
 800b50a:	9301      	str	r3, [sp, #4]
 800b50c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b50e:	9300      	str	r3, [sp, #0]
 800b510:	4652      	mov	r2, sl
 800b512:	465b      	mov	r3, fp
 800b514:	9805      	ldr	r0, [sp, #20]
 800b516:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b51a:	f7ff fbd5 	bl	800acc8 <__d2b>
 800b51e:	901a      	str	r0, [sp, #104]	@ 0x68
 800b520:	2800      	cmp	r0, #0
 800b522:	f43f aedc 	beq.w	800b2de <_strtod_l+0x436>
 800b526:	2101      	movs	r1, #1
 800b528:	9805      	ldr	r0, [sp, #20]
 800b52a:	f7ff f931 	bl	800a790 <__i2b>
 800b52e:	4680      	mov	r8, r0
 800b530:	b948      	cbnz	r0, 800b546 <_strtod_l+0x69e>
 800b532:	f04f 0800 	mov.w	r8, #0
 800b536:	e6d2      	b.n	800b2de <_strtod_l+0x436>
 800b538:	f04f 32ff 	mov.w	r2, #4294967295
 800b53c:	fa02 f303 	lsl.w	r3, r2, r3
 800b540:	ea03 0a0a 	and.w	sl, r3, sl
 800b544:	e7ae      	b.n	800b4a4 <_strtod_l+0x5fc>
 800b546:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b548:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b54a:	2d00      	cmp	r5, #0
 800b54c:	bfab      	itete	ge
 800b54e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b550:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b552:	18ef      	addge	r7, r5, r3
 800b554:	1b5e      	sublt	r6, r3, r5
 800b556:	9b08      	ldr	r3, [sp, #32]
 800b558:	bfa8      	it	ge
 800b55a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b55c:	eba5 0503 	sub.w	r5, r5, r3
 800b560:	4415      	add	r5, r2
 800b562:	4b67      	ldr	r3, [pc, #412]	@ (800b700 <_strtod_l+0x858>)
 800b564:	f105 35ff 	add.w	r5, r5, #4294967295
 800b568:	bfb8      	it	lt
 800b56a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b56c:	429d      	cmp	r5, r3
 800b56e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b572:	da50      	bge.n	800b616 <_strtod_l+0x76e>
 800b574:	1b5b      	subs	r3, r3, r5
 800b576:	2b1f      	cmp	r3, #31
 800b578:	f04f 0101 	mov.w	r1, #1
 800b57c:	eba2 0203 	sub.w	r2, r2, r3
 800b580:	dc3d      	bgt.n	800b5fe <_strtod_l+0x756>
 800b582:	fa01 f303 	lsl.w	r3, r1, r3
 800b586:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b588:	2300      	movs	r3, #0
 800b58a:	9310      	str	r3, [sp, #64]	@ 0x40
 800b58c:	18bd      	adds	r5, r7, r2
 800b58e:	9b08      	ldr	r3, [sp, #32]
 800b590:	42af      	cmp	r7, r5
 800b592:	4416      	add	r6, r2
 800b594:	441e      	add	r6, r3
 800b596:	463b      	mov	r3, r7
 800b598:	bfa8      	it	ge
 800b59a:	462b      	movge	r3, r5
 800b59c:	42b3      	cmp	r3, r6
 800b59e:	bfa8      	it	ge
 800b5a0:	4633      	movge	r3, r6
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	bfc2      	ittt	gt
 800b5a6:	1aed      	subgt	r5, r5, r3
 800b5a8:	1af6      	subgt	r6, r6, r3
 800b5aa:	1aff      	subgt	r7, r7, r3
 800b5ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	dd16      	ble.n	800b5e0 <_strtod_l+0x738>
 800b5b2:	4641      	mov	r1, r8
 800b5b4:	461a      	mov	r2, r3
 800b5b6:	9805      	ldr	r0, [sp, #20]
 800b5b8:	f7ff f9a8 	bl	800a90c <__pow5mult>
 800b5bc:	4680      	mov	r8, r0
 800b5be:	2800      	cmp	r0, #0
 800b5c0:	d0b7      	beq.n	800b532 <_strtod_l+0x68a>
 800b5c2:	4601      	mov	r1, r0
 800b5c4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b5c6:	9805      	ldr	r0, [sp, #20]
 800b5c8:	f7ff f8f8 	bl	800a7bc <__multiply>
 800b5cc:	900e      	str	r0, [sp, #56]	@ 0x38
 800b5ce:	2800      	cmp	r0, #0
 800b5d0:	f43f ae85 	beq.w	800b2de <_strtod_l+0x436>
 800b5d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b5d6:	9805      	ldr	r0, [sp, #20]
 800b5d8:	f7fe ffdc 	bl	800a594 <_Bfree>
 800b5dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5de:	931a      	str	r3, [sp, #104]	@ 0x68
 800b5e0:	2d00      	cmp	r5, #0
 800b5e2:	dc1d      	bgt.n	800b620 <_strtod_l+0x778>
 800b5e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	dd23      	ble.n	800b632 <_strtod_l+0x78a>
 800b5ea:	4649      	mov	r1, r9
 800b5ec:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b5ee:	9805      	ldr	r0, [sp, #20]
 800b5f0:	f7ff f98c 	bl	800a90c <__pow5mult>
 800b5f4:	4681      	mov	r9, r0
 800b5f6:	b9e0      	cbnz	r0, 800b632 <_strtod_l+0x78a>
 800b5f8:	f04f 0900 	mov.w	r9, #0
 800b5fc:	e66f      	b.n	800b2de <_strtod_l+0x436>
 800b5fe:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b602:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b606:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b60a:	35e2      	adds	r5, #226	@ 0xe2
 800b60c:	fa01 f305 	lsl.w	r3, r1, r5
 800b610:	9310      	str	r3, [sp, #64]	@ 0x40
 800b612:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b614:	e7ba      	b.n	800b58c <_strtod_l+0x6e4>
 800b616:	2300      	movs	r3, #0
 800b618:	9310      	str	r3, [sp, #64]	@ 0x40
 800b61a:	2301      	movs	r3, #1
 800b61c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b61e:	e7b5      	b.n	800b58c <_strtod_l+0x6e4>
 800b620:	462a      	mov	r2, r5
 800b622:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b624:	9805      	ldr	r0, [sp, #20]
 800b626:	f7ff f9cb 	bl	800a9c0 <__lshift>
 800b62a:	901a      	str	r0, [sp, #104]	@ 0x68
 800b62c:	2800      	cmp	r0, #0
 800b62e:	d1d9      	bne.n	800b5e4 <_strtod_l+0x73c>
 800b630:	e655      	b.n	800b2de <_strtod_l+0x436>
 800b632:	2e00      	cmp	r6, #0
 800b634:	dd07      	ble.n	800b646 <_strtod_l+0x79e>
 800b636:	4649      	mov	r1, r9
 800b638:	4632      	mov	r2, r6
 800b63a:	9805      	ldr	r0, [sp, #20]
 800b63c:	f7ff f9c0 	bl	800a9c0 <__lshift>
 800b640:	4681      	mov	r9, r0
 800b642:	2800      	cmp	r0, #0
 800b644:	d0d8      	beq.n	800b5f8 <_strtod_l+0x750>
 800b646:	2f00      	cmp	r7, #0
 800b648:	dd08      	ble.n	800b65c <_strtod_l+0x7b4>
 800b64a:	4641      	mov	r1, r8
 800b64c:	463a      	mov	r2, r7
 800b64e:	9805      	ldr	r0, [sp, #20]
 800b650:	f7ff f9b6 	bl	800a9c0 <__lshift>
 800b654:	4680      	mov	r8, r0
 800b656:	2800      	cmp	r0, #0
 800b658:	f43f ae41 	beq.w	800b2de <_strtod_l+0x436>
 800b65c:	464a      	mov	r2, r9
 800b65e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b660:	9805      	ldr	r0, [sp, #20]
 800b662:	f7ff fa35 	bl	800aad0 <__mdiff>
 800b666:	4604      	mov	r4, r0
 800b668:	2800      	cmp	r0, #0
 800b66a:	f43f ae38 	beq.w	800b2de <_strtod_l+0x436>
 800b66e:	68c3      	ldr	r3, [r0, #12]
 800b670:	4641      	mov	r1, r8
 800b672:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b674:	2300      	movs	r3, #0
 800b676:	60c3      	str	r3, [r0, #12]
 800b678:	f7ff fa0e 	bl	800aa98 <__mcmp>
 800b67c:	2800      	cmp	r0, #0
 800b67e:	da45      	bge.n	800b70c <_strtod_l+0x864>
 800b680:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b682:	ea53 030a 	orrs.w	r3, r3, sl
 800b686:	d16b      	bne.n	800b760 <_strtod_l+0x8b8>
 800b688:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d167      	bne.n	800b760 <_strtod_l+0x8b8>
 800b690:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b694:	0d1b      	lsrs	r3, r3, #20
 800b696:	051b      	lsls	r3, r3, #20
 800b698:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b69c:	d960      	bls.n	800b760 <_strtod_l+0x8b8>
 800b69e:	6963      	ldr	r3, [r4, #20]
 800b6a0:	b913      	cbnz	r3, 800b6a8 <_strtod_l+0x800>
 800b6a2:	6923      	ldr	r3, [r4, #16]
 800b6a4:	2b01      	cmp	r3, #1
 800b6a6:	dd5b      	ble.n	800b760 <_strtod_l+0x8b8>
 800b6a8:	4621      	mov	r1, r4
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	9805      	ldr	r0, [sp, #20]
 800b6ae:	f7ff f987 	bl	800a9c0 <__lshift>
 800b6b2:	4641      	mov	r1, r8
 800b6b4:	4604      	mov	r4, r0
 800b6b6:	f7ff f9ef 	bl	800aa98 <__mcmp>
 800b6ba:	2800      	cmp	r0, #0
 800b6bc:	dd50      	ble.n	800b760 <_strtod_l+0x8b8>
 800b6be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b6c2:	9a08      	ldr	r2, [sp, #32]
 800b6c4:	0d1b      	lsrs	r3, r3, #20
 800b6c6:	051b      	lsls	r3, r3, #20
 800b6c8:	2a00      	cmp	r2, #0
 800b6ca:	d06a      	beq.n	800b7a2 <_strtod_l+0x8fa>
 800b6cc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b6d0:	d867      	bhi.n	800b7a2 <_strtod_l+0x8fa>
 800b6d2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b6d6:	f67f ae98 	bls.w	800b40a <_strtod_l+0x562>
 800b6da:	4650      	mov	r0, sl
 800b6dc:	4659      	mov	r1, fp
 800b6de:	4b09      	ldr	r3, [pc, #36]	@ (800b704 <_strtod_l+0x85c>)
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	f7f4 fef9 	bl	80004d8 <__aeabi_dmul>
 800b6e6:	4b08      	ldr	r3, [pc, #32]	@ (800b708 <_strtod_l+0x860>)
 800b6e8:	4682      	mov	sl, r0
 800b6ea:	400b      	ands	r3, r1
 800b6ec:	468b      	mov	fp, r1
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	f47f ae00 	bne.w	800b2f4 <_strtod_l+0x44c>
 800b6f4:	2322      	movs	r3, #34	@ 0x22
 800b6f6:	9a05      	ldr	r2, [sp, #20]
 800b6f8:	6013      	str	r3, [r2, #0]
 800b6fa:	e5fb      	b.n	800b2f4 <_strtod_l+0x44c>
 800b6fc:	0800cf80 	.word	0x0800cf80
 800b700:	fffffc02 	.word	0xfffffc02
 800b704:	39500000 	.word	0x39500000
 800b708:	7ff00000 	.word	0x7ff00000
 800b70c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b710:	d165      	bne.n	800b7de <_strtod_l+0x936>
 800b712:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b714:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b718:	b35a      	cbz	r2, 800b772 <_strtod_l+0x8ca>
 800b71a:	4a99      	ldr	r2, [pc, #612]	@ (800b980 <_strtod_l+0xad8>)
 800b71c:	4293      	cmp	r3, r2
 800b71e:	d12b      	bne.n	800b778 <_strtod_l+0x8d0>
 800b720:	9b08      	ldr	r3, [sp, #32]
 800b722:	4651      	mov	r1, sl
 800b724:	b303      	cbz	r3, 800b768 <_strtod_l+0x8c0>
 800b726:	465a      	mov	r2, fp
 800b728:	4b96      	ldr	r3, [pc, #600]	@ (800b984 <_strtod_l+0xadc>)
 800b72a:	4013      	ands	r3, r2
 800b72c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b730:	f04f 32ff 	mov.w	r2, #4294967295
 800b734:	d81b      	bhi.n	800b76e <_strtod_l+0x8c6>
 800b736:	0d1b      	lsrs	r3, r3, #20
 800b738:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b73c:	fa02 f303 	lsl.w	r3, r2, r3
 800b740:	4299      	cmp	r1, r3
 800b742:	d119      	bne.n	800b778 <_strtod_l+0x8d0>
 800b744:	4b90      	ldr	r3, [pc, #576]	@ (800b988 <_strtod_l+0xae0>)
 800b746:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b748:	429a      	cmp	r2, r3
 800b74a:	d102      	bne.n	800b752 <_strtod_l+0x8aa>
 800b74c:	3101      	adds	r1, #1
 800b74e:	f43f adc6 	beq.w	800b2de <_strtod_l+0x436>
 800b752:	f04f 0a00 	mov.w	sl, #0
 800b756:	4b8b      	ldr	r3, [pc, #556]	@ (800b984 <_strtod_l+0xadc>)
 800b758:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b75a:	401a      	ands	r2, r3
 800b75c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b760:	9b08      	ldr	r3, [sp, #32]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d1b9      	bne.n	800b6da <_strtod_l+0x832>
 800b766:	e5c5      	b.n	800b2f4 <_strtod_l+0x44c>
 800b768:	f04f 33ff 	mov.w	r3, #4294967295
 800b76c:	e7e8      	b.n	800b740 <_strtod_l+0x898>
 800b76e:	4613      	mov	r3, r2
 800b770:	e7e6      	b.n	800b740 <_strtod_l+0x898>
 800b772:	ea53 030a 	orrs.w	r3, r3, sl
 800b776:	d0a2      	beq.n	800b6be <_strtod_l+0x816>
 800b778:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b77a:	b1db      	cbz	r3, 800b7b4 <_strtod_l+0x90c>
 800b77c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b77e:	4213      	tst	r3, r2
 800b780:	d0ee      	beq.n	800b760 <_strtod_l+0x8b8>
 800b782:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b784:	4650      	mov	r0, sl
 800b786:	4659      	mov	r1, fp
 800b788:	9a08      	ldr	r2, [sp, #32]
 800b78a:	b1bb      	cbz	r3, 800b7bc <_strtod_l+0x914>
 800b78c:	f7ff fb68 	bl	800ae60 <sulp>
 800b790:	4602      	mov	r2, r0
 800b792:	460b      	mov	r3, r1
 800b794:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b798:	f7f4 fce8 	bl	800016c <__adddf3>
 800b79c:	4682      	mov	sl, r0
 800b79e:	468b      	mov	fp, r1
 800b7a0:	e7de      	b.n	800b760 <_strtod_l+0x8b8>
 800b7a2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b7a6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b7aa:	f04f 3aff 	mov.w	sl, #4294967295
 800b7ae:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b7b2:	e7d5      	b.n	800b760 <_strtod_l+0x8b8>
 800b7b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b7b6:	ea13 0f0a 	tst.w	r3, sl
 800b7ba:	e7e1      	b.n	800b780 <_strtod_l+0x8d8>
 800b7bc:	f7ff fb50 	bl	800ae60 <sulp>
 800b7c0:	4602      	mov	r2, r0
 800b7c2:	460b      	mov	r3, r1
 800b7c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b7c8:	f7f4 fcce 	bl	8000168 <__aeabi_dsub>
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	4682      	mov	sl, r0
 800b7d2:	468b      	mov	fp, r1
 800b7d4:	f7f5 f8e8 	bl	80009a8 <__aeabi_dcmpeq>
 800b7d8:	2800      	cmp	r0, #0
 800b7da:	d0c1      	beq.n	800b760 <_strtod_l+0x8b8>
 800b7dc:	e615      	b.n	800b40a <_strtod_l+0x562>
 800b7de:	4641      	mov	r1, r8
 800b7e0:	4620      	mov	r0, r4
 800b7e2:	f7ff fac9 	bl	800ad78 <__ratio>
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b7ec:	4606      	mov	r6, r0
 800b7ee:	460f      	mov	r7, r1
 800b7f0:	f7f5 f8ee 	bl	80009d0 <__aeabi_dcmple>
 800b7f4:	2800      	cmp	r0, #0
 800b7f6:	d06d      	beq.n	800b8d4 <_strtod_l+0xa2c>
 800b7f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d178      	bne.n	800b8f0 <_strtod_l+0xa48>
 800b7fe:	f1ba 0f00 	cmp.w	sl, #0
 800b802:	d156      	bne.n	800b8b2 <_strtod_l+0xa0a>
 800b804:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b806:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d158      	bne.n	800b8c0 <_strtod_l+0xa18>
 800b80e:	2200      	movs	r2, #0
 800b810:	4630      	mov	r0, r6
 800b812:	4639      	mov	r1, r7
 800b814:	4b5d      	ldr	r3, [pc, #372]	@ (800b98c <_strtod_l+0xae4>)
 800b816:	f7f5 f8d1 	bl	80009bc <__aeabi_dcmplt>
 800b81a:	2800      	cmp	r0, #0
 800b81c:	d157      	bne.n	800b8ce <_strtod_l+0xa26>
 800b81e:	4630      	mov	r0, r6
 800b820:	4639      	mov	r1, r7
 800b822:	2200      	movs	r2, #0
 800b824:	4b5a      	ldr	r3, [pc, #360]	@ (800b990 <_strtod_l+0xae8>)
 800b826:	f7f4 fe57 	bl	80004d8 <__aeabi_dmul>
 800b82a:	4606      	mov	r6, r0
 800b82c:	460f      	mov	r7, r1
 800b82e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b832:	9606      	str	r6, [sp, #24]
 800b834:	9307      	str	r3, [sp, #28]
 800b836:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b83a:	4d52      	ldr	r5, [pc, #328]	@ (800b984 <_strtod_l+0xadc>)
 800b83c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b840:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b842:	401d      	ands	r5, r3
 800b844:	4b53      	ldr	r3, [pc, #332]	@ (800b994 <_strtod_l+0xaec>)
 800b846:	429d      	cmp	r5, r3
 800b848:	f040 80aa 	bne.w	800b9a0 <_strtod_l+0xaf8>
 800b84c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b84e:	4650      	mov	r0, sl
 800b850:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b854:	4659      	mov	r1, fp
 800b856:	f7ff f9cf 	bl	800abf8 <__ulp>
 800b85a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b85e:	f7f4 fe3b 	bl	80004d8 <__aeabi_dmul>
 800b862:	4652      	mov	r2, sl
 800b864:	465b      	mov	r3, fp
 800b866:	f7f4 fc81 	bl	800016c <__adddf3>
 800b86a:	460b      	mov	r3, r1
 800b86c:	4945      	ldr	r1, [pc, #276]	@ (800b984 <_strtod_l+0xadc>)
 800b86e:	4a4a      	ldr	r2, [pc, #296]	@ (800b998 <_strtod_l+0xaf0>)
 800b870:	4019      	ands	r1, r3
 800b872:	4291      	cmp	r1, r2
 800b874:	4682      	mov	sl, r0
 800b876:	d942      	bls.n	800b8fe <_strtod_l+0xa56>
 800b878:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b87a:	4b43      	ldr	r3, [pc, #268]	@ (800b988 <_strtod_l+0xae0>)
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d103      	bne.n	800b888 <_strtod_l+0x9e0>
 800b880:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b882:	3301      	adds	r3, #1
 800b884:	f43f ad2b 	beq.w	800b2de <_strtod_l+0x436>
 800b888:	f04f 3aff 	mov.w	sl, #4294967295
 800b88c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800b988 <_strtod_l+0xae0>
 800b890:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b892:	9805      	ldr	r0, [sp, #20]
 800b894:	f7fe fe7e 	bl	800a594 <_Bfree>
 800b898:	4649      	mov	r1, r9
 800b89a:	9805      	ldr	r0, [sp, #20]
 800b89c:	f7fe fe7a 	bl	800a594 <_Bfree>
 800b8a0:	4641      	mov	r1, r8
 800b8a2:	9805      	ldr	r0, [sp, #20]
 800b8a4:	f7fe fe76 	bl	800a594 <_Bfree>
 800b8a8:	4621      	mov	r1, r4
 800b8aa:	9805      	ldr	r0, [sp, #20]
 800b8ac:	f7fe fe72 	bl	800a594 <_Bfree>
 800b8b0:	e618      	b.n	800b4e4 <_strtod_l+0x63c>
 800b8b2:	f1ba 0f01 	cmp.w	sl, #1
 800b8b6:	d103      	bne.n	800b8c0 <_strtod_l+0xa18>
 800b8b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	f43f ada5 	beq.w	800b40a <_strtod_l+0x562>
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	4b36      	ldr	r3, [pc, #216]	@ (800b99c <_strtod_l+0xaf4>)
 800b8c4:	2600      	movs	r6, #0
 800b8c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b8ca:	4f30      	ldr	r7, [pc, #192]	@ (800b98c <_strtod_l+0xae4>)
 800b8cc:	e7b3      	b.n	800b836 <_strtod_l+0x98e>
 800b8ce:	2600      	movs	r6, #0
 800b8d0:	4f2f      	ldr	r7, [pc, #188]	@ (800b990 <_strtod_l+0xae8>)
 800b8d2:	e7ac      	b.n	800b82e <_strtod_l+0x986>
 800b8d4:	4630      	mov	r0, r6
 800b8d6:	4639      	mov	r1, r7
 800b8d8:	4b2d      	ldr	r3, [pc, #180]	@ (800b990 <_strtod_l+0xae8>)
 800b8da:	2200      	movs	r2, #0
 800b8dc:	f7f4 fdfc 	bl	80004d8 <__aeabi_dmul>
 800b8e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8e2:	4606      	mov	r6, r0
 800b8e4:	460f      	mov	r7, r1
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d0a1      	beq.n	800b82e <_strtod_l+0x986>
 800b8ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b8ee:	e7a2      	b.n	800b836 <_strtod_l+0x98e>
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	4b26      	ldr	r3, [pc, #152]	@ (800b98c <_strtod_l+0xae4>)
 800b8f4:	4616      	mov	r6, r2
 800b8f6:	461f      	mov	r7, r3
 800b8f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b8fc:	e79b      	b.n	800b836 <_strtod_l+0x98e>
 800b8fe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b902:	9b08      	ldr	r3, [sp, #32]
 800b904:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d1c1      	bne.n	800b890 <_strtod_l+0x9e8>
 800b90c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b910:	0d1b      	lsrs	r3, r3, #20
 800b912:	051b      	lsls	r3, r3, #20
 800b914:	429d      	cmp	r5, r3
 800b916:	d1bb      	bne.n	800b890 <_strtod_l+0x9e8>
 800b918:	4630      	mov	r0, r6
 800b91a:	4639      	mov	r1, r7
 800b91c:	f7f5 fba2 	bl	8001064 <__aeabi_d2lz>
 800b920:	f7f4 fdac 	bl	800047c <__aeabi_l2d>
 800b924:	4602      	mov	r2, r0
 800b926:	460b      	mov	r3, r1
 800b928:	4630      	mov	r0, r6
 800b92a:	4639      	mov	r1, r7
 800b92c:	f7f4 fc1c 	bl	8000168 <__aeabi_dsub>
 800b930:	460b      	mov	r3, r1
 800b932:	4602      	mov	r2, r0
 800b934:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b938:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b93c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b93e:	ea46 060a 	orr.w	r6, r6, sl
 800b942:	431e      	orrs	r6, r3
 800b944:	d069      	beq.n	800ba1a <_strtod_l+0xb72>
 800b946:	a30a      	add	r3, pc, #40	@ (adr r3, 800b970 <_strtod_l+0xac8>)
 800b948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94c:	f7f5 f836 	bl	80009bc <__aeabi_dcmplt>
 800b950:	2800      	cmp	r0, #0
 800b952:	f47f accf 	bne.w	800b2f4 <_strtod_l+0x44c>
 800b956:	a308      	add	r3, pc, #32	@ (adr r3, 800b978 <_strtod_l+0xad0>)
 800b958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b95c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b960:	f7f5 f84a 	bl	80009f8 <__aeabi_dcmpgt>
 800b964:	2800      	cmp	r0, #0
 800b966:	d093      	beq.n	800b890 <_strtod_l+0x9e8>
 800b968:	e4c4      	b.n	800b2f4 <_strtod_l+0x44c>
 800b96a:	bf00      	nop
 800b96c:	f3af 8000 	nop.w
 800b970:	94a03595 	.word	0x94a03595
 800b974:	3fdfffff 	.word	0x3fdfffff
 800b978:	35afe535 	.word	0x35afe535
 800b97c:	3fe00000 	.word	0x3fe00000
 800b980:	000fffff 	.word	0x000fffff
 800b984:	7ff00000 	.word	0x7ff00000
 800b988:	7fefffff 	.word	0x7fefffff
 800b98c:	3ff00000 	.word	0x3ff00000
 800b990:	3fe00000 	.word	0x3fe00000
 800b994:	7fe00000 	.word	0x7fe00000
 800b998:	7c9fffff 	.word	0x7c9fffff
 800b99c:	bff00000 	.word	0xbff00000
 800b9a0:	9b08      	ldr	r3, [sp, #32]
 800b9a2:	b323      	cbz	r3, 800b9ee <_strtod_l+0xb46>
 800b9a4:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b9a8:	d821      	bhi.n	800b9ee <_strtod_l+0xb46>
 800b9aa:	a327      	add	r3, pc, #156	@ (adr r3, 800ba48 <_strtod_l+0xba0>)
 800b9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b0:	4630      	mov	r0, r6
 800b9b2:	4639      	mov	r1, r7
 800b9b4:	f7f5 f80c 	bl	80009d0 <__aeabi_dcmple>
 800b9b8:	b1a0      	cbz	r0, 800b9e4 <_strtod_l+0xb3c>
 800b9ba:	4639      	mov	r1, r7
 800b9bc:	4630      	mov	r0, r6
 800b9be:	f7f5 f863 	bl	8000a88 <__aeabi_d2uiz>
 800b9c2:	2801      	cmp	r0, #1
 800b9c4:	bf38      	it	cc
 800b9c6:	2001      	movcc	r0, #1
 800b9c8:	f7f4 fd0c 	bl	80003e4 <__aeabi_ui2d>
 800b9cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b9ce:	4606      	mov	r6, r0
 800b9d0:	460f      	mov	r7, r1
 800b9d2:	b9fb      	cbnz	r3, 800ba14 <_strtod_l+0xb6c>
 800b9d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b9d8:	9014      	str	r0, [sp, #80]	@ 0x50
 800b9da:	9315      	str	r3, [sp, #84]	@ 0x54
 800b9dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b9e0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b9e4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b9e6:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b9ea:	1b5b      	subs	r3, r3, r5
 800b9ec:	9311      	str	r3, [sp, #68]	@ 0x44
 800b9ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b9f2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b9f6:	f7ff f8ff 	bl	800abf8 <__ulp>
 800b9fa:	4602      	mov	r2, r0
 800b9fc:	460b      	mov	r3, r1
 800b9fe:	4650      	mov	r0, sl
 800ba00:	4659      	mov	r1, fp
 800ba02:	f7f4 fd69 	bl	80004d8 <__aeabi_dmul>
 800ba06:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ba0a:	f7f4 fbaf 	bl	800016c <__adddf3>
 800ba0e:	4682      	mov	sl, r0
 800ba10:	468b      	mov	fp, r1
 800ba12:	e776      	b.n	800b902 <_strtod_l+0xa5a>
 800ba14:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ba18:	e7e0      	b.n	800b9dc <_strtod_l+0xb34>
 800ba1a:	a30d      	add	r3, pc, #52	@ (adr r3, 800ba50 <_strtod_l+0xba8>)
 800ba1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba20:	f7f4 ffcc 	bl	80009bc <__aeabi_dcmplt>
 800ba24:	e79e      	b.n	800b964 <_strtod_l+0xabc>
 800ba26:	2300      	movs	r3, #0
 800ba28:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba2c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ba2e:	6013      	str	r3, [r2, #0]
 800ba30:	f7ff ba77 	b.w	800af22 <_strtod_l+0x7a>
 800ba34:	2a65      	cmp	r2, #101	@ 0x65
 800ba36:	f43f ab6e 	beq.w	800b116 <_strtod_l+0x26e>
 800ba3a:	2a45      	cmp	r2, #69	@ 0x45
 800ba3c:	f43f ab6b 	beq.w	800b116 <_strtod_l+0x26e>
 800ba40:	2301      	movs	r3, #1
 800ba42:	f7ff bba6 	b.w	800b192 <_strtod_l+0x2ea>
 800ba46:	bf00      	nop
 800ba48:	ffc00000 	.word	0xffc00000
 800ba4c:	41dfffff 	.word	0x41dfffff
 800ba50:	94a03595 	.word	0x94a03595
 800ba54:	3fcfffff 	.word	0x3fcfffff

0800ba58 <_strtod_r>:
 800ba58:	4b01      	ldr	r3, [pc, #4]	@ (800ba60 <_strtod_r+0x8>)
 800ba5a:	f7ff ba25 	b.w	800aea8 <_strtod_l>
 800ba5e:	bf00      	nop
 800ba60:	200000cc 	.word	0x200000cc

0800ba64 <_strtol_l.constprop.0>:
 800ba64:	2b24      	cmp	r3, #36	@ 0x24
 800ba66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba6a:	4686      	mov	lr, r0
 800ba6c:	4690      	mov	r8, r2
 800ba6e:	d801      	bhi.n	800ba74 <_strtol_l.constprop.0+0x10>
 800ba70:	2b01      	cmp	r3, #1
 800ba72:	d106      	bne.n	800ba82 <_strtol_l.constprop.0+0x1e>
 800ba74:	f7fd fdb0 	bl	80095d8 <__errno>
 800ba78:	2316      	movs	r3, #22
 800ba7a:	6003      	str	r3, [r0, #0]
 800ba7c:	2000      	movs	r0, #0
 800ba7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba82:	460d      	mov	r5, r1
 800ba84:	4833      	ldr	r0, [pc, #204]	@ (800bb54 <_strtol_l.constprop.0+0xf0>)
 800ba86:	462a      	mov	r2, r5
 800ba88:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ba8c:	5d06      	ldrb	r6, [r0, r4]
 800ba8e:	f016 0608 	ands.w	r6, r6, #8
 800ba92:	d1f8      	bne.n	800ba86 <_strtol_l.constprop.0+0x22>
 800ba94:	2c2d      	cmp	r4, #45	@ 0x2d
 800ba96:	d12d      	bne.n	800baf4 <_strtol_l.constprop.0+0x90>
 800ba98:	2601      	movs	r6, #1
 800ba9a:	782c      	ldrb	r4, [r5, #0]
 800ba9c:	1c95      	adds	r5, r2, #2
 800ba9e:	f033 0210 	bics.w	r2, r3, #16
 800baa2:	d109      	bne.n	800bab8 <_strtol_l.constprop.0+0x54>
 800baa4:	2c30      	cmp	r4, #48	@ 0x30
 800baa6:	d12a      	bne.n	800bafe <_strtol_l.constprop.0+0x9a>
 800baa8:	782a      	ldrb	r2, [r5, #0]
 800baaa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800baae:	2a58      	cmp	r2, #88	@ 0x58
 800bab0:	d125      	bne.n	800bafe <_strtol_l.constprop.0+0x9a>
 800bab2:	2310      	movs	r3, #16
 800bab4:	786c      	ldrb	r4, [r5, #1]
 800bab6:	3502      	adds	r5, #2
 800bab8:	2200      	movs	r2, #0
 800baba:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800babe:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bac2:	fbbc f9f3 	udiv	r9, ip, r3
 800bac6:	4610      	mov	r0, r2
 800bac8:	fb03 ca19 	mls	sl, r3, r9, ip
 800bacc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bad0:	2f09      	cmp	r7, #9
 800bad2:	d81b      	bhi.n	800bb0c <_strtol_l.constprop.0+0xa8>
 800bad4:	463c      	mov	r4, r7
 800bad6:	42a3      	cmp	r3, r4
 800bad8:	dd27      	ble.n	800bb2a <_strtol_l.constprop.0+0xc6>
 800bada:	1c57      	adds	r7, r2, #1
 800badc:	d007      	beq.n	800baee <_strtol_l.constprop.0+0x8a>
 800bade:	4581      	cmp	r9, r0
 800bae0:	d320      	bcc.n	800bb24 <_strtol_l.constprop.0+0xc0>
 800bae2:	d101      	bne.n	800bae8 <_strtol_l.constprop.0+0x84>
 800bae4:	45a2      	cmp	sl, r4
 800bae6:	db1d      	blt.n	800bb24 <_strtol_l.constprop.0+0xc0>
 800bae8:	2201      	movs	r2, #1
 800baea:	fb00 4003 	mla	r0, r0, r3, r4
 800baee:	f815 4b01 	ldrb.w	r4, [r5], #1
 800baf2:	e7eb      	b.n	800bacc <_strtol_l.constprop.0+0x68>
 800baf4:	2c2b      	cmp	r4, #43	@ 0x2b
 800baf6:	bf04      	itt	eq
 800baf8:	782c      	ldrbeq	r4, [r5, #0]
 800bafa:	1c95      	addeq	r5, r2, #2
 800bafc:	e7cf      	b.n	800ba9e <_strtol_l.constprop.0+0x3a>
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d1da      	bne.n	800bab8 <_strtol_l.constprop.0+0x54>
 800bb02:	2c30      	cmp	r4, #48	@ 0x30
 800bb04:	bf0c      	ite	eq
 800bb06:	2308      	moveq	r3, #8
 800bb08:	230a      	movne	r3, #10
 800bb0a:	e7d5      	b.n	800bab8 <_strtol_l.constprop.0+0x54>
 800bb0c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bb10:	2f19      	cmp	r7, #25
 800bb12:	d801      	bhi.n	800bb18 <_strtol_l.constprop.0+0xb4>
 800bb14:	3c37      	subs	r4, #55	@ 0x37
 800bb16:	e7de      	b.n	800bad6 <_strtol_l.constprop.0+0x72>
 800bb18:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bb1c:	2f19      	cmp	r7, #25
 800bb1e:	d804      	bhi.n	800bb2a <_strtol_l.constprop.0+0xc6>
 800bb20:	3c57      	subs	r4, #87	@ 0x57
 800bb22:	e7d8      	b.n	800bad6 <_strtol_l.constprop.0+0x72>
 800bb24:	f04f 32ff 	mov.w	r2, #4294967295
 800bb28:	e7e1      	b.n	800baee <_strtol_l.constprop.0+0x8a>
 800bb2a:	1c53      	adds	r3, r2, #1
 800bb2c:	d108      	bne.n	800bb40 <_strtol_l.constprop.0+0xdc>
 800bb2e:	2322      	movs	r3, #34	@ 0x22
 800bb30:	4660      	mov	r0, ip
 800bb32:	f8ce 3000 	str.w	r3, [lr]
 800bb36:	f1b8 0f00 	cmp.w	r8, #0
 800bb3a:	d0a0      	beq.n	800ba7e <_strtol_l.constprop.0+0x1a>
 800bb3c:	1e69      	subs	r1, r5, #1
 800bb3e:	e006      	b.n	800bb4e <_strtol_l.constprop.0+0xea>
 800bb40:	b106      	cbz	r6, 800bb44 <_strtol_l.constprop.0+0xe0>
 800bb42:	4240      	negs	r0, r0
 800bb44:	f1b8 0f00 	cmp.w	r8, #0
 800bb48:	d099      	beq.n	800ba7e <_strtol_l.constprop.0+0x1a>
 800bb4a:	2a00      	cmp	r2, #0
 800bb4c:	d1f6      	bne.n	800bb3c <_strtol_l.constprop.0+0xd8>
 800bb4e:	f8c8 1000 	str.w	r1, [r8]
 800bb52:	e794      	b.n	800ba7e <_strtol_l.constprop.0+0x1a>
 800bb54:	0800cfa9 	.word	0x0800cfa9

0800bb58 <_strtol_r>:
 800bb58:	f7ff bf84 	b.w	800ba64 <_strtol_l.constprop.0>

0800bb5c <__ssputs_r>:
 800bb5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb60:	461f      	mov	r7, r3
 800bb62:	688e      	ldr	r6, [r1, #8]
 800bb64:	4682      	mov	sl, r0
 800bb66:	42be      	cmp	r6, r7
 800bb68:	460c      	mov	r4, r1
 800bb6a:	4690      	mov	r8, r2
 800bb6c:	680b      	ldr	r3, [r1, #0]
 800bb6e:	d82d      	bhi.n	800bbcc <__ssputs_r+0x70>
 800bb70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bb74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bb78:	d026      	beq.n	800bbc8 <__ssputs_r+0x6c>
 800bb7a:	6965      	ldr	r5, [r4, #20]
 800bb7c:	6909      	ldr	r1, [r1, #16]
 800bb7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb82:	eba3 0901 	sub.w	r9, r3, r1
 800bb86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb8a:	1c7b      	adds	r3, r7, #1
 800bb8c:	444b      	add	r3, r9
 800bb8e:	106d      	asrs	r5, r5, #1
 800bb90:	429d      	cmp	r5, r3
 800bb92:	bf38      	it	cc
 800bb94:	461d      	movcc	r5, r3
 800bb96:	0553      	lsls	r3, r2, #21
 800bb98:	d527      	bpl.n	800bbea <__ssputs_r+0x8e>
 800bb9a:	4629      	mov	r1, r5
 800bb9c:	f7fe fc2e 	bl	800a3fc <_malloc_r>
 800bba0:	4606      	mov	r6, r0
 800bba2:	b360      	cbz	r0, 800bbfe <__ssputs_r+0xa2>
 800bba4:	464a      	mov	r2, r9
 800bba6:	6921      	ldr	r1, [r4, #16]
 800bba8:	f7fd fd51 	bl	800964e <memcpy>
 800bbac:	89a3      	ldrh	r3, [r4, #12]
 800bbae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bbb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bbb6:	81a3      	strh	r3, [r4, #12]
 800bbb8:	6126      	str	r6, [r4, #16]
 800bbba:	444e      	add	r6, r9
 800bbbc:	6026      	str	r6, [r4, #0]
 800bbbe:	463e      	mov	r6, r7
 800bbc0:	6165      	str	r5, [r4, #20]
 800bbc2:	eba5 0509 	sub.w	r5, r5, r9
 800bbc6:	60a5      	str	r5, [r4, #8]
 800bbc8:	42be      	cmp	r6, r7
 800bbca:	d900      	bls.n	800bbce <__ssputs_r+0x72>
 800bbcc:	463e      	mov	r6, r7
 800bbce:	4632      	mov	r2, r6
 800bbd0:	4641      	mov	r1, r8
 800bbd2:	6820      	ldr	r0, [r4, #0]
 800bbd4:	f000 fb96 	bl	800c304 <memmove>
 800bbd8:	2000      	movs	r0, #0
 800bbda:	68a3      	ldr	r3, [r4, #8]
 800bbdc:	1b9b      	subs	r3, r3, r6
 800bbde:	60a3      	str	r3, [r4, #8]
 800bbe0:	6823      	ldr	r3, [r4, #0]
 800bbe2:	4433      	add	r3, r6
 800bbe4:	6023      	str	r3, [r4, #0]
 800bbe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbea:	462a      	mov	r2, r5
 800bbec:	f000 ff49 	bl	800ca82 <_realloc_r>
 800bbf0:	4606      	mov	r6, r0
 800bbf2:	2800      	cmp	r0, #0
 800bbf4:	d1e0      	bne.n	800bbb8 <__ssputs_r+0x5c>
 800bbf6:	4650      	mov	r0, sl
 800bbf8:	6921      	ldr	r1, [r4, #16]
 800bbfa:	f7fe fb8d 	bl	800a318 <_free_r>
 800bbfe:	230c      	movs	r3, #12
 800bc00:	f8ca 3000 	str.w	r3, [sl]
 800bc04:	89a3      	ldrh	r3, [r4, #12]
 800bc06:	f04f 30ff 	mov.w	r0, #4294967295
 800bc0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc0e:	81a3      	strh	r3, [r4, #12]
 800bc10:	e7e9      	b.n	800bbe6 <__ssputs_r+0x8a>
	...

0800bc14 <_svfiprintf_r>:
 800bc14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc18:	4698      	mov	r8, r3
 800bc1a:	898b      	ldrh	r3, [r1, #12]
 800bc1c:	4607      	mov	r7, r0
 800bc1e:	061b      	lsls	r3, r3, #24
 800bc20:	460d      	mov	r5, r1
 800bc22:	4614      	mov	r4, r2
 800bc24:	b09d      	sub	sp, #116	@ 0x74
 800bc26:	d510      	bpl.n	800bc4a <_svfiprintf_r+0x36>
 800bc28:	690b      	ldr	r3, [r1, #16]
 800bc2a:	b973      	cbnz	r3, 800bc4a <_svfiprintf_r+0x36>
 800bc2c:	2140      	movs	r1, #64	@ 0x40
 800bc2e:	f7fe fbe5 	bl	800a3fc <_malloc_r>
 800bc32:	6028      	str	r0, [r5, #0]
 800bc34:	6128      	str	r0, [r5, #16]
 800bc36:	b930      	cbnz	r0, 800bc46 <_svfiprintf_r+0x32>
 800bc38:	230c      	movs	r3, #12
 800bc3a:	603b      	str	r3, [r7, #0]
 800bc3c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc40:	b01d      	add	sp, #116	@ 0x74
 800bc42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc46:	2340      	movs	r3, #64	@ 0x40
 800bc48:	616b      	str	r3, [r5, #20]
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc4e:	2320      	movs	r3, #32
 800bc50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bc54:	2330      	movs	r3, #48	@ 0x30
 800bc56:	f04f 0901 	mov.w	r9, #1
 800bc5a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc5e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800bdf8 <_svfiprintf_r+0x1e4>
 800bc62:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bc66:	4623      	mov	r3, r4
 800bc68:	469a      	mov	sl, r3
 800bc6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc6e:	b10a      	cbz	r2, 800bc74 <_svfiprintf_r+0x60>
 800bc70:	2a25      	cmp	r2, #37	@ 0x25
 800bc72:	d1f9      	bne.n	800bc68 <_svfiprintf_r+0x54>
 800bc74:	ebba 0b04 	subs.w	fp, sl, r4
 800bc78:	d00b      	beq.n	800bc92 <_svfiprintf_r+0x7e>
 800bc7a:	465b      	mov	r3, fp
 800bc7c:	4622      	mov	r2, r4
 800bc7e:	4629      	mov	r1, r5
 800bc80:	4638      	mov	r0, r7
 800bc82:	f7ff ff6b 	bl	800bb5c <__ssputs_r>
 800bc86:	3001      	adds	r0, #1
 800bc88:	f000 80a7 	beq.w	800bdda <_svfiprintf_r+0x1c6>
 800bc8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc8e:	445a      	add	r2, fp
 800bc90:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc92:	f89a 3000 	ldrb.w	r3, [sl]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	f000 809f 	beq.w	800bdda <_svfiprintf_r+0x1c6>
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	f04f 32ff 	mov.w	r2, #4294967295
 800bca2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bca6:	f10a 0a01 	add.w	sl, sl, #1
 800bcaa:	9304      	str	r3, [sp, #16]
 800bcac:	9307      	str	r3, [sp, #28]
 800bcae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bcb2:	931a      	str	r3, [sp, #104]	@ 0x68
 800bcb4:	4654      	mov	r4, sl
 800bcb6:	2205      	movs	r2, #5
 800bcb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcbc:	484e      	ldr	r0, [pc, #312]	@ (800bdf8 <_svfiprintf_r+0x1e4>)
 800bcbe:	f7fd fcb8 	bl	8009632 <memchr>
 800bcc2:	9a04      	ldr	r2, [sp, #16]
 800bcc4:	b9d8      	cbnz	r0, 800bcfe <_svfiprintf_r+0xea>
 800bcc6:	06d0      	lsls	r0, r2, #27
 800bcc8:	bf44      	itt	mi
 800bcca:	2320      	movmi	r3, #32
 800bccc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bcd0:	0711      	lsls	r1, r2, #28
 800bcd2:	bf44      	itt	mi
 800bcd4:	232b      	movmi	r3, #43	@ 0x2b
 800bcd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bcda:	f89a 3000 	ldrb.w	r3, [sl]
 800bcde:	2b2a      	cmp	r3, #42	@ 0x2a
 800bce0:	d015      	beq.n	800bd0e <_svfiprintf_r+0xfa>
 800bce2:	4654      	mov	r4, sl
 800bce4:	2000      	movs	r0, #0
 800bce6:	f04f 0c0a 	mov.w	ip, #10
 800bcea:	9a07      	ldr	r2, [sp, #28]
 800bcec:	4621      	mov	r1, r4
 800bcee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcf2:	3b30      	subs	r3, #48	@ 0x30
 800bcf4:	2b09      	cmp	r3, #9
 800bcf6:	d94b      	bls.n	800bd90 <_svfiprintf_r+0x17c>
 800bcf8:	b1b0      	cbz	r0, 800bd28 <_svfiprintf_r+0x114>
 800bcfa:	9207      	str	r2, [sp, #28]
 800bcfc:	e014      	b.n	800bd28 <_svfiprintf_r+0x114>
 800bcfe:	eba0 0308 	sub.w	r3, r0, r8
 800bd02:	fa09 f303 	lsl.w	r3, r9, r3
 800bd06:	4313      	orrs	r3, r2
 800bd08:	46a2      	mov	sl, r4
 800bd0a:	9304      	str	r3, [sp, #16]
 800bd0c:	e7d2      	b.n	800bcb4 <_svfiprintf_r+0xa0>
 800bd0e:	9b03      	ldr	r3, [sp, #12]
 800bd10:	1d19      	adds	r1, r3, #4
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	9103      	str	r1, [sp, #12]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	bfbb      	ittet	lt
 800bd1a:	425b      	neglt	r3, r3
 800bd1c:	f042 0202 	orrlt.w	r2, r2, #2
 800bd20:	9307      	strge	r3, [sp, #28]
 800bd22:	9307      	strlt	r3, [sp, #28]
 800bd24:	bfb8      	it	lt
 800bd26:	9204      	strlt	r2, [sp, #16]
 800bd28:	7823      	ldrb	r3, [r4, #0]
 800bd2a:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd2c:	d10a      	bne.n	800bd44 <_svfiprintf_r+0x130>
 800bd2e:	7863      	ldrb	r3, [r4, #1]
 800bd30:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd32:	d132      	bne.n	800bd9a <_svfiprintf_r+0x186>
 800bd34:	9b03      	ldr	r3, [sp, #12]
 800bd36:	3402      	adds	r4, #2
 800bd38:	1d1a      	adds	r2, r3, #4
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	9203      	str	r2, [sp, #12]
 800bd3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bd42:	9305      	str	r3, [sp, #20]
 800bd44:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800bdfc <_svfiprintf_r+0x1e8>
 800bd48:	2203      	movs	r2, #3
 800bd4a:	4650      	mov	r0, sl
 800bd4c:	7821      	ldrb	r1, [r4, #0]
 800bd4e:	f7fd fc70 	bl	8009632 <memchr>
 800bd52:	b138      	cbz	r0, 800bd64 <_svfiprintf_r+0x150>
 800bd54:	2240      	movs	r2, #64	@ 0x40
 800bd56:	9b04      	ldr	r3, [sp, #16]
 800bd58:	eba0 000a 	sub.w	r0, r0, sl
 800bd5c:	4082      	lsls	r2, r0
 800bd5e:	4313      	orrs	r3, r2
 800bd60:	3401      	adds	r4, #1
 800bd62:	9304      	str	r3, [sp, #16]
 800bd64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd68:	2206      	movs	r2, #6
 800bd6a:	4825      	ldr	r0, [pc, #148]	@ (800be00 <_svfiprintf_r+0x1ec>)
 800bd6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bd70:	f7fd fc5f 	bl	8009632 <memchr>
 800bd74:	2800      	cmp	r0, #0
 800bd76:	d036      	beq.n	800bde6 <_svfiprintf_r+0x1d2>
 800bd78:	4b22      	ldr	r3, [pc, #136]	@ (800be04 <_svfiprintf_r+0x1f0>)
 800bd7a:	bb1b      	cbnz	r3, 800bdc4 <_svfiprintf_r+0x1b0>
 800bd7c:	9b03      	ldr	r3, [sp, #12]
 800bd7e:	3307      	adds	r3, #7
 800bd80:	f023 0307 	bic.w	r3, r3, #7
 800bd84:	3308      	adds	r3, #8
 800bd86:	9303      	str	r3, [sp, #12]
 800bd88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd8a:	4433      	add	r3, r6
 800bd8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd8e:	e76a      	b.n	800bc66 <_svfiprintf_r+0x52>
 800bd90:	460c      	mov	r4, r1
 800bd92:	2001      	movs	r0, #1
 800bd94:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd98:	e7a8      	b.n	800bcec <_svfiprintf_r+0xd8>
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	f04f 0c0a 	mov.w	ip, #10
 800bda0:	4619      	mov	r1, r3
 800bda2:	3401      	adds	r4, #1
 800bda4:	9305      	str	r3, [sp, #20]
 800bda6:	4620      	mov	r0, r4
 800bda8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdac:	3a30      	subs	r2, #48	@ 0x30
 800bdae:	2a09      	cmp	r2, #9
 800bdb0:	d903      	bls.n	800bdba <_svfiprintf_r+0x1a6>
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d0c6      	beq.n	800bd44 <_svfiprintf_r+0x130>
 800bdb6:	9105      	str	r1, [sp, #20]
 800bdb8:	e7c4      	b.n	800bd44 <_svfiprintf_r+0x130>
 800bdba:	4604      	mov	r4, r0
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	fb0c 2101 	mla	r1, ip, r1, r2
 800bdc2:	e7f0      	b.n	800bda6 <_svfiprintf_r+0x192>
 800bdc4:	ab03      	add	r3, sp, #12
 800bdc6:	9300      	str	r3, [sp, #0]
 800bdc8:	462a      	mov	r2, r5
 800bdca:	4638      	mov	r0, r7
 800bdcc:	4b0e      	ldr	r3, [pc, #56]	@ (800be08 <_svfiprintf_r+0x1f4>)
 800bdce:	a904      	add	r1, sp, #16
 800bdd0:	f7fc fcaa 	bl	8008728 <_printf_float>
 800bdd4:	1c42      	adds	r2, r0, #1
 800bdd6:	4606      	mov	r6, r0
 800bdd8:	d1d6      	bne.n	800bd88 <_svfiprintf_r+0x174>
 800bdda:	89ab      	ldrh	r3, [r5, #12]
 800bddc:	065b      	lsls	r3, r3, #25
 800bdde:	f53f af2d 	bmi.w	800bc3c <_svfiprintf_r+0x28>
 800bde2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bde4:	e72c      	b.n	800bc40 <_svfiprintf_r+0x2c>
 800bde6:	ab03      	add	r3, sp, #12
 800bde8:	9300      	str	r3, [sp, #0]
 800bdea:	462a      	mov	r2, r5
 800bdec:	4638      	mov	r0, r7
 800bdee:	4b06      	ldr	r3, [pc, #24]	@ (800be08 <_svfiprintf_r+0x1f4>)
 800bdf0:	a904      	add	r1, sp, #16
 800bdf2:	f7fc ff37 	bl	8008c64 <_printf_i>
 800bdf6:	e7ed      	b.n	800bdd4 <_svfiprintf_r+0x1c0>
 800bdf8:	0800d0a9 	.word	0x0800d0a9
 800bdfc:	0800d0af 	.word	0x0800d0af
 800be00:	0800d0b3 	.word	0x0800d0b3
 800be04:	08008729 	.word	0x08008729
 800be08:	0800bb5d 	.word	0x0800bb5d

0800be0c <__sfputc_r>:
 800be0c:	6893      	ldr	r3, [r2, #8]
 800be0e:	b410      	push	{r4}
 800be10:	3b01      	subs	r3, #1
 800be12:	2b00      	cmp	r3, #0
 800be14:	6093      	str	r3, [r2, #8]
 800be16:	da07      	bge.n	800be28 <__sfputc_r+0x1c>
 800be18:	6994      	ldr	r4, [r2, #24]
 800be1a:	42a3      	cmp	r3, r4
 800be1c:	db01      	blt.n	800be22 <__sfputc_r+0x16>
 800be1e:	290a      	cmp	r1, #10
 800be20:	d102      	bne.n	800be28 <__sfputc_r+0x1c>
 800be22:	bc10      	pop	{r4}
 800be24:	f000 b9da 	b.w	800c1dc <__swbuf_r>
 800be28:	6813      	ldr	r3, [r2, #0]
 800be2a:	1c58      	adds	r0, r3, #1
 800be2c:	6010      	str	r0, [r2, #0]
 800be2e:	7019      	strb	r1, [r3, #0]
 800be30:	4608      	mov	r0, r1
 800be32:	bc10      	pop	{r4}
 800be34:	4770      	bx	lr

0800be36 <__sfputs_r>:
 800be36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be38:	4606      	mov	r6, r0
 800be3a:	460f      	mov	r7, r1
 800be3c:	4614      	mov	r4, r2
 800be3e:	18d5      	adds	r5, r2, r3
 800be40:	42ac      	cmp	r4, r5
 800be42:	d101      	bne.n	800be48 <__sfputs_r+0x12>
 800be44:	2000      	movs	r0, #0
 800be46:	e007      	b.n	800be58 <__sfputs_r+0x22>
 800be48:	463a      	mov	r2, r7
 800be4a:	4630      	mov	r0, r6
 800be4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be50:	f7ff ffdc 	bl	800be0c <__sfputc_r>
 800be54:	1c43      	adds	r3, r0, #1
 800be56:	d1f3      	bne.n	800be40 <__sfputs_r+0xa>
 800be58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800be5c <_vfiprintf_r>:
 800be5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be60:	460d      	mov	r5, r1
 800be62:	4614      	mov	r4, r2
 800be64:	4698      	mov	r8, r3
 800be66:	4606      	mov	r6, r0
 800be68:	b09d      	sub	sp, #116	@ 0x74
 800be6a:	b118      	cbz	r0, 800be74 <_vfiprintf_r+0x18>
 800be6c:	6a03      	ldr	r3, [r0, #32]
 800be6e:	b90b      	cbnz	r3, 800be74 <_vfiprintf_r+0x18>
 800be70:	f7fd fab4 	bl	80093dc <__sinit>
 800be74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be76:	07d9      	lsls	r1, r3, #31
 800be78:	d405      	bmi.n	800be86 <_vfiprintf_r+0x2a>
 800be7a:	89ab      	ldrh	r3, [r5, #12]
 800be7c:	059a      	lsls	r2, r3, #22
 800be7e:	d402      	bmi.n	800be86 <_vfiprintf_r+0x2a>
 800be80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be82:	f7fd fbd4 	bl	800962e <__retarget_lock_acquire_recursive>
 800be86:	89ab      	ldrh	r3, [r5, #12]
 800be88:	071b      	lsls	r3, r3, #28
 800be8a:	d501      	bpl.n	800be90 <_vfiprintf_r+0x34>
 800be8c:	692b      	ldr	r3, [r5, #16]
 800be8e:	b99b      	cbnz	r3, 800beb8 <_vfiprintf_r+0x5c>
 800be90:	4629      	mov	r1, r5
 800be92:	4630      	mov	r0, r6
 800be94:	f000 f9e0 	bl	800c258 <__swsetup_r>
 800be98:	b170      	cbz	r0, 800beb8 <_vfiprintf_r+0x5c>
 800be9a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be9c:	07dc      	lsls	r4, r3, #31
 800be9e:	d504      	bpl.n	800beaa <_vfiprintf_r+0x4e>
 800bea0:	f04f 30ff 	mov.w	r0, #4294967295
 800bea4:	b01d      	add	sp, #116	@ 0x74
 800bea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beaa:	89ab      	ldrh	r3, [r5, #12]
 800beac:	0598      	lsls	r0, r3, #22
 800beae:	d4f7      	bmi.n	800bea0 <_vfiprintf_r+0x44>
 800beb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800beb2:	f7fd fbbd 	bl	8009630 <__retarget_lock_release_recursive>
 800beb6:	e7f3      	b.n	800bea0 <_vfiprintf_r+0x44>
 800beb8:	2300      	movs	r3, #0
 800beba:	9309      	str	r3, [sp, #36]	@ 0x24
 800bebc:	2320      	movs	r3, #32
 800bebe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bec2:	2330      	movs	r3, #48	@ 0x30
 800bec4:	f04f 0901 	mov.w	r9, #1
 800bec8:	f8cd 800c 	str.w	r8, [sp, #12]
 800becc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800c078 <_vfiprintf_r+0x21c>
 800bed0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bed4:	4623      	mov	r3, r4
 800bed6:	469a      	mov	sl, r3
 800bed8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bedc:	b10a      	cbz	r2, 800bee2 <_vfiprintf_r+0x86>
 800bede:	2a25      	cmp	r2, #37	@ 0x25
 800bee0:	d1f9      	bne.n	800bed6 <_vfiprintf_r+0x7a>
 800bee2:	ebba 0b04 	subs.w	fp, sl, r4
 800bee6:	d00b      	beq.n	800bf00 <_vfiprintf_r+0xa4>
 800bee8:	465b      	mov	r3, fp
 800beea:	4622      	mov	r2, r4
 800beec:	4629      	mov	r1, r5
 800beee:	4630      	mov	r0, r6
 800bef0:	f7ff ffa1 	bl	800be36 <__sfputs_r>
 800bef4:	3001      	adds	r0, #1
 800bef6:	f000 80a7 	beq.w	800c048 <_vfiprintf_r+0x1ec>
 800befa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800befc:	445a      	add	r2, fp
 800befe:	9209      	str	r2, [sp, #36]	@ 0x24
 800bf00:	f89a 3000 	ldrb.w	r3, [sl]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	f000 809f 	beq.w	800c048 <_vfiprintf_r+0x1ec>
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	f04f 32ff 	mov.w	r2, #4294967295
 800bf10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf14:	f10a 0a01 	add.w	sl, sl, #1
 800bf18:	9304      	str	r3, [sp, #16]
 800bf1a:	9307      	str	r3, [sp, #28]
 800bf1c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bf20:	931a      	str	r3, [sp, #104]	@ 0x68
 800bf22:	4654      	mov	r4, sl
 800bf24:	2205      	movs	r2, #5
 800bf26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf2a:	4853      	ldr	r0, [pc, #332]	@ (800c078 <_vfiprintf_r+0x21c>)
 800bf2c:	f7fd fb81 	bl	8009632 <memchr>
 800bf30:	9a04      	ldr	r2, [sp, #16]
 800bf32:	b9d8      	cbnz	r0, 800bf6c <_vfiprintf_r+0x110>
 800bf34:	06d1      	lsls	r1, r2, #27
 800bf36:	bf44      	itt	mi
 800bf38:	2320      	movmi	r3, #32
 800bf3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf3e:	0713      	lsls	r3, r2, #28
 800bf40:	bf44      	itt	mi
 800bf42:	232b      	movmi	r3, #43	@ 0x2b
 800bf44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf48:	f89a 3000 	ldrb.w	r3, [sl]
 800bf4c:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf4e:	d015      	beq.n	800bf7c <_vfiprintf_r+0x120>
 800bf50:	4654      	mov	r4, sl
 800bf52:	2000      	movs	r0, #0
 800bf54:	f04f 0c0a 	mov.w	ip, #10
 800bf58:	9a07      	ldr	r2, [sp, #28]
 800bf5a:	4621      	mov	r1, r4
 800bf5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf60:	3b30      	subs	r3, #48	@ 0x30
 800bf62:	2b09      	cmp	r3, #9
 800bf64:	d94b      	bls.n	800bffe <_vfiprintf_r+0x1a2>
 800bf66:	b1b0      	cbz	r0, 800bf96 <_vfiprintf_r+0x13a>
 800bf68:	9207      	str	r2, [sp, #28]
 800bf6a:	e014      	b.n	800bf96 <_vfiprintf_r+0x13a>
 800bf6c:	eba0 0308 	sub.w	r3, r0, r8
 800bf70:	fa09 f303 	lsl.w	r3, r9, r3
 800bf74:	4313      	orrs	r3, r2
 800bf76:	46a2      	mov	sl, r4
 800bf78:	9304      	str	r3, [sp, #16]
 800bf7a:	e7d2      	b.n	800bf22 <_vfiprintf_r+0xc6>
 800bf7c:	9b03      	ldr	r3, [sp, #12]
 800bf7e:	1d19      	adds	r1, r3, #4
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	9103      	str	r1, [sp, #12]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	bfbb      	ittet	lt
 800bf88:	425b      	neglt	r3, r3
 800bf8a:	f042 0202 	orrlt.w	r2, r2, #2
 800bf8e:	9307      	strge	r3, [sp, #28]
 800bf90:	9307      	strlt	r3, [sp, #28]
 800bf92:	bfb8      	it	lt
 800bf94:	9204      	strlt	r2, [sp, #16]
 800bf96:	7823      	ldrb	r3, [r4, #0]
 800bf98:	2b2e      	cmp	r3, #46	@ 0x2e
 800bf9a:	d10a      	bne.n	800bfb2 <_vfiprintf_r+0x156>
 800bf9c:	7863      	ldrb	r3, [r4, #1]
 800bf9e:	2b2a      	cmp	r3, #42	@ 0x2a
 800bfa0:	d132      	bne.n	800c008 <_vfiprintf_r+0x1ac>
 800bfa2:	9b03      	ldr	r3, [sp, #12]
 800bfa4:	3402      	adds	r4, #2
 800bfa6:	1d1a      	adds	r2, r3, #4
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	9203      	str	r2, [sp, #12]
 800bfac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bfb0:	9305      	str	r3, [sp, #20]
 800bfb2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800c07c <_vfiprintf_r+0x220>
 800bfb6:	2203      	movs	r2, #3
 800bfb8:	4650      	mov	r0, sl
 800bfba:	7821      	ldrb	r1, [r4, #0]
 800bfbc:	f7fd fb39 	bl	8009632 <memchr>
 800bfc0:	b138      	cbz	r0, 800bfd2 <_vfiprintf_r+0x176>
 800bfc2:	2240      	movs	r2, #64	@ 0x40
 800bfc4:	9b04      	ldr	r3, [sp, #16]
 800bfc6:	eba0 000a 	sub.w	r0, r0, sl
 800bfca:	4082      	lsls	r2, r0
 800bfcc:	4313      	orrs	r3, r2
 800bfce:	3401      	adds	r4, #1
 800bfd0:	9304      	str	r3, [sp, #16]
 800bfd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfd6:	2206      	movs	r2, #6
 800bfd8:	4829      	ldr	r0, [pc, #164]	@ (800c080 <_vfiprintf_r+0x224>)
 800bfda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bfde:	f7fd fb28 	bl	8009632 <memchr>
 800bfe2:	2800      	cmp	r0, #0
 800bfe4:	d03f      	beq.n	800c066 <_vfiprintf_r+0x20a>
 800bfe6:	4b27      	ldr	r3, [pc, #156]	@ (800c084 <_vfiprintf_r+0x228>)
 800bfe8:	bb1b      	cbnz	r3, 800c032 <_vfiprintf_r+0x1d6>
 800bfea:	9b03      	ldr	r3, [sp, #12]
 800bfec:	3307      	adds	r3, #7
 800bfee:	f023 0307 	bic.w	r3, r3, #7
 800bff2:	3308      	adds	r3, #8
 800bff4:	9303      	str	r3, [sp, #12]
 800bff6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bff8:	443b      	add	r3, r7
 800bffa:	9309      	str	r3, [sp, #36]	@ 0x24
 800bffc:	e76a      	b.n	800bed4 <_vfiprintf_r+0x78>
 800bffe:	460c      	mov	r4, r1
 800c000:	2001      	movs	r0, #1
 800c002:	fb0c 3202 	mla	r2, ip, r2, r3
 800c006:	e7a8      	b.n	800bf5a <_vfiprintf_r+0xfe>
 800c008:	2300      	movs	r3, #0
 800c00a:	f04f 0c0a 	mov.w	ip, #10
 800c00e:	4619      	mov	r1, r3
 800c010:	3401      	adds	r4, #1
 800c012:	9305      	str	r3, [sp, #20]
 800c014:	4620      	mov	r0, r4
 800c016:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c01a:	3a30      	subs	r2, #48	@ 0x30
 800c01c:	2a09      	cmp	r2, #9
 800c01e:	d903      	bls.n	800c028 <_vfiprintf_r+0x1cc>
 800c020:	2b00      	cmp	r3, #0
 800c022:	d0c6      	beq.n	800bfb2 <_vfiprintf_r+0x156>
 800c024:	9105      	str	r1, [sp, #20]
 800c026:	e7c4      	b.n	800bfb2 <_vfiprintf_r+0x156>
 800c028:	4604      	mov	r4, r0
 800c02a:	2301      	movs	r3, #1
 800c02c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c030:	e7f0      	b.n	800c014 <_vfiprintf_r+0x1b8>
 800c032:	ab03      	add	r3, sp, #12
 800c034:	9300      	str	r3, [sp, #0]
 800c036:	462a      	mov	r2, r5
 800c038:	4630      	mov	r0, r6
 800c03a:	4b13      	ldr	r3, [pc, #76]	@ (800c088 <_vfiprintf_r+0x22c>)
 800c03c:	a904      	add	r1, sp, #16
 800c03e:	f7fc fb73 	bl	8008728 <_printf_float>
 800c042:	4607      	mov	r7, r0
 800c044:	1c78      	adds	r0, r7, #1
 800c046:	d1d6      	bne.n	800bff6 <_vfiprintf_r+0x19a>
 800c048:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c04a:	07d9      	lsls	r1, r3, #31
 800c04c:	d405      	bmi.n	800c05a <_vfiprintf_r+0x1fe>
 800c04e:	89ab      	ldrh	r3, [r5, #12]
 800c050:	059a      	lsls	r2, r3, #22
 800c052:	d402      	bmi.n	800c05a <_vfiprintf_r+0x1fe>
 800c054:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c056:	f7fd faeb 	bl	8009630 <__retarget_lock_release_recursive>
 800c05a:	89ab      	ldrh	r3, [r5, #12]
 800c05c:	065b      	lsls	r3, r3, #25
 800c05e:	f53f af1f 	bmi.w	800bea0 <_vfiprintf_r+0x44>
 800c062:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c064:	e71e      	b.n	800bea4 <_vfiprintf_r+0x48>
 800c066:	ab03      	add	r3, sp, #12
 800c068:	9300      	str	r3, [sp, #0]
 800c06a:	462a      	mov	r2, r5
 800c06c:	4630      	mov	r0, r6
 800c06e:	4b06      	ldr	r3, [pc, #24]	@ (800c088 <_vfiprintf_r+0x22c>)
 800c070:	a904      	add	r1, sp, #16
 800c072:	f7fc fdf7 	bl	8008c64 <_printf_i>
 800c076:	e7e4      	b.n	800c042 <_vfiprintf_r+0x1e6>
 800c078:	0800d0a9 	.word	0x0800d0a9
 800c07c:	0800d0af 	.word	0x0800d0af
 800c080:	0800d0b3 	.word	0x0800d0b3
 800c084:	08008729 	.word	0x08008729
 800c088:	0800be37 	.word	0x0800be37

0800c08c <__sflush_r>:
 800c08c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c092:	0716      	lsls	r6, r2, #28
 800c094:	4605      	mov	r5, r0
 800c096:	460c      	mov	r4, r1
 800c098:	d454      	bmi.n	800c144 <__sflush_r+0xb8>
 800c09a:	684b      	ldr	r3, [r1, #4]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	dc02      	bgt.n	800c0a6 <__sflush_r+0x1a>
 800c0a0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	dd48      	ble.n	800c138 <__sflush_r+0xac>
 800c0a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c0a8:	2e00      	cmp	r6, #0
 800c0aa:	d045      	beq.n	800c138 <__sflush_r+0xac>
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c0b2:	682f      	ldr	r7, [r5, #0]
 800c0b4:	6a21      	ldr	r1, [r4, #32]
 800c0b6:	602b      	str	r3, [r5, #0]
 800c0b8:	d030      	beq.n	800c11c <__sflush_r+0x90>
 800c0ba:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c0bc:	89a3      	ldrh	r3, [r4, #12]
 800c0be:	0759      	lsls	r1, r3, #29
 800c0c0:	d505      	bpl.n	800c0ce <__sflush_r+0x42>
 800c0c2:	6863      	ldr	r3, [r4, #4]
 800c0c4:	1ad2      	subs	r2, r2, r3
 800c0c6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c0c8:	b10b      	cbz	r3, 800c0ce <__sflush_r+0x42>
 800c0ca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c0cc:	1ad2      	subs	r2, r2, r3
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	4628      	mov	r0, r5
 800c0d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c0d4:	6a21      	ldr	r1, [r4, #32]
 800c0d6:	47b0      	blx	r6
 800c0d8:	1c43      	adds	r3, r0, #1
 800c0da:	89a3      	ldrh	r3, [r4, #12]
 800c0dc:	d106      	bne.n	800c0ec <__sflush_r+0x60>
 800c0de:	6829      	ldr	r1, [r5, #0]
 800c0e0:	291d      	cmp	r1, #29
 800c0e2:	d82b      	bhi.n	800c13c <__sflush_r+0xb0>
 800c0e4:	4a28      	ldr	r2, [pc, #160]	@ (800c188 <__sflush_r+0xfc>)
 800c0e6:	410a      	asrs	r2, r1
 800c0e8:	07d6      	lsls	r6, r2, #31
 800c0ea:	d427      	bmi.n	800c13c <__sflush_r+0xb0>
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	6062      	str	r2, [r4, #4]
 800c0f0:	6922      	ldr	r2, [r4, #16]
 800c0f2:	04d9      	lsls	r1, r3, #19
 800c0f4:	6022      	str	r2, [r4, #0]
 800c0f6:	d504      	bpl.n	800c102 <__sflush_r+0x76>
 800c0f8:	1c42      	adds	r2, r0, #1
 800c0fa:	d101      	bne.n	800c100 <__sflush_r+0x74>
 800c0fc:	682b      	ldr	r3, [r5, #0]
 800c0fe:	b903      	cbnz	r3, 800c102 <__sflush_r+0x76>
 800c100:	6560      	str	r0, [r4, #84]	@ 0x54
 800c102:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c104:	602f      	str	r7, [r5, #0]
 800c106:	b1b9      	cbz	r1, 800c138 <__sflush_r+0xac>
 800c108:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c10c:	4299      	cmp	r1, r3
 800c10e:	d002      	beq.n	800c116 <__sflush_r+0x8a>
 800c110:	4628      	mov	r0, r5
 800c112:	f7fe f901 	bl	800a318 <_free_r>
 800c116:	2300      	movs	r3, #0
 800c118:	6363      	str	r3, [r4, #52]	@ 0x34
 800c11a:	e00d      	b.n	800c138 <__sflush_r+0xac>
 800c11c:	2301      	movs	r3, #1
 800c11e:	4628      	mov	r0, r5
 800c120:	47b0      	blx	r6
 800c122:	4602      	mov	r2, r0
 800c124:	1c50      	adds	r0, r2, #1
 800c126:	d1c9      	bne.n	800c0bc <__sflush_r+0x30>
 800c128:	682b      	ldr	r3, [r5, #0]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d0c6      	beq.n	800c0bc <__sflush_r+0x30>
 800c12e:	2b1d      	cmp	r3, #29
 800c130:	d001      	beq.n	800c136 <__sflush_r+0xaa>
 800c132:	2b16      	cmp	r3, #22
 800c134:	d11d      	bne.n	800c172 <__sflush_r+0xe6>
 800c136:	602f      	str	r7, [r5, #0]
 800c138:	2000      	movs	r0, #0
 800c13a:	e021      	b.n	800c180 <__sflush_r+0xf4>
 800c13c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c140:	b21b      	sxth	r3, r3
 800c142:	e01a      	b.n	800c17a <__sflush_r+0xee>
 800c144:	690f      	ldr	r7, [r1, #16]
 800c146:	2f00      	cmp	r7, #0
 800c148:	d0f6      	beq.n	800c138 <__sflush_r+0xac>
 800c14a:	0793      	lsls	r3, r2, #30
 800c14c:	bf18      	it	ne
 800c14e:	2300      	movne	r3, #0
 800c150:	680e      	ldr	r6, [r1, #0]
 800c152:	bf08      	it	eq
 800c154:	694b      	ldreq	r3, [r1, #20]
 800c156:	1bf6      	subs	r6, r6, r7
 800c158:	600f      	str	r7, [r1, #0]
 800c15a:	608b      	str	r3, [r1, #8]
 800c15c:	2e00      	cmp	r6, #0
 800c15e:	ddeb      	ble.n	800c138 <__sflush_r+0xac>
 800c160:	4633      	mov	r3, r6
 800c162:	463a      	mov	r2, r7
 800c164:	4628      	mov	r0, r5
 800c166:	6a21      	ldr	r1, [r4, #32]
 800c168:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800c16c:	47e0      	blx	ip
 800c16e:	2800      	cmp	r0, #0
 800c170:	dc07      	bgt.n	800c182 <__sflush_r+0xf6>
 800c172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c176:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c17a:	f04f 30ff 	mov.w	r0, #4294967295
 800c17e:	81a3      	strh	r3, [r4, #12]
 800c180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c182:	4407      	add	r7, r0
 800c184:	1a36      	subs	r6, r6, r0
 800c186:	e7e9      	b.n	800c15c <__sflush_r+0xd0>
 800c188:	dfbffffe 	.word	0xdfbffffe

0800c18c <_fflush_r>:
 800c18c:	b538      	push	{r3, r4, r5, lr}
 800c18e:	690b      	ldr	r3, [r1, #16]
 800c190:	4605      	mov	r5, r0
 800c192:	460c      	mov	r4, r1
 800c194:	b913      	cbnz	r3, 800c19c <_fflush_r+0x10>
 800c196:	2500      	movs	r5, #0
 800c198:	4628      	mov	r0, r5
 800c19a:	bd38      	pop	{r3, r4, r5, pc}
 800c19c:	b118      	cbz	r0, 800c1a6 <_fflush_r+0x1a>
 800c19e:	6a03      	ldr	r3, [r0, #32]
 800c1a0:	b90b      	cbnz	r3, 800c1a6 <_fflush_r+0x1a>
 800c1a2:	f7fd f91b 	bl	80093dc <__sinit>
 800c1a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d0f3      	beq.n	800c196 <_fflush_r+0xa>
 800c1ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c1b0:	07d0      	lsls	r0, r2, #31
 800c1b2:	d404      	bmi.n	800c1be <_fflush_r+0x32>
 800c1b4:	0599      	lsls	r1, r3, #22
 800c1b6:	d402      	bmi.n	800c1be <_fflush_r+0x32>
 800c1b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c1ba:	f7fd fa38 	bl	800962e <__retarget_lock_acquire_recursive>
 800c1be:	4628      	mov	r0, r5
 800c1c0:	4621      	mov	r1, r4
 800c1c2:	f7ff ff63 	bl	800c08c <__sflush_r>
 800c1c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c1c8:	4605      	mov	r5, r0
 800c1ca:	07da      	lsls	r2, r3, #31
 800c1cc:	d4e4      	bmi.n	800c198 <_fflush_r+0xc>
 800c1ce:	89a3      	ldrh	r3, [r4, #12]
 800c1d0:	059b      	lsls	r3, r3, #22
 800c1d2:	d4e1      	bmi.n	800c198 <_fflush_r+0xc>
 800c1d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c1d6:	f7fd fa2b 	bl	8009630 <__retarget_lock_release_recursive>
 800c1da:	e7dd      	b.n	800c198 <_fflush_r+0xc>

0800c1dc <__swbuf_r>:
 800c1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1de:	460e      	mov	r6, r1
 800c1e0:	4614      	mov	r4, r2
 800c1e2:	4605      	mov	r5, r0
 800c1e4:	b118      	cbz	r0, 800c1ee <__swbuf_r+0x12>
 800c1e6:	6a03      	ldr	r3, [r0, #32]
 800c1e8:	b90b      	cbnz	r3, 800c1ee <__swbuf_r+0x12>
 800c1ea:	f7fd f8f7 	bl	80093dc <__sinit>
 800c1ee:	69a3      	ldr	r3, [r4, #24]
 800c1f0:	60a3      	str	r3, [r4, #8]
 800c1f2:	89a3      	ldrh	r3, [r4, #12]
 800c1f4:	071a      	lsls	r2, r3, #28
 800c1f6:	d501      	bpl.n	800c1fc <__swbuf_r+0x20>
 800c1f8:	6923      	ldr	r3, [r4, #16]
 800c1fa:	b943      	cbnz	r3, 800c20e <__swbuf_r+0x32>
 800c1fc:	4621      	mov	r1, r4
 800c1fe:	4628      	mov	r0, r5
 800c200:	f000 f82a 	bl	800c258 <__swsetup_r>
 800c204:	b118      	cbz	r0, 800c20e <__swbuf_r+0x32>
 800c206:	f04f 37ff 	mov.w	r7, #4294967295
 800c20a:	4638      	mov	r0, r7
 800c20c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c20e:	6823      	ldr	r3, [r4, #0]
 800c210:	6922      	ldr	r2, [r4, #16]
 800c212:	b2f6      	uxtb	r6, r6
 800c214:	1a98      	subs	r0, r3, r2
 800c216:	6963      	ldr	r3, [r4, #20]
 800c218:	4637      	mov	r7, r6
 800c21a:	4283      	cmp	r3, r0
 800c21c:	dc05      	bgt.n	800c22a <__swbuf_r+0x4e>
 800c21e:	4621      	mov	r1, r4
 800c220:	4628      	mov	r0, r5
 800c222:	f7ff ffb3 	bl	800c18c <_fflush_r>
 800c226:	2800      	cmp	r0, #0
 800c228:	d1ed      	bne.n	800c206 <__swbuf_r+0x2a>
 800c22a:	68a3      	ldr	r3, [r4, #8]
 800c22c:	3b01      	subs	r3, #1
 800c22e:	60a3      	str	r3, [r4, #8]
 800c230:	6823      	ldr	r3, [r4, #0]
 800c232:	1c5a      	adds	r2, r3, #1
 800c234:	6022      	str	r2, [r4, #0]
 800c236:	701e      	strb	r6, [r3, #0]
 800c238:	6962      	ldr	r2, [r4, #20]
 800c23a:	1c43      	adds	r3, r0, #1
 800c23c:	429a      	cmp	r2, r3
 800c23e:	d004      	beq.n	800c24a <__swbuf_r+0x6e>
 800c240:	89a3      	ldrh	r3, [r4, #12]
 800c242:	07db      	lsls	r3, r3, #31
 800c244:	d5e1      	bpl.n	800c20a <__swbuf_r+0x2e>
 800c246:	2e0a      	cmp	r6, #10
 800c248:	d1df      	bne.n	800c20a <__swbuf_r+0x2e>
 800c24a:	4621      	mov	r1, r4
 800c24c:	4628      	mov	r0, r5
 800c24e:	f7ff ff9d 	bl	800c18c <_fflush_r>
 800c252:	2800      	cmp	r0, #0
 800c254:	d0d9      	beq.n	800c20a <__swbuf_r+0x2e>
 800c256:	e7d6      	b.n	800c206 <__swbuf_r+0x2a>

0800c258 <__swsetup_r>:
 800c258:	b538      	push	{r3, r4, r5, lr}
 800c25a:	4b29      	ldr	r3, [pc, #164]	@ (800c300 <__swsetup_r+0xa8>)
 800c25c:	4605      	mov	r5, r0
 800c25e:	6818      	ldr	r0, [r3, #0]
 800c260:	460c      	mov	r4, r1
 800c262:	b118      	cbz	r0, 800c26c <__swsetup_r+0x14>
 800c264:	6a03      	ldr	r3, [r0, #32]
 800c266:	b90b      	cbnz	r3, 800c26c <__swsetup_r+0x14>
 800c268:	f7fd f8b8 	bl	80093dc <__sinit>
 800c26c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c270:	0719      	lsls	r1, r3, #28
 800c272:	d422      	bmi.n	800c2ba <__swsetup_r+0x62>
 800c274:	06da      	lsls	r2, r3, #27
 800c276:	d407      	bmi.n	800c288 <__swsetup_r+0x30>
 800c278:	2209      	movs	r2, #9
 800c27a:	602a      	str	r2, [r5, #0]
 800c27c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c280:	f04f 30ff 	mov.w	r0, #4294967295
 800c284:	81a3      	strh	r3, [r4, #12]
 800c286:	e033      	b.n	800c2f0 <__swsetup_r+0x98>
 800c288:	0758      	lsls	r0, r3, #29
 800c28a:	d512      	bpl.n	800c2b2 <__swsetup_r+0x5a>
 800c28c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c28e:	b141      	cbz	r1, 800c2a2 <__swsetup_r+0x4a>
 800c290:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c294:	4299      	cmp	r1, r3
 800c296:	d002      	beq.n	800c29e <__swsetup_r+0x46>
 800c298:	4628      	mov	r0, r5
 800c29a:	f7fe f83d 	bl	800a318 <_free_r>
 800c29e:	2300      	movs	r3, #0
 800c2a0:	6363      	str	r3, [r4, #52]	@ 0x34
 800c2a2:	89a3      	ldrh	r3, [r4, #12]
 800c2a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c2a8:	81a3      	strh	r3, [r4, #12]
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	6063      	str	r3, [r4, #4]
 800c2ae:	6923      	ldr	r3, [r4, #16]
 800c2b0:	6023      	str	r3, [r4, #0]
 800c2b2:	89a3      	ldrh	r3, [r4, #12]
 800c2b4:	f043 0308 	orr.w	r3, r3, #8
 800c2b8:	81a3      	strh	r3, [r4, #12]
 800c2ba:	6923      	ldr	r3, [r4, #16]
 800c2bc:	b94b      	cbnz	r3, 800c2d2 <__swsetup_r+0x7a>
 800c2be:	89a3      	ldrh	r3, [r4, #12]
 800c2c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c2c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c2c8:	d003      	beq.n	800c2d2 <__swsetup_r+0x7a>
 800c2ca:	4621      	mov	r1, r4
 800c2cc:	4628      	mov	r0, r5
 800c2ce:	f000 fc4a 	bl	800cb66 <__smakebuf_r>
 800c2d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2d6:	f013 0201 	ands.w	r2, r3, #1
 800c2da:	d00a      	beq.n	800c2f2 <__swsetup_r+0x9a>
 800c2dc:	2200      	movs	r2, #0
 800c2de:	60a2      	str	r2, [r4, #8]
 800c2e0:	6962      	ldr	r2, [r4, #20]
 800c2e2:	4252      	negs	r2, r2
 800c2e4:	61a2      	str	r2, [r4, #24]
 800c2e6:	6922      	ldr	r2, [r4, #16]
 800c2e8:	b942      	cbnz	r2, 800c2fc <__swsetup_r+0xa4>
 800c2ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c2ee:	d1c5      	bne.n	800c27c <__swsetup_r+0x24>
 800c2f0:	bd38      	pop	{r3, r4, r5, pc}
 800c2f2:	0799      	lsls	r1, r3, #30
 800c2f4:	bf58      	it	pl
 800c2f6:	6962      	ldrpl	r2, [r4, #20]
 800c2f8:	60a2      	str	r2, [r4, #8]
 800c2fa:	e7f4      	b.n	800c2e6 <__swsetup_r+0x8e>
 800c2fc:	2000      	movs	r0, #0
 800c2fe:	e7f7      	b.n	800c2f0 <__swsetup_r+0x98>
 800c300:	2000007c 	.word	0x2000007c

0800c304 <memmove>:
 800c304:	4288      	cmp	r0, r1
 800c306:	b510      	push	{r4, lr}
 800c308:	eb01 0402 	add.w	r4, r1, r2
 800c30c:	d902      	bls.n	800c314 <memmove+0x10>
 800c30e:	4284      	cmp	r4, r0
 800c310:	4623      	mov	r3, r4
 800c312:	d807      	bhi.n	800c324 <memmove+0x20>
 800c314:	1e43      	subs	r3, r0, #1
 800c316:	42a1      	cmp	r1, r4
 800c318:	d008      	beq.n	800c32c <memmove+0x28>
 800c31a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c31e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c322:	e7f8      	b.n	800c316 <memmove+0x12>
 800c324:	4601      	mov	r1, r0
 800c326:	4402      	add	r2, r0
 800c328:	428a      	cmp	r2, r1
 800c32a:	d100      	bne.n	800c32e <memmove+0x2a>
 800c32c:	bd10      	pop	{r4, pc}
 800c32e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c332:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c336:	e7f7      	b.n	800c328 <memmove+0x24>

0800c338 <strncmp>:
 800c338:	b510      	push	{r4, lr}
 800c33a:	b16a      	cbz	r2, 800c358 <strncmp+0x20>
 800c33c:	3901      	subs	r1, #1
 800c33e:	1884      	adds	r4, r0, r2
 800c340:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c344:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c348:	429a      	cmp	r2, r3
 800c34a:	d103      	bne.n	800c354 <strncmp+0x1c>
 800c34c:	42a0      	cmp	r0, r4
 800c34e:	d001      	beq.n	800c354 <strncmp+0x1c>
 800c350:	2a00      	cmp	r2, #0
 800c352:	d1f5      	bne.n	800c340 <strncmp+0x8>
 800c354:	1ad0      	subs	r0, r2, r3
 800c356:	bd10      	pop	{r4, pc}
 800c358:	4610      	mov	r0, r2
 800c35a:	e7fc      	b.n	800c356 <strncmp+0x1e>

0800c35c <_sbrk_r>:
 800c35c:	b538      	push	{r3, r4, r5, lr}
 800c35e:	2300      	movs	r3, #0
 800c360:	4d05      	ldr	r5, [pc, #20]	@ (800c378 <_sbrk_r+0x1c>)
 800c362:	4604      	mov	r4, r0
 800c364:	4608      	mov	r0, r1
 800c366:	602b      	str	r3, [r5, #0]
 800c368:	f7f7 f9d4 	bl	8003714 <_sbrk>
 800c36c:	1c43      	adds	r3, r0, #1
 800c36e:	d102      	bne.n	800c376 <_sbrk_r+0x1a>
 800c370:	682b      	ldr	r3, [r5, #0]
 800c372:	b103      	cbz	r3, 800c376 <_sbrk_r+0x1a>
 800c374:	6023      	str	r3, [r4, #0]
 800c376:	bd38      	pop	{r3, r4, r5, pc}
 800c378:	20000d34 	.word	0x20000d34

0800c37c <nan>:
 800c37c:	2000      	movs	r0, #0
 800c37e:	4901      	ldr	r1, [pc, #4]	@ (800c384 <nan+0x8>)
 800c380:	4770      	bx	lr
 800c382:	bf00      	nop
 800c384:	7ff80000 	.word	0x7ff80000

0800c388 <__assert_func>:
 800c388:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c38a:	4614      	mov	r4, r2
 800c38c:	461a      	mov	r2, r3
 800c38e:	4b09      	ldr	r3, [pc, #36]	@ (800c3b4 <__assert_func+0x2c>)
 800c390:	4605      	mov	r5, r0
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	68d8      	ldr	r0, [r3, #12]
 800c396:	b954      	cbnz	r4, 800c3ae <__assert_func+0x26>
 800c398:	4b07      	ldr	r3, [pc, #28]	@ (800c3b8 <__assert_func+0x30>)
 800c39a:	461c      	mov	r4, r3
 800c39c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c3a0:	9100      	str	r1, [sp, #0]
 800c3a2:	462b      	mov	r3, r5
 800c3a4:	4905      	ldr	r1, [pc, #20]	@ (800c3bc <__assert_func+0x34>)
 800c3a6:	f000 fba7 	bl	800caf8 <fiprintf>
 800c3aa:	f000 fc3b 	bl	800cc24 <abort>
 800c3ae:	4b04      	ldr	r3, [pc, #16]	@ (800c3c0 <__assert_func+0x38>)
 800c3b0:	e7f4      	b.n	800c39c <__assert_func+0x14>
 800c3b2:	bf00      	nop
 800c3b4:	2000007c 	.word	0x2000007c
 800c3b8:	0800d0fd 	.word	0x0800d0fd
 800c3bc:	0800d0cf 	.word	0x0800d0cf
 800c3c0:	0800d0c2 	.word	0x0800d0c2

0800c3c4 <_calloc_r>:
 800c3c4:	b570      	push	{r4, r5, r6, lr}
 800c3c6:	fba1 5402 	umull	r5, r4, r1, r2
 800c3ca:	b93c      	cbnz	r4, 800c3dc <_calloc_r+0x18>
 800c3cc:	4629      	mov	r1, r5
 800c3ce:	f7fe f815 	bl	800a3fc <_malloc_r>
 800c3d2:	4606      	mov	r6, r0
 800c3d4:	b928      	cbnz	r0, 800c3e2 <_calloc_r+0x1e>
 800c3d6:	2600      	movs	r6, #0
 800c3d8:	4630      	mov	r0, r6
 800c3da:	bd70      	pop	{r4, r5, r6, pc}
 800c3dc:	220c      	movs	r2, #12
 800c3de:	6002      	str	r2, [r0, #0]
 800c3e0:	e7f9      	b.n	800c3d6 <_calloc_r+0x12>
 800c3e2:	462a      	mov	r2, r5
 800c3e4:	4621      	mov	r1, r4
 800c3e6:	f7fd f8a4 	bl	8009532 <memset>
 800c3ea:	e7f5      	b.n	800c3d8 <_calloc_r+0x14>

0800c3ec <rshift>:
 800c3ec:	6903      	ldr	r3, [r0, #16]
 800c3ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c3f2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c3f6:	f100 0414 	add.w	r4, r0, #20
 800c3fa:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c3fe:	dd46      	ble.n	800c48e <rshift+0xa2>
 800c400:	f011 011f 	ands.w	r1, r1, #31
 800c404:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c408:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c40c:	d10c      	bne.n	800c428 <rshift+0x3c>
 800c40e:	4629      	mov	r1, r5
 800c410:	f100 0710 	add.w	r7, r0, #16
 800c414:	42b1      	cmp	r1, r6
 800c416:	d335      	bcc.n	800c484 <rshift+0x98>
 800c418:	1a9b      	subs	r3, r3, r2
 800c41a:	009b      	lsls	r3, r3, #2
 800c41c:	1eea      	subs	r2, r5, #3
 800c41e:	4296      	cmp	r6, r2
 800c420:	bf38      	it	cc
 800c422:	2300      	movcc	r3, #0
 800c424:	4423      	add	r3, r4
 800c426:	e015      	b.n	800c454 <rshift+0x68>
 800c428:	46a1      	mov	r9, r4
 800c42a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c42e:	f1c1 0820 	rsb	r8, r1, #32
 800c432:	40cf      	lsrs	r7, r1
 800c434:	f105 0e04 	add.w	lr, r5, #4
 800c438:	4576      	cmp	r6, lr
 800c43a:	46f4      	mov	ip, lr
 800c43c:	d816      	bhi.n	800c46c <rshift+0x80>
 800c43e:	1a9a      	subs	r2, r3, r2
 800c440:	0092      	lsls	r2, r2, #2
 800c442:	3a04      	subs	r2, #4
 800c444:	3501      	adds	r5, #1
 800c446:	42ae      	cmp	r6, r5
 800c448:	bf38      	it	cc
 800c44a:	2200      	movcc	r2, #0
 800c44c:	18a3      	adds	r3, r4, r2
 800c44e:	50a7      	str	r7, [r4, r2]
 800c450:	b107      	cbz	r7, 800c454 <rshift+0x68>
 800c452:	3304      	adds	r3, #4
 800c454:	42a3      	cmp	r3, r4
 800c456:	eba3 0204 	sub.w	r2, r3, r4
 800c45a:	bf08      	it	eq
 800c45c:	2300      	moveq	r3, #0
 800c45e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c462:	6102      	str	r2, [r0, #16]
 800c464:	bf08      	it	eq
 800c466:	6143      	streq	r3, [r0, #20]
 800c468:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c46c:	f8dc c000 	ldr.w	ip, [ip]
 800c470:	fa0c fc08 	lsl.w	ip, ip, r8
 800c474:	ea4c 0707 	orr.w	r7, ip, r7
 800c478:	f849 7b04 	str.w	r7, [r9], #4
 800c47c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c480:	40cf      	lsrs	r7, r1
 800c482:	e7d9      	b.n	800c438 <rshift+0x4c>
 800c484:	f851 cb04 	ldr.w	ip, [r1], #4
 800c488:	f847 cf04 	str.w	ip, [r7, #4]!
 800c48c:	e7c2      	b.n	800c414 <rshift+0x28>
 800c48e:	4623      	mov	r3, r4
 800c490:	e7e0      	b.n	800c454 <rshift+0x68>

0800c492 <__hexdig_fun>:
 800c492:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c496:	2b09      	cmp	r3, #9
 800c498:	d802      	bhi.n	800c4a0 <__hexdig_fun+0xe>
 800c49a:	3820      	subs	r0, #32
 800c49c:	b2c0      	uxtb	r0, r0
 800c49e:	4770      	bx	lr
 800c4a0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c4a4:	2b05      	cmp	r3, #5
 800c4a6:	d801      	bhi.n	800c4ac <__hexdig_fun+0x1a>
 800c4a8:	3847      	subs	r0, #71	@ 0x47
 800c4aa:	e7f7      	b.n	800c49c <__hexdig_fun+0xa>
 800c4ac:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c4b0:	2b05      	cmp	r3, #5
 800c4b2:	d801      	bhi.n	800c4b8 <__hexdig_fun+0x26>
 800c4b4:	3827      	subs	r0, #39	@ 0x27
 800c4b6:	e7f1      	b.n	800c49c <__hexdig_fun+0xa>
 800c4b8:	2000      	movs	r0, #0
 800c4ba:	4770      	bx	lr

0800c4bc <__gethex>:
 800c4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4c0:	468a      	mov	sl, r1
 800c4c2:	4690      	mov	r8, r2
 800c4c4:	b085      	sub	sp, #20
 800c4c6:	9302      	str	r3, [sp, #8]
 800c4c8:	680b      	ldr	r3, [r1, #0]
 800c4ca:	9001      	str	r0, [sp, #4]
 800c4cc:	1c9c      	adds	r4, r3, #2
 800c4ce:	46a1      	mov	r9, r4
 800c4d0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c4d4:	2830      	cmp	r0, #48	@ 0x30
 800c4d6:	d0fa      	beq.n	800c4ce <__gethex+0x12>
 800c4d8:	eba9 0303 	sub.w	r3, r9, r3
 800c4dc:	f1a3 0b02 	sub.w	fp, r3, #2
 800c4e0:	f7ff ffd7 	bl	800c492 <__hexdig_fun>
 800c4e4:	4605      	mov	r5, r0
 800c4e6:	2800      	cmp	r0, #0
 800c4e8:	d168      	bne.n	800c5bc <__gethex+0x100>
 800c4ea:	2201      	movs	r2, #1
 800c4ec:	4648      	mov	r0, r9
 800c4ee:	499f      	ldr	r1, [pc, #636]	@ (800c76c <__gethex+0x2b0>)
 800c4f0:	f7ff ff22 	bl	800c338 <strncmp>
 800c4f4:	4607      	mov	r7, r0
 800c4f6:	2800      	cmp	r0, #0
 800c4f8:	d167      	bne.n	800c5ca <__gethex+0x10e>
 800c4fa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c4fe:	4626      	mov	r6, r4
 800c500:	f7ff ffc7 	bl	800c492 <__hexdig_fun>
 800c504:	2800      	cmp	r0, #0
 800c506:	d062      	beq.n	800c5ce <__gethex+0x112>
 800c508:	4623      	mov	r3, r4
 800c50a:	7818      	ldrb	r0, [r3, #0]
 800c50c:	4699      	mov	r9, r3
 800c50e:	2830      	cmp	r0, #48	@ 0x30
 800c510:	f103 0301 	add.w	r3, r3, #1
 800c514:	d0f9      	beq.n	800c50a <__gethex+0x4e>
 800c516:	f7ff ffbc 	bl	800c492 <__hexdig_fun>
 800c51a:	fab0 f580 	clz	r5, r0
 800c51e:	f04f 0b01 	mov.w	fp, #1
 800c522:	096d      	lsrs	r5, r5, #5
 800c524:	464a      	mov	r2, r9
 800c526:	4616      	mov	r6, r2
 800c528:	7830      	ldrb	r0, [r6, #0]
 800c52a:	3201      	adds	r2, #1
 800c52c:	f7ff ffb1 	bl	800c492 <__hexdig_fun>
 800c530:	2800      	cmp	r0, #0
 800c532:	d1f8      	bne.n	800c526 <__gethex+0x6a>
 800c534:	2201      	movs	r2, #1
 800c536:	4630      	mov	r0, r6
 800c538:	498c      	ldr	r1, [pc, #560]	@ (800c76c <__gethex+0x2b0>)
 800c53a:	f7ff fefd 	bl	800c338 <strncmp>
 800c53e:	2800      	cmp	r0, #0
 800c540:	d13f      	bne.n	800c5c2 <__gethex+0x106>
 800c542:	b944      	cbnz	r4, 800c556 <__gethex+0x9a>
 800c544:	1c74      	adds	r4, r6, #1
 800c546:	4622      	mov	r2, r4
 800c548:	4616      	mov	r6, r2
 800c54a:	7830      	ldrb	r0, [r6, #0]
 800c54c:	3201      	adds	r2, #1
 800c54e:	f7ff ffa0 	bl	800c492 <__hexdig_fun>
 800c552:	2800      	cmp	r0, #0
 800c554:	d1f8      	bne.n	800c548 <__gethex+0x8c>
 800c556:	1ba4      	subs	r4, r4, r6
 800c558:	00a7      	lsls	r7, r4, #2
 800c55a:	7833      	ldrb	r3, [r6, #0]
 800c55c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c560:	2b50      	cmp	r3, #80	@ 0x50
 800c562:	d13e      	bne.n	800c5e2 <__gethex+0x126>
 800c564:	7873      	ldrb	r3, [r6, #1]
 800c566:	2b2b      	cmp	r3, #43	@ 0x2b
 800c568:	d033      	beq.n	800c5d2 <__gethex+0x116>
 800c56a:	2b2d      	cmp	r3, #45	@ 0x2d
 800c56c:	d034      	beq.n	800c5d8 <__gethex+0x11c>
 800c56e:	2400      	movs	r4, #0
 800c570:	1c71      	adds	r1, r6, #1
 800c572:	7808      	ldrb	r0, [r1, #0]
 800c574:	f7ff ff8d 	bl	800c492 <__hexdig_fun>
 800c578:	1e43      	subs	r3, r0, #1
 800c57a:	b2db      	uxtb	r3, r3
 800c57c:	2b18      	cmp	r3, #24
 800c57e:	d830      	bhi.n	800c5e2 <__gethex+0x126>
 800c580:	f1a0 0210 	sub.w	r2, r0, #16
 800c584:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c588:	f7ff ff83 	bl	800c492 <__hexdig_fun>
 800c58c:	f100 3cff 	add.w	ip, r0, #4294967295
 800c590:	fa5f fc8c 	uxtb.w	ip, ip
 800c594:	f1bc 0f18 	cmp.w	ip, #24
 800c598:	f04f 030a 	mov.w	r3, #10
 800c59c:	d91e      	bls.n	800c5dc <__gethex+0x120>
 800c59e:	b104      	cbz	r4, 800c5a2 <__gethex+0xe6>
 800c5a0:	4252      	negs	r2, r2
 800c5a2:	4417      	add	r7, r2
 800c5a4:	f8ca 1000 	str.w	r1, [sl]
 800c5a8:	b1ed      	cbz	r5, 800c5e6 <__gethex+0x12a>
 800c5aa:	f1bb 0f00 	cmp.w	fp, #0
 800c5ae:	bf0c      	ite	eq
 800c5b0:	2506      	moveq	r5, #6
 800c5b2:	2500      	movne	r5, #0
 800c5b4:	4628      	mov	r0, r5
 800c5b6:	b005      	add	sp, #20
 800c5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5bc:	2500      	movs	r5, #0
 800c5be:	462c      	mov	r4, r5
 800c5c0:	e7b0      	b.n	800c524 <__gethex+0x68>
 800c5c2:	2c00      	cmp	r4, #0
 800c5c4:	d1c7      	bne.n	800c556 <__gethex+0x9a>
 800c5c6:	4627      	mov	r7, r4
 800c5c8:	e7c7      	b.n	800c55a <__gethex+0x9e>
 800c5ca:	464e      	mov	r6, r9
 800c5cc:	462f      	mov	r7, r5
 800c5ce:	2501      	movs	r5, #1
 800c5d0:	e7c3      	b.n	800c55a <__gethex+0x9e>
 800c5d2:	2400      	movs	r4, #0
 800c5d4:	1cb1      	adds	r1, r6, #2
 800c5d6:	e7cc      	b.n	800c572 <__gethex+0xb6>
 800c5d8:	2401      	movs	r4, #1
 800c5da:	e7fb      	b.n	800c5d4 <__gethex+0x118>
 800c5dc:	fb03 0002 	mla	r0, r3, r2, r0
 800c5e0:	e7ce      	b.n	800c580 <__gethex+0xc4>
 800c5e2:	4631      	mov	r1, r6
 800c5e4:	e7de      	b.n	800c5a4 <__gethex+0xe8>
 800c5e6:	4629      	mov	r1, r5
 800c5e8:	eba6 0309 	sub.w	r3, r6, r9
 800c5ec:	3b01      	subs	r3, #1
 800c5ee:	2b07      	cmp	r3, #7
 800c5f0:	dc0a      	bgt.n	800c608 <__gethex+0x14c>
 800c5f2:	9801      	ldr	r0, [sp, #4]
 800c5f4:	f7fd ff8e 	bl	800a514 <_Balloc>
 800c5f8:	4604      	mov	r4, r0
 800c5fa:	b940      	cbnz	r0, 800c60e <__gethex+0x152>
 800c5fc:	4602      	mov	r2, r0
 800c5fe:	21e4      	movs	r1, #228	@ 0xe4
 800c600:	4b5b      	ldr	r3, [pc, #364]	@ (800c770 <__gethex+0x2b4>)
 800c602:	485c      	ldr	r0, [pc, #368]	@ (800c774 <__gethex+0x2b8>)
 800c604:	f7ff fec0 	bl	800c388 <__assert_func>
 800c608:	3101      	adds	r1, #1
 800c60a:	105b      	asrs	r3, r3, #1
 800c60c:	e7ef      	b.n	800c5ee <__gethex+0x132>
 800c60e:	2300      	movs	r3, #0
 800c610:	f100 0a14 	add.w	sl, r0, #20
 800c614:	4655      	mov	r5, sl
 800c616:	469b      	mov	fp, r3
 800c618:	45b1      	cmp	r9, r6
 800c61a:	d337      	bcc.n	800c68c <__gethex+0x1d0>
 800c61c:	f845 bb04 	str.w	fp, [r5], #4
 800c620:	eba5 050a 	sub.w	r5, r5, sl
 800c624:	10ad      	asrs	r5, r5, #2
 800c626:	6125      	str	r5, [r4, #16]
 800c628:	4658      	mov	r0, fp
 800c62a:	f7fe f865 	bl	800a6f8 <__hi0bits>
 800c62e:	016d      	lsls	r5, r5, #5
 800c630:	f8d8 6000 	ldr.w	r6, [r8]
 800c634:	1a2d      	subs	r5, r5, r0
 800c636:	42b5      	cmp	r5, r6
 800c638:	dd54      	ble.n	800c6e4 <__gethex+0x228>
 800c63a:	1bad      	subs	r5, r5, r6
 800c63c:	4629      	mov	r1, r5
 800c63e:	4620      	mov	r0, r4
 800c640:	f7fe fbed 	bl	800ae1e <__any_on>
 800c644:	4681      	mov	r9, r0
 800c646:	b178      	cbz	r0, 800c668 <__gethex+0x1ac>
 800c648:	f04f 0901 	mov.w	r9, #1
 800c64c:	1e6b      	subs	r3, r5, #1
 800c64e:	1159      	asrs	r1, r3, #5
 800c650:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c654:	f003 021f 	and.w	r2, r3, #31
 800c658:	fa09 f202 	lsl.w	r2, r9, r2
 800c65c:	420a      	tst	r2, r1
 800c65e:	d003      	beq.n	800c668 <__gethex+0x1ac>
 800c660:	454b      	cmp	r3, r9
 800c662:	dc36      	bgt.n	800c6d2 <__gethex+0x216>
 800c664:	f04f 0902 	mov.w	r9, #2
 800c668:	4629      	mov	r1, r5
 800c66a:	4620      	mov	r0, r4
 800c66c:	f7ff febe 	bl	800c3ec <rshift>
 800c670:	442f      	add	r7, r5
 800c672:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c676:	42bb      	cmp	r3, r7
 800c678:	da42      	bge.n	800c700 <__gethex+0x244>
 800c67a:	4621      	mov	r1, r4
 800c67c:	9801      	ldr	r0, [sp, #4]
 800c67e:	f7fd ff89 	bl	800a594 <_Bfree>
 800c682:	2300      	movs	r3, #0
 800c684:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c686:	25a3      	movs	r5, #163	@ 0xa3
 800c688:	6013      	str	r3, [r2, #0]
 800c68a:	e793      	b.n	800c5b4 <__gethex+0xf8>
 800c68c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c690:	2a2e      	cmp	r2, #46	@ 0x2e
 800c692:	d012      	beq.n	800c6ba <__gethex+0x1fe>
 800c694:	2b20      	cmp	r3, #32
 800c696:	d104      	bne.n	800c6a2 <__gethex+0x1e6>
 800c698:	f845 bb04 	str.w	fp, [r5], #4
 800c69c:	f04f 0b00 	mov.w	fp, #0
 800c6a0:	465b      	mov	r3, fp
 800c6a2:	7830      	ldrb	r0, [r6, #0]
 800c6a4:	9303      	str	r3, [sp, #12]
 800c6a6:	f7ff fef4 	bl	800c492 <__hexdig_fun>
 800c6aa:	9b03      	ldr	r3, [sp, #12]
 800c6ac:	f000 000f 	and.w	r0, r0, #15
 800c6b0:	4098      	lsls	r0, r3
 800c6b2:	ea4b 0b00 	orr.w	fp, fp, r0
 800c6b6:	3304      	adds	r3, #4
 800c6b8:	e7ae      	b.n	800c618 <__gethex+0x15c>
 800c6ba:	45b1      	cmp	r9, r6
 800c6bc:	d8ea      	bhi.n	800c694 <__gethex+0x1d8>
 800c6be:	2201      	movs	r2, #1
 800c6c0:	4630      	mov	r0, r6
 800c6c2:	492a      	ldr	r1, [pc, #168]	@ (800c76c <__gethex+0x2b0>)
 800c6c4:	9303      	str	r3, [sp, #12]
 800c6c6:	f7ff fe37 	bl	800c338 <strncmp>
 800c6ca:	9b03      	ldr	r3, [sp, #12]
 800c6cc:	2800      	cmp	r0, #0
 800c6ce:	d1e1      	bne.n	800c694 <__gethex+0x1d8>
 800c6d0:	e7a2      	b.n	800c618 <__gethex+0x15c>
 800c6d2:	4620      	mov	r0, r4
 800c6d4:	1ea9      	subs	r1, r5, #2
 800c6d6:	f7fe fba2 	bl	800ae1e <__any_on>
 800c6da:	2800      	cmp	r0, #0
 800c6dc:	d0c2      	beq.n	800c664 <__gethex+0x1a8>
 800c6de:	f04f 0903 	mov.w	r9, #3
 800c6e2:	e7c1      	b.n	800c668 <__gethex+0x1ac>
 800c6e4:	da09      	bge.n	800c6fa <__gethex+0x23e>
 800c6e6:	1b75      	subs	r5, r6, r5
 800c6e8:	4621      	mov	r1, r4
 800c6ea:	462a      	mov	r2, r5
 800c6ec:	9801      	ldr	r0, [sp, #4]
 800c6ee:	f7fe f967 	bl	800a9c0 <__lshift>
 800c6f2:	4604      	mov	r4, r0
 800c6f4:	1b7f      	subs	r7, r7, r5
 800c6f6:	f100 0a14 	add.w	sl, r0, #20
 800c6fa:	f04f 0900 	mov.w	r9, #0
 800c6fe:	e7b8      	b.n	800c672 <__gethex+0x1b6>
 800c700:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c704:	42bd      	cmp	r5, r7
 800c706:	dd6f      	ble.n	800c7e8 <__gethex+0x32c>
 800c708:	1bed      	subs	r5, r5, r7
 800c70a:	42ae      	cmp	r6, r5
 800c70c:	dc34      	bgt.n	800c778 <__gethex+0x2bc>
 800c70e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c712:	2b02      	cmp	r3, #2
 800c714:	d022      	beq.n	800c75c <__gethex+0x2a0>
 800c716:	2b03      	cmp	r3, #3
 800c718:	d024      	beq.n	800c764 <__gethex+0x2a8>
 800c71a:	2b01      	cmp	r3, #1
 800c71c:	d115      	bne.n	800c74a <__gethex+0x28e>
 800c71e:	42ae      	cmp	r6, r5
 800c720:	d113      	bne.n	800c74a <__gethex+0x28e>
 800c722:	2e01      	cmp	r6, #1
 800c724:	d10b      	bne.n	800c73e <__gethex+0x282>
 800c726:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c72a:	9a02      	ldr	r2, [sp, #8]
 800c72c:	2562      	movs	r5, #98	@ 0x62
 800c72e:	6013      	str	r3, [r2, #0]
 800c730:	2301      	movs	r3, #1
 800c732:	6123      	str	r3, [r4, #16]
 800c734:	f8ca 3000 	str.w	r3, [sl]
 800c738:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c73a:	601c      	str	r4, [r3, #0]
 800c73c:	e73a      	b.n	800c5b4 <__gethex+0xf8>
 800c73e:	4620      	mov	r0, r4
 800c740:	1e71      	subs	r1, r6, #1
 800c742:	f7fe fb6c 	bl	800ae1e <__any_on>
 800c746:	2800      	cmp	r0, #0
 800c748:	d1ed      	bne.n	800c726 <__gethex+0x26a>
 800c74a:	4621      	mov	r1, r4
 800c74c:	9801      	ldr	r0, [sp, #4]
 800c74e:	f7fd ff21 	bl	800a594 <_Bfree>
 800c752:	2300      	movs	r3, #0
 800c754:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c756:	2550      	movs	r5, #80	@ 0x50
 800c758:	6013      	str	r3, [r2, #0]
 800c75a:	e72b      	b.n	800c5b4 <__gethex+0xf8>
 800c75c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d1f3      	bne.n	800c74a <__gethex+0x28e>
 800c762:	e7e0      	b.n	800c726 <__gethex+0x26a>
 800c764:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c766:	2b00      	cmp	r3, #0
 800c768:	d1dd      	bne.n	800c726 <__gethex+0x26a>
 800c76a:	e7ee      	b.n	800c74a <__gethex+0x28e>
 800c76c:	0800cf50 	.word	0x0800cf50
 800c770:	0800cde3 	.word	0x0800cde3
 800c774:	0800d0fe 	.word	0x0800d0fe
 800c778:	1e6f      	subs	r7, r5, #1
 800c77a:	f1b9 0f00 	cmp.w	r9, #0
 800c77e:	d130      	bne.n	800c7e2 <__gethex+0x326>
 800c780:	b127      	cbz	r7, 800c78c <__gethex+0x2d0>
 800c782:	4639      	mov	r1, r7
 800c784:	4620      	mov	r0, r4
 800c786:	f7fe fb4a 	bl	800ae1e <__any_on>
 800c78a:	4681      	mov	r9, r0
 800c78c:	2301      	movs	r3, #1
 800c78e:	4629      	mov	r1, r5
 800c790:	1b76      	subs	r6, r6, r5
 800c792:	2502      	movs	r5, #2
 800c794:	117a      	asrs	r2, r7, #5
 800c796:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c79a:	f007 071f 	and.w	r7, r7, #31
 800c79e:	40bb      	lsls	r3, r7
 800c7a0:	4213      	tst	r3, r2
 800c7a2:	4620      	mov	r0, r4
 800c7a4:	bf18      	it	ne
 800c7a6:	f049 0902 	orrne.w	r9, r9, #2
 800c7aa:	f7ff fe1f 	bl	800c3ec <rshift>
 800c7ae:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c7b2:	f1b9 0f00 	cmp.w	r9, #0
 800c7b6:	d047      	beq.n	800c848 <__gethex+0x38c>
 800c7b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c7bc:	2b02      	cmp	r3, #2
 800c7be:	d015      	beq.n	800c7ec <__gethex+0x330>
 800c7c0:	2b03      	cmp	r3, #3
 800c7c2:	d017      	beq.n	800c7f4 <__gethex+0x338>
 800c7c4:	2b01      	cmp	r3, #1
 800c7c6:	d109      	bne.n	800c7dc <__gethex+0x320>
 800c7c8:	f019 0f02 	tst.w	r9, #2
 800c7cc:	d006      	beq.n	800c7dc <__gethex+0x320>
 800c7ce:	f8da 3000 	ldr.w	r3, [sl]
 800c7d2:	ea49 0903 	orr.w	r9, r9, r3
 800c7d6:	f019 0f01 	tst.w	r9, #1
 800c7da:	d10e      	bne.n	800c7fa <__gethex+0x33e>
 800c7dc:	f045 0510 	orr.w	r5, r5, #16
 800c7e0:	e032      	b.n	800c848 <__gethex+0x38c>
 800c7e2:	f04f 0901 	mov.w	r9, #1
 800c7e6:	e7d1      	b.n	800c78c <__gethex+0x2d0>
 800c7e8:	2501      	movs	r5, #1
 800c7ea:	e7e2      	b.n	800c7b2 <__gethex+0x2f6>
 800c7ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7ee:	f1c3 0301 	rsb	r3, r3, #1
 800c7f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c7f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d0f0      	beq.n	800c7dc <__gethex+0x320>
 800c7fa:	f04f 0c00 	mov.w	ip, #0
 800c7fe:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c802:	f104 0314 	add.w	r3, r4, #20
 800c806:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c80a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c80e:	4618      	mov	r0, r3
 800c810:	f853 2b04 	ldr.w	r2, [r3], #4
 800c814:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c818:	d01b      	beq.n	800c852 <__gethex+0x396>
 800c81a:	3201      	adds	r2, #1
 800c81c:	6002      	str	r2, [r0, #0]
 800c81e:	2d02      	cmp	r5, #2
 800c820:	f104 0314 	add.w	r3, r4, #20
 800c824:	d13c      	bne.n	800c8a0 <__gethex+0x3e4>
 800c826:	f8d8 2000 	ldr.w	r2, [r8]
 800c82a:	3a01      	subs	r2, #1
 800c82c:	42b2      	cmp	r2, r6
 800c82e:	d109      	bne.n	800c844 <__gethex+0x388>
 800c830:	2201      	movs	r2, #1
 800c832:	1171      	asrs	r1, r6, #5
 800c834:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c838:	f006 061f 	and.w	r6, r6, #31
 800c83c:	fa02 f606 	lsl.w	r6, r2, r6
 800c840:	421e      	tst	r6, r3
 800c842:	d13a      	bne.n	800c8ba <__gethex+0x3fe>
 800c844:	f045 0520 	orr.w	r5, r5, #32
 800c848:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c84a:	601c      	str	r4, [r3, #0]
 800c84c:	9b02      	ldr	r3, [sp, #8]
 800c84e:	601f      	str	r7, [r3, #0]
 800c850:	e6b0      	b.n	800c5b4 <__gethex+0xf8>
 800c852:	4299      	cmp	r1, r3
 800c854:	f843 cc04 	str.w	ip, [r3, #-4]
 800c858:	d8d9      	bhi.n	800c80e <__gethex+0x352>
 800c85a:	68a3      	ldr	r3, [r4, #8]
 800c85c:	459b      	cmp	fp, r3
 800c85e:	db17      	blt.n	800c890 <__gethex+0x3d4>
 800c860:	6861      	ldr	r1, [r4, #4]
 800c862:	9801      	ldr	r0, [sp, #4]
 800c864:	3101      	adds	r1, #1
 800c866:	f7fd fe55 	bl	800a514 <_Balloc>
 800c86a:	4681      	mov	r9, r0
 800c86c:	b918      	cbnz	r0, 800c876 <__gethex+0x3ba>
 800c86e:	4602      	mov	r2, r0
 800c870:	2184      	movs	r1, #132	@ 0x84
 800c872:	4b19      	ldr	r3, [pc, #100]	@ (800c8d8 <__gethex+0x41c>)
 800c874:	e6c5      	b.n	800c602 <__gethex+0x146>
 800c876:	6922      	ldr	r2, [r4, #16]
 800c878:	f104 010c 	add.w	r1, r4, #12
 800c87c:	3202      	adds	r2, #2
 800c87e:	0092      	lsls	r2, r2, #2
 800c880:	300c      	adds	r0, #12
 800c882:	f7fc fee4 	bl	800964e <memcpy>
 800c886:	4621      	mov	r1, r4
 800c888:	9801      	ldr	r0, [sp, #4]
 800c88a:	f7fd fe83 	bl	800a594 <_Bfree>
 800c88e:	464c      	mov	r4, r9
 800c890:	6923      	ldr	r3, [r4, #16]
 800c892:	1c5a      	adds	r2, r3, #1
 800c894:	6122      	str	r2, [r4, #16]
 800c896:	2201      	movs	r2, #1
 800c898:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c89c:	615a      	str	r2, [r3, #20]
 800c89e:	e7be      	b.n	800c81e <__gethex+0x362>
 800c8a0:	6922      	ldr	r2, [r4, #16]
 800c8a2:	455a      	cmp	r2, fp
 800c8a4:	dd0b      	ble.n	800c8be <__gethex+0x402>
 800c8a6:	2101      	movs	r1, #1
 800c8a8:	4620      	mov	r0, r4
 800c8aa:	f7ff fd9f 	bl	800c3ec <rshift>
 800c8ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c8b2:	3701      	adds	r7, #1
 800c8b4:	42bb      	cmp	r3, r7
 800c8b6:	f6ff aee0 	blt.w	800c67a <__gethex+0x1be>
 800c8ba:	2501      	movs	r5, #1
 800c8bc:	e7c2      	b.n	800c844 <__gethex+0x388>
 800c8be:	f016 061f 	ands.w	r6, r6, #31
 800c8c2:	d0fa      	beq.n	800c8ba <__gethex+0x3fe>
 800c8c4:	4453      	add	r3, sl
 800c8c6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c8ca:	f7fd ff15 	bl	800a6f8 <__hi0bits>
 800c8ce:	f1c6 0620 	rsb	r6, r6, #32
 800c8d2:	42b0      	cmp	r0, r6
 800c8d4:	dbe7      	blt.n	800c8a6 <__gethex+0x3ea>
 800c8d6:	e7f0      	b.n	800c8ba <__gethex+0x3fe>
 800c8d8:	0800cde3 	.word	0x0800cde3

0800c8dc <L_shift>:
 800c8dc:	f1c2 0208 	rsb	r2, r2, #8
 800c8e0:	0092      	lsls	r2, r2, #2
 800c8e2:	b570      	push	{r4, r5, r6, lr}
 800c8e4:	f1c2 0620 	rsb	r6, r2, #32
 800c8e8:	6843      	ldr	r3, [r0, #4]
 800c8ea:	6804      	ldr	r4, [r0, #0]
 800c8ec:	fa03 f506 	lsl.w	r5, r3, r6
 800c8f0:	432c      	orrs	r4, r5
 800c8f2:	40d3      	lsrs	r3, r2
 800c8f4:	6004      	str	r4, [r0, #0]
 800c8f6:	f840 3f04 	str.w	r3, [r0, #4]!
 800c8fa:	4288      	cmp	r0, r1
 800c8fc:	d3f4      	bcc.n	800c8e8 <L_shift+0xc>
 800c8fe:	bd70      	pop	{r4, r5, r6, pc}

0800c900 <__match>:
 800c900:	b530      	push	{r4, r5, lr}
 800c902:	6803      	ldr	r3, [r0, #0]
 800c904:	3301      	adds	r3, #1
 800c906:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c90a:	b914      	cbnz	r4, 800c912 <__match+0x12>
 800c90c:	6003      	str	r3, [r0, #0]
 800c90e:	2001      	movs	r0, #1
 800c910:	bd30      	pop	{r4, r5, pc}
 800c912:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c916:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c91a:	2d19      	cmp	r5, #25
 800c91c:	bf98      	it	ls
 800c91e:	3220      	addls	r2, #32
 800c920:	42a2      	cmp	r2, r4
 800c922:	d0f0      	beq.n	800c906 <__match+0x6>
 800c924:	2000      	movs	r0, #0
 800c926:	e7f3      	b.n	800c910 <__match+0x10>

0800c928 <__hexnan>:
 800c928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c92c:	2500      	movs	r5, #0
 800c92e:	680b      	ldr	r3, [r1, #0]
 800c930:	4682      	mov	sl, r0
 800c932:	115e      	asrs	r6, r3, #5
 800c934:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c938:	f013 031f 	ands.w	r3, r3, #31
 800c93c:	bf18      	it	ne
 800c93e:	3604      	addne	r6, #4
 800c940:	1f37      	subs	r7, r6, #4
 800c942:	4690      	mov	r8, r2
 800c944:	46b9      	mov	r9, r7
 800c946:	463c      	mov	r4, r7
 800c948:	46ab      	mov	fp, r5
 800c94a:	b087      	sub	sp, #28
 800c94c:	6801      	ldr	r1, [r0, #0]
 800c94e:	9301      	str	r3, [sp, #4]
 800c950:	f846 5c04 	str.w	r5, [r6, #-4]
 800c954:	9502      	str	r5, [sp, #8]
 800c956:	784a      	ldrb	r2, [r1, #1]
 800c958:	1c4b      	adds	r3, r1, #1
 800c95a:	9303      	str	r3, [sp, #12]
 800c95c:	b342      	cbz	r2, 800c9b0 <__hexnan+0x88>
 800c95e:	4610      	mov	r0, r2
 800c960:	9105      	str	r1, [sp, #20]
 800c962:	9204      	str	r2, [sp, #16]
 800c964:	f7ff fd95 	bl	800c492 <__hexdig_fun>
 800c968:	2800      	cmp	r0, #0
 800c96a:	d151      	bne.n	800ca10 <__hexnan+0xe8>
 800c96c:	9a04      	ldr	r2, [sp, #16]
 800c96e:	9905      	ldr	r1, [sp, #20]
 800c970:	2a20      	cmp	r2, #32
 800c972:	d818      	bhi.n	800c9a6 <__hexnan+0x7e>
 800c974:	9b02      	ldr	r3, [sp, #8]
 800c976:	459b      	cmp	fp, r3
 800c978:	dd13      	ble.n	800c9a2 <__hexnan+0x7a>
 800c97a:	454c      	cmp	r4, r9
 800c97c:	d206      	bcs.n	800c98c <__hexnan+0x64>
 800c97e:	2d07      	cmp	r5, #7
 800c980:	dc04      	bgt.n	800c98c <__hexnan+0x64>
 800c982:	462a      	mov	r2, r5
 800c984:	4649      	mov	r1, r9
 800c986:	4620      	mov	r0, r4
 800c988:	f7ff ffa8 	bl	800c8dc <L_shift>
 800c98c:	4544      	cmp	r4, r8
 800c98e:	d952      	bls.n	800ca36 <__hexnan+0x10e>
 800c990:	2300      	movs	r3, #0
 800c992:	f1a4 0904 	sub.w	r9, r4, #4
 800c996:	f844 3c04 	str.w	r3, [r4, #-4]
 800c99a:	461d      	mov	r5, r3
 800c99c:	464c      	mov	r4, r9
 800c99e:	f8cd b008 	str.w	fp, [sp, #8]
 800c9a2:	9903      	ldr	r1, [sp, #12]
 800c9a4:	e7d7      	b.n	800c956 <__hexnan+0x2e>
 800c9a6:	2a29      	cmp	r2, #41	@ 0x29
 800c9a8:	d157      	bne.n	800ca5a <__hexnan+0x132>
 800c9aa:	3102      	adds	r1, #2
 800c9ac:	f8ca 1000 	str.w	r1, [sl]
 800c9b0:	f1bb 0f00 	cmp.w	fp, #0
 800c9b4:	d051      	beq.n	800ca5a <__hexnan+0x132>
 800c9b6:	454c      	cmp	r4, r9
 800c9b8:	d206      	bcs.n	800c9c8 <__hexnan+0xa0>
 800c9ba:	2d07      	cmp	r5, #7
 800c9bc:	dc04      	bgt.n	800c9c8 <__hexnan+0xa0>
 800c9be:	462a      	mov	r2, r5
 800c9c0:	4649      	mov	r1, r9
 800c9c2:	4620      	mov	r0, r4
 800c9c4:	f7ff ff8a 	bl	800c8dc <L_shift>
 800c9c8:	4544      	cmp	r4, r8
 800c9ca:	d936      	bls.n	800ca3a <__hexnan+0x112>
 800c9cc:	4623      	mov	r3, r4
 800c9ce:	f1a8 0204 	sub.w	r2, r8, #4
 800c9d2:	f853 1b04 	ldr.w	r1, [r3], #4
 800c9d6:	429f      	cmp	r7, r3
 800c9d8:	f842 1f04 	str.w	r1, [r2, #4]!
 800c9dc:	d2f9      	bcs.n	800c9d2 <__hexnan+0xaa>
 800c9de:	1b3b      	subs	r3, r7, r4
 800c9e0:	f023 0303 	bic.w	r3, r3, #3
 800c9e4:	3304      	adds	r3, #4
 800c9e6:	3401      	adds	r4, #1
 800c9e8:	3e03      	subs	r6, #3
 800c9ea:	42b4      	cmp	r4, r6
 800c9ec:	bf88      	it	hi
 800c9ee:	2304      	movhi	r3, #4
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	4443      	add	r3, r8
 800c9f4:	f843 2b04 	str.w	r2, [r3], #4
 800c9f8:	429f      	cmp	r7, r3
 800c9fa:	d2fb      	bcs.n	800c9f4 <__hexnan+0xcc>
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	b91b      	cbnz	r3, 800ca08 <__hexnan+0xe0>
 800ca00:	4547      	cmp	r7, r8
 800ca02:	d128      	bne.n	800ca56 <__hexnan+0x12e>
 800ca04:	2301      	movs	r3, #1
 800ca06:	603b      	str	r3, [r7, #0]
 800ca08:	2005      	movs	r0, #5
 800ca0a:	b007      	add	sp, #28
 800ca0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca10:	3501      	adds	r5, #1
 800ca12:	2d08      	cmp	r5, #8
 800ca14:	f10b 0b01 	add.w	fp, fp, #1
 800ca18:	dd06      	ble.n	800ca28 <__hexnan+0x100>
 800ca1a:	4544      	cmp	r4, r8
 800ca1c:	d9c1      	bls.n	800c9a2 <__hexnan+0x7a>
 800ca1e:	2300      	movs	r3, #0
 800ca20:	2501      	movs	r5, #1
 800ca22:	f844 3c04 	str.w	r3, [r4, #-4]
 800ca26:	3c04      	subs	r4, #4
 800ca28:	6822      	ldr	r2, [r4, #0]
 800ca2a:	f000 000f 	and.w	r0, r0, #15
 800ca2e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ca32:	6020      	str	r0, [r4, #0]
 800ca34:	e7b5      	b.n	800c9a2 <__hexnan+0x7a>
 800ca36:	2508      	movs	r5, #8
 800ca38:	e7b3      	b.n	800c9a2 <__hexnan+0x7a>
 800ca3a:	9b01      	ldr	r3, [sp, #4]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d0dd      	beq.n	800c9fc <__hexnan+0xd4>
 800ca40:	f04f 32ff 	mov.w	r2, #4294967295
 800ca44:	f1c3 0320 	rsb	r3, r3, #32
 800ca48:	40da      	lsrs	r2, r3
 800ca4a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ca4e:	4013      	ands	r3, r2
 800ca50:	f846 3c04 	str.w	r3, [r6, #-4]
 800ca54:	e7d2      	b.n	800c9fc <__hexnan+0xd4>
 800ca56:	3f04      	subs	r7, #4
 800ca58:	e7d0      	b.n	800c9fc <__hexnan+0xd4>
 800ca5a:	2004      	movs	r0, #4
 800ca5c:	e7d5      	b.n	800ca0a <__hexnan+0xe2>

0800ca5e <__ascii_mbtowc>:
 800ca5e:	b082      	sub	sp, #8
 800ca60:	b901      	cbnz	r1, 800ca64 <__ascii_mbtowc+0x6>
 800ca62:	a901      	add	r1, sp, #4
 800ca64:	b142      	cbz	r2, 800ca78 <__ascii_mbtowc+0x1a>
 800ca66:	b14b      	cbz	r3, 800ca7c <__ascii_mbtowc+0x1e>
 800ca68:	7813      	ldrb	r3, [r2, #0]
 800ca6a:	600b      	str	r3, [r1, #0]
 800ca6c:	7812      	ldrb	r2, [r2, #0]
 800ca6e:	1e10      	subs	r0, r2, #0
 800ca70:	bf18      	it	ne
 800ca72:	2001      	movne	r0, #1
 800ca74:	b002      	add	sp, #8
 800ca76:	4770      	bx	lr
 800ca78:	4610      	mov	r0, r2
 800ca7a:	e7fb      	b.n	800ca74 <__ascii_mbtowc+0x16>
 800ca7c:	f06f 0001 	mvn.w	r0, #1
 800ca80:	e7f8      	b.n	800ca74 <__ascii_mbtowc+0x16>

0800ca82 <_realloc_r>:
 800ca82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca86:	4680      	mov	r8, r0
 800ca88:	4615      	mov	r5, r2
 800ca8a:	460c      	mov	r4, r1
 800ca8c:	b921      	cbnz	r1, 800ca98 <_realloc_r+0x16>
 800ca8e:	4611      	mov	r1, r2
 800ca90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca94:	f7fd bcb2 	b.w	800a3fc <_malloc_r>
 800ca98:	b92a      	cbnz	r2, 800caa6 <_realloc_r+0x24>
 800ca9a:	f7fd fc3d 	bl	800a318 <_free_r>
 800ca9e:	2400      	movs	r4, #0
 800caa0:	4620      	mov	r0, r4
 800caa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caa6:	f000 f8c4 	bl	800cc32 <_malloc_usable_size_r>
 800caaa:	4285      	cmp	r5, r0
 800caac:	4606      	mov	r6, r0
 800caae:	d802      	bhi.n	800cab6 <_realloc_r+0x34>
 800cab0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cab4:	d8f4      	bhi.n	800caa0 <_realloc_r+0x1e>
 800cab6:	4629      	mov	r1, r5
 800cab8:	4640      	mov	r0, r8
 800caba:	f7fd fc9f 	bl	800a3fc <_malloc_r>
 800cabe:	4607      	mov	r7, r0
 800cac0:	2800      	cmp	r0, #0
 800cac2:	d0ec      	beq.n	800ca9e <_realloc_r+0x1c>
 800cac4:	42b5      	cmp	r5, r6
 800cac6:	462a      	mov	r2, r5
 800cac8:	4621      	mov	r1, r4
 800caca:	bf28      	it	cs
 800cacc:	4632      	movcs	r2, r6
 800cace:	f7fc fdbe 	bl	800964e <memcpy>
 800cad2:	4621      	mov	r1, r4
 800cad4:	4640      	mov	r0, r8
 800cad6:	f7fd fc1f 	bl	800a318 <_free_r>
 800cada:	463c      	mov	r4, r7
 800cadc:	e7e0      	b.n	800caa0 <_realloc_r+0x1e>

0800cade <__ascii_wctomb>:
 800cade:	4603      	mov	r3, r0
 800cae0:	4608      	mov	r0, r1
 800cae2:	b141      	cbz	r1, 800caf6 <__ascii_wctomb+0x18>
 800cae4:	2aff      	cmp	r2, #255	@ 0xff
 800cae6:	d904      	bls.n	800caf2 <__ascii_wctomb+0x14>
 800cae8:	228a      	movs	r2, #138	@ 0x8a
 800caea:	f04f 30ff 	mov.w	r0, #4294967295
 800caee:	601a      	str	r2, [r3, #0]
 800caf0:	4770      	bx	lr
 800caf2:	2001      	movs	r0, #1
 800caf4:	700a      	strb	r2, [r1, #0]
 800caf6:	4770      	bx	lr

0800caf8 <fiprintf>:
 800caf8:	b40e      	push	{r1, r2, r3}
 800cafa:	b503      	push	{r0, r1, lr}
 800cafc:	4601      	mov	r1, r0
 800cafe:	ab03      	add	r3, sp, #12
 800cb00:	4805      	ldr	r0, [pc, #20]	@ (800cb18 <fiprintf+0x20>)
 800cb02:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb06:	6800      	ldr	r0, [r0, #0]
 800cb08:	9301      	str	r3, [sp, #4]
 800cb0a:	f7ff f9a7 	bl	800be5c <_vfiprintf_r>
 800cb0e:	b002      	add	sp, #8
 800cb10:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb14:	b003      	add	sp, #12
 800cb16:	4770      	bx	lr
 800cb18:	2000007c 	.word	0x2000007c

0800cb1c <__swhatbuf_r>:
 800cb1c:	b570      	push	{r4, r5, r6, lr}
 800cb1e:	460c      	mov	r4, r1
 800cb20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb24:	4615      	mov	r5, r2
 800cb26:	2900      	cmp	r1, #0
 800cb28:	461e      	mov	r6, r3
 800cb2a:	b096      	sub	sp, #88	@ 0x58
 800cb2c:	da0c      	bge.n	800cb48 <__swhatbuf_r+0x2c>
 800cb2e:	89a3      	ldrh	r3, [r4, #12]
 800cb30:	2100      	movs	r1, #0
 800cb32:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cb36:	bf14      	ite	ne
 800cb38:	2340      	movne	r3, #64	@ 0x40
 800cb3a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cb3e:	2000      	movs	r0, #0
 800cb40:	6031      	str	r1, [r6, #0]
 800cb42:	602b      	str	r3, [r5, #0]
 800cb44:	b016      	add	sp, #88	@ 0x58
 800cb46:	bd70      	pop	{r4, r5, r6, pc}
 800cb48:	466a      	mov	r2, sp
 800cb4a:	f000 f849 	bl	800cbe0 <_fstat_r>
 800cb4e:	2800      	cmp	r0, #0
 800cb50:	dbed      	blt.n	800cb2e <__swhatbuf_r+0x12>
 800cb52:	9901      	ldr	r1, [sp, #4]
 800cb54:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cb58:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cb5c:	4259      	negs	r1, r3
 800cb5e:	4159      	adcs	r1, r3
 800cb60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cb64:	e7eb      	b.n	800cb3e <__swhatbuf_r+0x22>

0800cb66 <__smakebuf_r>:
 800cb66:	898b      	ldrh	r3, [r1, #12]
 800cb68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb6a:	079d      	lsls	r5, r3, #30
 800cb6c:	4606      	mov	r6, r0
 800cb6e:	460c      	mov	r4, r1
 800cb70:	d507      	bpl.n	800cb82 <__smakebuf_r+0x1c>
 800cb72:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cb76:	6023      	str	r3, [r4, #0]
 800cb78:	6123      	str	r3, [r4, #16]
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	6163      	str	r3, [r4, #20]
 800cb7e:	b003      	add	sp, #12
 800cb80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb82:	466a      	mov	r2, sp
 800cb84:	ab01      	add	r3, sp, #4
 800cb86:	f7ff ffc9 	bl	800cb1c <__swhatbuf_r>
 800cb8a:	9f00      	ldr	r7, [sp, #0]
 800cb8c:	4605      	mov	r5, r0
 800cb8e:	4639      	mov	r1, r7
 800cb90:	4630      	mov	r0, r6
 800cb92:	f7fd fc33 	bl	800a3fc <_malloc_r>
 800cb96:	b948      	cbnz	r0, 800cbac <__smakebuf_r+0x46>
 800cb98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb9c:	059a      	lsls	r2, r3, #22
 800cb9e:	d4ee      	bmi.n	800cb7e <__smakebuf_r+0x18>
 800cba0:	f023 0303 	bic.w	r3, r3, #3
 800cba4:	f043 0302 	orr.w	r3, r3, #2
 800cba8:	81a3      	strh	r3, [r4, #12]
 800cbaa:	e7e2      	b.n	800cb72 <__smakebuf_r+0xc>
 800cbac:	89a3      	ldrh	r3, [r4, #12]
 800cbae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cbb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cbb6:	81a3      	strh	r3, [r4, #12]
 800cbb8:	9b01      	ldr	r3, [sp, #4]
 800cbba:	6020      	str	r0, [r4, #0]
 800cbbc:	b15b      	cbz	r3, 800cbd6 <__smakebuf_r+0x70>
 800cbbe:	4630      	mov	r0, r6
 800cbc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbc4:	f000 f81e 	bl	800cc04 <_isatty_r>
 800cbc8:	b128      	cbz	r0, 800cbd6 <__smakebuf_r+0x70>
 800cbca:	89a3      	ldrh	r3, [r4, #12]
 800cbcc:	f023 0303 	bic.w	r3, r3, #3
 800cbd0:	f043 0301 	orr.w	r3, r3, #1
 800cbd4:	81a3      	strh	r3, [r4, #12]
 800cbd6:	89a3      	ldrh	r3, [r4, #12]
 800cbd8:	431d      	orrs	r5, r3
 800cbda:	81a5      	strh	r5, [r4, #12]
 800cbdc:	e7cf      	b.n	800cb7e <__smakebuf_r+0x18>
	...

0800cbe0 <_fstat_r>:
 800cbe0:	b538      	push	{r3, r4, r5, lr}
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	4d06      	ldr	r5, [pc, #24]	@ (800cc00 <_fstat_r+0x20>)
 800cbe6:	4604      	mov	r4, r0
 800cbe8:	4608      	mov	r0, r1
 800cbea:	4611      	mov	r1, r2
 800cbec:	602b      	str	r3, [r5, #0]
 800cbee:	f7f6 fd6b 	bl	80036c8 <_fstat>
 800cbf2:	1c43      	adds	r3, r0, #1
 800cbf4:	d102      	bne.n	800cbfc <_fstat_r+0x1c>
 800cbf6:	682b      	ldr	r3, [r5, #0]
 800cbf8:	b103      	cbz	r3, 800cbfc <_fstat_r+0x1c>
 800cbfa:	6023      	str	r3, [r4, #0]
 800cbfc:	bd38      	pop	{r3, r4, r5, pc}
 800cbfe:	bf00      	nop
 800cc00:	20000d34 	.word	0x20000d34

0800cc04 <_isatty_r>:
 800cc04:	b538      	push	{r3, r4, r5, lr}
 800cc06:	2300      	movs	r3, #0
 800cc08:	4d05      	ldr	r5, [pc, #20]	@ (800cc20 <_isatty_r+0x1c>)
 800cc0a:	4604      	mov	r4, r0
 800cc0c:	4608      	mov	r0, r1
 800cc0e:	602b      	str	r3, [r5, #0]
 800cc10:	f7f6 fd69 	bl	80036e6 <_isatty>
 800cc14:	1c43      	adds	r3, r0, #1
 800cc16:	d102      	bne.n	800cc1e <_isatty_r+0x1a>
 800cc18:	682b      	ldr	r3, [r5, #0]
 800cc1a:	b103      	cbz	r3, 800cc1e <_isatty_r+0x1a>
 800cc1c:	6023      	str	r3, [r4, #0]
 800cc1e:	bd38      	pop	{r3, r4, r5, pc}
 800cc20:	20000d34 	.word	0x20000d34

0800cc24 <abort>:
 800cc24:	2006      	movs	r0, #6
 800cc26:	b508      	push	{r3, lr}
 800cc28:	f000 f834 	bl	800cc94 <raise>
 800cc2c:	2001      	movs	r0, #1
 800cc2e:	f7f6 fcfc 	bl	800362a <_exit>

0800cc32 <_malloc_usable_size_r>:
 800cc32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc36:	1f18      	subs	r0, r3, #4
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	bfbc      	itt	lt
 800cc3c:	580b      	ldrlt	r3, [r1, r0]
 800cc3e:	18c0      	addlt	r0, r0, r3
 800cc40:	4770      	bx	lr

0800cc42 <_raise_r>:
 800cc42:	291f      	cmp	r1, #31
 800cc44:	b538      	push	{r3, r4, r5, lr}
 800cc46:	4605      	mov	r5, r0
 800cc48:	460c      	mov	r4, r1
 800cc4a:	d904      	bls.n	800cc56 <_raise_r+0x14>
 800cc4c:	2316      	movs	r3, #22
 800cc4e:	6003      	str	r3, [r0, #0]
 800cc50:	f04f 30ff 	mov.w	r0, #4294967295
 800cc54:	bd38      	pop	{r3, r4, r5, pc}
 800cc56:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cc58:	b112      	cbz	r2, 800cc60 <_raise_r+0x1e>
 800cc5a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cc5e:	b94b      	cbnz	r3, 800cc74 <_raise_r+0x32>
 800cc60:	4628      	mov	r0, r5
 800cc62:	f000 f831 	bl	800ccc8 <_getpid_r>
 800cc66:	4622      	mov	r2, r4
 800cc68:	4601      	mov	r1, r0
 800cc6a:	4628      	mov	r0, r5
 800cc6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc70:	f000 b818 	b.w	800cca4 <_kill_r>
 800cc74:	2b01      	cmp	r3, #1
 800cc76:	d00a      	beq.n	800cc8e <_raise_r+0x4c>
 800cc78:	1c59      	adds	r1, r3, #1
 800cc7a:	d103      	bne.n	800cc84 <_raise_r+0x42>
 800cc7c:	2316      	movs	r3, #22
 800cc7e:	6003      	str	r3, [r0, #0]
 800cc80:	2001      	movs	r0, #1
 800cc82:	e7e7      	b.n	800cc54 <_raise_r+0x12>
 800cc84:	2100      	movs	r1, #0
 800cc86:	4620      	mov	r0, r4
 800cc88:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cc8c:	4798      	blx	r3
 800cc8e:	2000      	movs	r0, #0
 800cc90:	e7e0      	b.n	800cc54 <_raise_r+0x12>
	...

0800cc94 <raise>:
 800cc94:	4b02      	ldr	r3, [pc, #8]	@ (800cca0 <raise+0xc>)
 800cc96:	4601      	mov	r1, r0
 800cc98:	6818      	ldr	r0, [r3, #0]
 800cc9a:	f7ff bfd2 	b.w	800cc42 <_raise_r>
 800cc9e:	bf00      	nop
 800cca0:	2000007c 	.word	0x2000007c

0800cca4 <_kill_r>:
 800cca4:	b538      	push	{r3, r4, r5, lr}
 800cca6:	2300      	movs	r3, #0
 800cca8:	4d06      	ldr	r5, [pc, #24]	@ (800ccc4 <_kill_r+0x20>)
 800ccaa:	4604      	mov	r4, r0
 800ccac:	4608      	mov	r0, r1
 800ccae:	4611      	mov	r1, r2
 800ccb0:	602b      	str	r3, [r5, #0]
 800ccb2:	f7f6 fcaa 	bl	800360a <_kill>
 800ccb6:	1c43      	adds	r3, r0, #1
 800ccb8:	d102      	bne.n	800ccc0 <_kill_r+0x1c>
 800ccba:	682b      	ldr	r3, [r5, #0]
 800ccbc:	b103      	cbz	r3, 800ccc0 <_kill_r+0x1c>
 800ccbe:	6023      	str	r3, [r4, #0]
 800ccc0:	bd38      	pop	{r3, r4, r5, pc}
 800ccc2:	bf00      	nop
 800ccc4:	20000d34 	.word	0x20000d34

0800ccc8 <_getpid_r>:
 800ccc8:	f7f6 bc98 	b.w	80035fc <_getpid>

0800cccc <_init>:
 800cccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccce:	bf00      	nop
 800ccd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccd2:	bc08      	pop	{r3}
 800ccd4:	469e      	mov	lr, r3
 800ccd6:	4770      	bx	lr

0800ccd8 <_fini>:
 800ccd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccda:	bf00      	nop
 800ccdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccde:	bc08      	pop	{r3}
 800cce0:	469e      	mov	lr, r3
 800cce2:	4770      	bx	lr
